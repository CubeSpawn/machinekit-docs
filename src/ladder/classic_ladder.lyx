#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding default
\font_roman bookman
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\float_placement !htbp
\paperfontsize default
\spacing single
\papersize letterpaper
\use_geometry true
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 3
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Classic Ladder
\begin_inset LatexCommand index
name "Classic Ladder"

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Classic Ladder is a free implementation of a ladder interpreter, released
 under the LGPL.
 It has been written by Marc Le Douarain.
\end_layout

\begin_layout Standard
He describes the beginning of the project on his website Original project
 homepage:
\end_layout

\begin_layout Quote
\begin_inset Quotes eld
\end_inset

I decided to program a ladder language only for test purposes at the start,
 in February 2001.
 It was planned, that I would have to participate to a new product after
 leaving the enterprise in which I was working at that time.
 And I was thinking that to have a ladder language in those products could
 be a nice option to considerate.
 And so I started to code the first lines for calculating a rung with minimal
 elements and displaying dynamically it under Gtk, to see if my first idea
 to realize all this works.
\end_layout

\begin_layout Quote
And as quickly I've found that it advanced quite well, I've continued with
 more complex elements : timer, multiples rungs, etc...
\end_layout

\begin_layout Quote
Voila, here is this work...
 and more : I've continued to add features since then.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Classic Ladder has been adapted to work with EMC2's HAL, and is currently
 being distributed along with EMC2.
 If there are issues/problems/bugs please report them to the Enhanced Machine
 Controller project.
\end_layout

\begin_layout Section
Ladder Concepts
\end_layout

\begin_layout Standard
Classic Ladder is a type of programming language originally implemented
 on industrial PLC's (it's called Ladder Programming).
 It is based on the concept of relay contacts and coils, and can be used
 to construct logic checks and functions in a manner that is familiar to
 many systems integrators.
 It is important to know how ladder programs are evaluated when running:
\end_layout

\begin_layout Standard
It seems natural that each line would be evaluated left to right then the
 next line down etc-but it doesn't work this way.
 ALL the inputs are read, ALL the logic is figured out, then ALL the outputs
 are set.
 This can presents a problem in certain circumstance if the output of one
 line feeds the input of another.
 Another gotcha with ladder programming is the "Last One Wins" rule.
 If you have the same output in different locations of your ladder the state
 of the last one will be what the output is set to.
 
\end_layout

\begin_layout Standard
Classic Ladder version 7.124 has been adapted for EMC 2.3 This document describes
 that version.
 
\end_layout

\begin_layout Section
Languages
\end_layout

\begin_layout Standard
The most common language used when working with Classic Ladder is 'ladder'.
 Classic Ladder also supports Sequential Function Chart (Grafcet).
\end_layout

\begin_layout Section
Components
\end_layout

\begin_layout Standard
There are 2 components to Classic Ladder.
 
\end_layout

\begin_layout Itemize
The real time module classicladder_rt
\end_layout

\begin_layout Itemize
The user space module (including a GUI) classicladder
\end_layout

\begin_layout Subsection
Files
\end_layout

\begin_layout Standard
Typically classic ladder components are placed in the custom.hal file if
 your working from a Stepconf generated configuration.
 These must not be placed in the custom_postgui.hal file or the Ladder Editor
 menu will be grayed out.
 
\end_layout

\begin_layout Standard
Ladder files (.clp) must not contain any blank spaces in the name.
\end_layout

\begin_layout Subsection
Realtime Module
\end_layout

\begin_layout Standard
Loading the Classic Ladder real time module (classicladder_rt) is possible
 from a hal file, or directly using a halcmd instruction.
 The first line loads real time the Classic Ladder module.
 The second line adds the function classicladder.0.refresh to the servo thread.
 This line makes Classic Ladder update at the servo thread rate.
 
\end_layout

\begin_layout Quote
loadrt classicladder_rt
\newline
addf classicladder.0.refresh servo-thread
\end_layout

\begin_layout Standard
The speed of the thread that Classic Ladder is running in directly effects
 the responsiveness to inputs and outputs.
 If you can turn a switch on and off faster than Classic Ladder can notice
 it then you may need to speed up the thread.
 The fastest that Classic Ladder can update the rungs is one millisecond.
 You can put it in a faster thread but it will not update any faster.
 If you put it in a slower then one microsecond thread then Classic Ladder
 will update the rungs slower.
 The current scan time will be displayed on the section display, it is rounded
 to microseconds.
 If the scan time is longer than one millisecond you may want to shorten
 the ladder or put it in a slower thread.
\end_layout

\begin_layout Subsection
Variables
\end_layout

\begin_layout Standard
It is possible to configure the number of each type of ladder object while
 loading the Classic Ladder real time module.
 If you do not configure the number of ladder objects Classic Ladder will
 use the default values.
\end_layout

\begin_layout Standard
\begin_inset Float table
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Default Variable Count
\begin_inset LatexCommand label
name "cap:Default-Variable-Count"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="3">
<features>
<column alignment="left" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Object Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Variable Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Default Value
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of rungs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numRungs)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
100
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of bits
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numBits)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
20
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of word variables
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numWords)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
20
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of timers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numTimers)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of timers IEC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numTimersIec)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of monostables
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numMonostables)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of counters
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numCounters)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of hal inputs bit pins
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numPhysInputs)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
15
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of hal output bit pins
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numPhysOutputs)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
15
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of arithmetic expressions
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numArithmExpr)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
50
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of Sections
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numSections)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of Symbols
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numSymbols)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Auto
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of S32 inputs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numS32in)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of S32 outputs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numS32out)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of Float inputs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numFloatIn)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
<row bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
Number of Float outputs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
(numFloatOut)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
10
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Objects of most interest are numPhysInputs, numPhysOutputs, numS32in, and
 numS32out.
\end_layout

\begin_layout Standard
Changing these numbers will change the number of HAL bit pins available.
 numPhysInputs and numPhysOutputs control how many HAL bit (on/off) pins
 are available.
 numS32in and numS32out control how many HAL signed integers (+- integer
 range) pins are available.
\end_layout

\begin_layout Standard
For example (you don't need all of these to change just a few):
\end_layout

\begin_layout Quote
loadrt classicladder_rt numRungs=12 numBits=100 numWords=10 numTimers=10
 numMonostables=10 numCounters=10 numPhysInputs=10 numPhysOutputs=10 numArithmEx
pr=100 numSections=4 numSymbols=200 numS32in=5 numS32out=5
\end_layout

\begin_layout Standard
To load the default number of objects: 
\end_layout

\begin_layout Quote
loadrt classicladder_rt
\end_layout

\begin_layout Section
Loading the Classic Ladder user module
\end_layout

\begin_layout Standard
Classic Ladder hal commands must executed before the GUI loads or the menu
 item Ladder Editor will not function.
 If you used the Stepper Config Wizard place any Classic Ladder hal commands
 in the custom.hal file.
\end_layout

\begin_layout Standard
To load the user module:
\end_layout

\begin_layout Quote
loadusr classicladder
\end_layout

\begin_layout Standard
To load a ladder file:
\end_layout

\begin_layout Quote
loadusr classicladder myladder.clp
\end_layout

\begin_layout Standard
Classic Ladder Loading Options
\end_layout

\begin_layout Itemize

\family typewriter
--
\family default
nogui (loads with out the ladder editor) normally used after debugging is
 finished.
\end_layout

\begin_layout Itemize

\family typewriter
--
\family default
modbus_port=port (loads the modbus port number)
\end_layout

\begin_layout Itemize

\family typewriter
--
\family default
modmaster (initializes MODBUS master) should load the ladder program at
 the same time or the TCP is default port.
\end_layout

\begin_layout Itemize

\family typewriter
--
\family default
modslave (initializes MODBUS slave) only TCP
\end_layout

\begin_layout Standard
To use Classic Ladder with HAL without EMC.
 The -w tells HAL not to close down the HAL environment until Classic Ladder
 is finished.
\end_layout

\begin_layout Quote
loadusr -w classicladder
\end_layout

\begin_layout Standard
If you first load ladder program with the 
\family typewriter
--
\family default
nogui option then load Classic Ladder again with no options the GUI will
 display the last loaded ladder program.
\end_layout

\begin_layout Standard
In AXIS you can load the GUI from File/Ladder Editor...
\end_layout

\begin_layout Section
Classic Ladder GUI
\end_layout

\begin_layout Standard
If you load Classic Ladder with the GUI it will display two windows: section
 display, and section manager.
\end_layout

\begin_layout Subsection
Sections Manager
\end_layout

\begin_layout Standard
When you first start up Classic Ladder you get an empty Sections Manager
 window.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Sections Manager Default Window
\begin_inset LatexCommand label
name "cap:Sections-Manager-Default"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Default_Sections_Manager.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This window allows you to name, create or delete sections and choose what
 language that section uses.
 This is also how you name a subroutine for call coils.
\end_layout

\begin_layout Subsection
Section Display
\end_layout

\begin_layout Standard
When you first start up Classic Ladder you get an empty Section Display
 window.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Section Display Default Window
\begin_inset LatexCommand label
name "cap:Section-Display-Default"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Default_Section_Display.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most of the buttons are self explanatory:
\end_layout

\begin_layout Standard
The Vars button is for looking at variables, toggle it to display one, the
 other, both, then none of the windows.
\end_layout

\begin_layout Standard
The Config button is used for modbus and shows the max number of ladder
 elements that was loaded with the real time module.
\end_layout

\begin_layout Standard
The Symbols button will display an editable list of symbols for the variables
 (hint you can name the inputs, outputs, coils etc).
\end_layout

\begin_layout Standard
The Quit button will shut down the user program meaning Modbus and the display-
 the real time ladder program will still run in the back ground.
\end_layout

\begin_layout Standard
The check box at the top right allows you to select whether variable names
 or symbol names are displayed
\end_layout

\begin_layout Standard
You might notice that there is a line under the ladder program display that
 reads "Project failed to load..." That is the status bar that gives you info
 about elements of the ladder program that you click on in the display window.
 This status line will now display HAL signal names for variables %I, %Q
 and the first %W (in an equation) You might see some funny labels, such
 as (103) in the rungs.
 This is displayed (on purpose) because of an old bug- when erasing elements
 older versions sometimes didn't erase the object with the right code.
 You might have noticed that the long horizontal connection button sometimes
 didn't work in the older versions.
 This was because it looked for the 'free' code but found something else.
 The number in the brackets is the unrecognized code.
 The ladder program will still work properly, to fix it erase the codes
 with the editor and save the program.
 
\end_layout

\begin_layout Subsection
The Variable Windows
\end_layout

\begin_layout Standard
This are two variable windows: bool and signed integer.
 the vars button is in the section display window, toggle the Vars button
 to display one, the other, both, then none of the windows.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Bit Status Window
\begin_inset LatexCommand label
name "cap:Bit-Status-Window"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Bit_Status.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Bool window displays some of all the bool (on/off) variable data .
 Notice all variable start with the % sign.
 The %I variable represents HAL input bit pins.
 The %Q represents the relay coil and HAL output bit pins.
 The %B represents an internal relay coil or internal contact The three
 edit areas at the top allow you to select what 15 variable will be displayed
 in each column.
 For instance if there were 30 %B variable and you entered 5 at the top
 of the column, variable %B5 to %B19 would be displayed.
 The check boxes allow you to set and unset %B variables manually as long
 as the ladder program isn't setting them as outputs.
 Any Bits that are set as outputs by the program when Classic Ladder is
 running can not be changed and will be displayed as checked if on and unchecked
 if off.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Watch Window
\begin_inset LatexCommand label
name "cap:Watch-Window"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/watch_window.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Watch Window displays variable status.
 The edit box beside it is the number stored in the variable and the drop-down
 box beside that allow you to choose whether the number to be displayed
 in hex, decimal or binary.
 If there are symbol names defined in the symbols window for the word variables
 showing and the 'display symbols' checkbox is checked the the section display
 window, symbol names will be displayed.
 To change the variable displayed type the variable number eg.
 %W2 (if display symbols check box is not checked) or symbol name (if the
 display symbols checkbox is checked) over an existing variable number/name
 and press the Enter Key.
\end_layout

\begin_layout Subsection
Symbol Window
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Symbol Names window
\begin_inset LatexCommand label
name "cap:Symbol-Names-window"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Default_Symbols_names.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is a list of 'symbol' names to use instead of variable names to be
 displayed in the section window when the 'display symbols' check box is
 checked.
 You add the variable name (remember the '%' symbol and capital letters),
 symbol name .
 If the variable can have a HAL signal connected to it (%I, %Q, and %W-if
 you have loaded s32 pin with the real time module) then the comment section
 will show the current HAL signal name or lack there of.
 symbol names should be kept short to display better.
 keep in mind that you can display the longer HAL signal name of %I, %Q
 and %W variable by clicking on them in the section window.
 Between the two on should be able to keep track of what the ladder program
 is connected to!
\end_layout

\begin_layout Subsection
The Editor window
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Editor Window
\begin_inset LatexCommand label
name "cap:Editor-Window"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Editor.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Starting from the top left image:
\end_layout

\begin_layout Enumerate
Object Selector, Eraser
\end_layout

\begin_layout Enumerate
N.O.
 Input, N.C.
 Input, Rising Edge Input , Falling Edge Input
\end_layout

\begin_layout Enumerate
Horizontal Connection, Vertical Connection , Long Horizontal Connection
\end_layout

\begin_layout Enumerate
Timer IEC Block, Counter Block, Compare Variable
\end_layout

\begin_layout Enumerate
Old Timer Block, Old Monostable Block (These have been replaced by the IEC
 Timer)
\end_layout

\begin_layout Enumerate
COILS - N.O.
 Output, N.C.
 Output, Set Output, Reset Output
\end_layout

\begin_layout Enumerate
Jump Coil, Call Coil, Variable Assignment
\end_layout

\begin_layout Standard
A short description of each of the buttons:
\end_layout

\begin_layout Itemize
The SELECTOR ARROW button allows you to select existing objects and modify
 the information.
 
\end_layout

\begin_layout Itemize
The ERASER erases an object.
 
\end_layout

\begin_layout Itemize
The N.O.
 CONTACT is a normally open contact.
 It can be an external HAL-pin (%I) input contact, an internal-bit coil
 (%B) contact or a external coil (%Q) contact.
 The Hal-pin input contact is closed when the HAL-pin is true.
 The coil contacts are closed when the corresponding coil is active (%Q2
 contact closes when %Q2 coil is active).
 
\end_layout

\begin_layout Itemize
The N.C.
 CONTACT is a normally closed contact.
 It is the same as the n.o.
 contact except that the contact is open when the hal-pin is true or the
 coil is active.
\end_layout

\begin_layout Itemize
The RISING-EDGE CONTACT is a contact that is closed when the HAL-pin goes
 from False to true, or the coil from not-active to active.
 
\end_layout

\begin_layout Itemize
The FALLING-EDGE CONTACT is a contact that is closed when the HAL-pin goes
 from true to false or the coil from active to not.
 
\end_layout

\begin_layout Itemize
The HORIZONTAL CONNECTION connects the 'signal' to objects horizontally.
 
\end_layout

\begin_layout Itemize
The VERTICAL CONNECTION connects the 'signal' to objects vertically.
 
\end_layout

\begin_layout Itemize
The HORIZONTAL-RUNNING CONNECTION is a quick way to connect a long run of
 'signal wire' horizontally.
 
\end_layout

\begin_layout Itemize
The IEC TIMER replaces the TIMER and the MONSTABLE.
\end_layout

\begin_layout Itemize
The TIMER is a Timer Module.
 
\end_layout

\begin_layout Itemize
The MONOSTABLE is monostable module (one-shot) 
\end_layout

\begin_layout Itemize
The COUNTER is a counter module.
 
\end_layout

\begin_layout Itemize
The COMPARE button allows you to compare variable to values or other variables.
 (eg %W1<=5 or %W1=%W2) Compare cannot be placed in the right most side
 of the section display.
 
\end_layout

\begin_layout Itemize
The VARIABLE ASSIGNMENT button allows you to assign values to variables.
 (eg %W2=7 or %W1=%W2) ASSIGNMENT functions can only be placed at the right
 most side of the section display.
\end_layout

\begin_layout Subsection
Config Window
\end_layout

\begin_layout Standard
The config window shows the current project status and has the Modbus setup
 tabs.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Config Window
\begin_inset LatexCommand label
name "cap:Config-Window"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Config.png
	width 80page%
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Ladder objects
\end_layout

\begin_layout Subsection
CONTACTS
\end_layout

\begin_layout Standard
Represent switches or relay contacts.
 They are controlled by the variable letter and number assigned to them.
 
\end_layout

\begin_layout Standard
The variable letter can be B, I, or Q and the number can be up to a three
 digit number eg.
 %I2, %Q3, or %B123.
 Variable I is controlled by a Hal input pin with a corresponding number
 .
 Variable B is for internal contacts, controlled by a B coil with a correspondin
g number.
 Variable Q is controlled by a Q coil with a corresponding number.
 (like a relay with multiple contacts).
 Eg.
 if HAL pin classicladder.0.in-00 is true then %I0 N.O.
 contact would be on (closed, true, whatever you like to call it).
 If %B7 coil is 'energized' (on, true, etc) then %B7 N.O.
 contact would be on.
 If %Q1 coil is 'energized' then %Q1 N.O.
 contact would be on (and HAL pin classicladder.0.out-01 would be true.)
\end_layout

\begin_layout Itemize
N.O.
 CONTACT 
\begin_inset Graphics
	filename images/ladder_action_load.png

\end_inset

 (Normally Open) When the variable is false the switch is off.
\end_layout

\begin_layout Itemize
N.C.
 CONTACT 
\begin_inset Graphics
	filename images/ladder_action_loadbar.png

\end_inset

 (Normally Closed) When the variable is false the switch is on.
\end_layout

\begin_layout Itemize
RISING EDGE CONTACT - When the variable changes from false to true, the
 switch is PULSED on.
\end_layout

\begin_layout Itemize
FALLING EDGE CONTACT - When the variable changes from true to false, the
 switch is PULSED on.
\end_layout

\begin_layout Subsection
IEC TIMERS
\end_layout

\begin_layout Standard
Represent new count down timers! IEC Timers replace Timers and Monostables.
\end_layout

\begin_layout Standard
IEC Timers have 2 contacts.
 
\end_layout

\begin_layout Itemize
I = input 
\end_layout

\begin_layout Itemize
Q = output 
\end_layout

\begin_layout Standard
There are three modes - TON, TOF, TP.
\end_layout

\begin_layout Itemize
TON : When timer input is true countdown begins and continues as long as
 input remains true.
 After countdown is done and as long as timer input is still true the output
 will be true.
 
\end_layout

\begin_layout Itemize
TOF : When timer input is true, sets output true.
 When the input is false the timer counts down then sets output false.
\end_layout

\begin_layout Itemize
TP : When timer input is pulsed true or held true timer sets output true
 till timer counts down.
 (one-shot) 
\end_layout

\begin_layout Standard
The time intervals can be set in multiples of 100ms, seconds, or minutes.
\end_layout

\begin_layout Standard
There are also Variables for IEC timers that can be read and/or written
 to in compare or operate blocks.
 
\end_layout

\begin_layout Itemize
%TMxxx.Q timer done (Boolean, read write)
\end_layout

\begin_layout Itemize
%TMxxx.P timer preset (read write)
\end_layout

\begin_layout Itemize
%TMxxx.V timer value (read write)
\end_layout

\begin_layout Subsection
TIMERS
\end_layout

\begin_layout Standard
Represent count down timers.
 This is deprecated and replaced by IEC Timers.
\end_layout

\begin_layout Standard
Timers have 4 contacts.
 
\end_layout

\begin_layout Itemize
E = enable (input) - starts timer when true, resets when goes false
\end_layout

\begin_layout Itemize
C = control (input) - must be on for the timer to run (usually connect to
 E)
\end_layout

\begin_layout Itemize
D = done (output) - true when timer times out and as long as E remains true
\end_layout

\begin_layout Itemize
R = running (output) - true when timer is running
\end_layout

\begin_layout Standard
The timer base can be multiples of milliseconds, seconds, or minutes.
\end_layout

\begin_layout Standard
There are also Variables for timers that can be read and/or written to in
 compare or operate blocks.
 
\end_layout

\begin_layout Itemize
%Txx.R : Timer xx running (Boolean, read only) 
\end_layout

\begin_layout Itemize
%Txx.D : Timer xx done (Boolean, read only) 
\end_layout

\begin_layout Itemize
%Txx.V : Timer xx current value (integer, read only) 
\end_layout

\begin_layout Itemize
%Txx.P : Timer xx preset (integer, read or write)
\end_layout

\begin_layout Subsection
MONOSTABLES
\end_layout

\begin_layout Standard
Represent are one-shot timers.
 This is deprecated and replaced by IEC Timers.
 
\end_layout

\begin_layout Standard
Monostables have 2 contacts I and R.
 
\end_layout

\begin_layout Itemize
I (input) -input -will start the mono timer running.
 
\end_layout

\begin_layout Itemize
R (output) -running -will be true while timer is running.
\end_layout

\begin_layout Standard
The I contact is rising edge sensitive meaning it starts the timer only
 when changing from false to true (or off to on).
 While the timer is running the I contact can change with no effect to the
 running timer.
 R will be true and stay true till the timer finishes counting to zero.
 The timer base can be multiples of milliseconds, seconds, or minutes.
\end_layout

\begin_layout Standard
There are also Variables for monostables that can be read and/or written
 to in compare or operate blocks.
 
\end_layout

\begin_layout Itemize
%Mxx.R : Monostable xx running (Boolean, read only) 
\end_layout

\begin_layout Itemize
%Mxx.V : Monostable xx current value (integer, read only) 
\end_layout

\begin_layout Itemize
%Mxx.P : Monostable xx preset (integer, read or write)
\end_layout

\begin_layout Subsection
COUNTERS
\end_layout

\begin_layout Standard
- Represent up/down counters.
 
\end_layout

\begin_layout Standard
- There are 7 contacts: 
\end_layout

\begin_layout Itemize
R (input) -reset -will reset the count to 0.
\end_layout

\begin_layout Itemize
P (input) -preset -will set the count to the preset number assigned from
 the edit menu.
\end_layout

\begin_layout Itemize
U (input) -up count -will add one to the count.
 
\end_layout

\begin_layout Itemize
D (input) -down count -will subtract one from the count.
 
\end_layout

\begin_layout Itemize
E (output) -under flow -will be true when the count rolls over from 0 to
 9999.
\end_layout

\begin_layout Itemize
D (output) -done -will be true when the count equals the preset.
 
\end_layout

\begin_layout Itemize
F (output) -overflow -will be true when the count rolls over from 9999 to
 0.
 
\end_layout

\begin_layout Standard
The up and down count contacts are edge sensitive meaning they only count
 when the contact changes from false to true (or off to on if you rather).
\end_layout

\begin_layout Standard
The range is 0 to 9999.
 
\end_layout

\begin_layout Standard
There are also Variables for counters that can be read and/or written to
 in compare or operate blocks.
 
\end_layout

\begin_layout Itemize
%Cxx.D : Counter xx done (Boolean, read only) 
\end_layout

\begin_layout Itemize
%Cxx.E : Counter xx empty overflow (Boolean, read only) 
\end_layout

\begin_layout Itemize
%Cxx.F : Counter xx full overflow (Boolean, read only) 
\end_layout

\begin_layout Itemize
%Cxx.V : Counter xx current value (integer, read or write) 
\end_layout

\begin_layout Itemize
%Cxx.P : Counter xx preset (integer, read or write)
\end_layout

\begin_layout Subsection
COMPARE
\end_layout

\begin_layout Standard
For arithmetic comparison.
 Is variable %XXX = to this number (or evaluated number) 
\end_layout

\begin_layout Standard
The compare block will be true when comparison is true.
 you can use most math symbols:
\end_layout

\begin_layout Itemize
+, - ,* , /, = (standard math symbols)
\end_layout

\begin_layout Itemize
< (less than), > (greater than), <= (less or equal), >= (greater or equal),
 <> (not equal)
\end_layout

\begin_layout Itemize
(, ) grouping
\end_layout

\begin_layout Itemize
^ (exponent),% (modulus),& (and),| (or),.
 - 
\end_layout

\begin_layout Itemize
ABS (absolute), MOY (french for average) ,AVG (average)
\end_layout

\begin_layout Standard
For example ABS(%W2)=1, MOY(%W1,%W2)<3.
 
\end_layout

\begin_layout Standard
No spaces are allowed in the comparison equation.
 For example %C0.V>%C0.P is a valid comparison expression while %C0.V > %CO.P
 is not a valid expression.
\end_layout

\begin_layout Standard
There is a list of Variables down the page that can be used for reading
 writing to ladder objects.
 When a new compare block is opened be sure and delete the # symbol when
 you enter a compare.
 
\end_layout

\begin_layout Standard
To find out if word variable #1 is less than 2 times the current value of
 counter #0 the syntax would be:
\end_layout

\begin_layout Quote
%W1<2*%C0.V
\end_layout

\begin_layout Standard
To find out if S32in bit 2 is equal to 10 the syntax would be:
\end_layout

\begin_layout Quote
%IW2=10
\end_layout

\begin_layout Standard
Note: Compare uses the arithmetic equals not the double equals that programmers
 are use to.
\end_layout

\begin_layout Subsection
VARIABLE ASSIGNMENT
\end_layout

\begin_layout Standard
For variable assignment.
 eg assign this number (or evaluated number) to this variable %xxx there
 are two math functions MINI and MAXI that check a variable for maximum
 (0x80000000) and minimum values (0x07FFFFFFF) (think signed values) and
 keeps them from going beyond.
\end_layout

\begin_layout Standard
When a new variable assignment block is opened be sure and delete the #
 symbol when you enter an assignment.
 
\end_layout

\begin_layout Standard
To assign a value of 10 to the timer preset of IEC Timer 0 the syntax would
 be:
\end_layout

\begin_layout Quote
%TM0.P=10
\end_layout

\begin_layout Standard
To assign the value of 12 to S32out bit 3 the syntax would be:
\end_layout

\begin_layout Quote
%QW3=12
\end_layout

\begin_layout Standard
The following figure shows an Assignment and a Comparison Example.
 %QW0 is a S32out bit and %IW0 is a S32in bit.
 In this case the HAL pin classicladder.0.s32out-00 will be set to a value
 of 5 and when the HAL pin classicladder.0.s32in-00 is 0 the HAL pin classicladder.
0.out-00 will be set to True.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Assign/Compare Example
\begin_inset LatexCommand label
name "cap:Assign/Compare-Example"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/AssignCompare-Ladder.png
	scale 80

\end_inset


\newline

\begin_inset Graphics
	filename images/Assignment_Expression.png
	scale 80

\end_inset


\begin_inset Graphics
	filename images/Comparision_Expression.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
COILS
\end_layout

\begin_layout Standard
Coils represent relay coils.
 They are controlled by the variable letter and number assigned to them.
 
\end_layout

\begin_layout Standard
The variable letter can be B or Q and the number can be up to a three digit
 number eg.
 %Q3, or %B123.
 Q coils control HAL out pins.
 eg if &Q15 is energized then HAL pin classicladder.0.out-15 will be true.
 B coils are internal coils used to control program flow.
\end_layout

\begin_layout Itemize
N.O.
 COIL -(a relay coil.) When coil is energized it's N.O.
 contact will be closed (on, true, etc)
\end_layout

\begin_layout Itemize
N.C.
 COIL -(a relay coil that inverses its contacts.) When coil is energized
 it"s N.O.
 contact will be open (off, false, etc) 
\end_layout

\begin_layout Itemize
SET COIL -(a relay coil with latching contacts) When coil is energized it's
 N.O.
 contact will be latched closed.
 
\end_layout

\begin_layout Itemize
RESET COIL -(a relay coil with latching contacts) When coil is energized
 It's N.0.
 contact will be latched open.
 
\end_layout

\begin_layout Itemize
JUMP COIL -(a "goto" coil) when coil is energized ladder program jumps to
 a rung (in the CURRENT section) -jump points are designated by a rung label.
 (Add rung labels in the section display, top left label box) 
\end_layout

\begin_layout Itemize
CALL COIL -(a "gosub" coil) when coil is energized program jumps to a subroutine
 section designated by a subroutine number -subroutines are designated SR0
 to SR9 (designate them in the section manager)
\end_layout

\begin_layout Standard
***WARNING*** if you use a N.C.
 contact with a N.C.
 coil the logic will work (when the coil is energized the contact will be
 closed) but that is really hard to follow!
\end_layout

\begin_layout Subsubsection
JUMP COIL
\end_layout

\begin_layout Standard
A JUMP COIL is used to 'JUMP' to another section-like a goto in BASIC programmin
g language.
\end_layout

\begin_layout Standard
If you look at the top left of the sections display window you will see
 a small label box and a longer comment box beside it.
 Now go to Editor->Modify then go back to the little box, type in a name.
\end_layout

\begin_layout Standard
Go ahead and add a comment in the comment section.
 This label name is the name of this rung only and is used by the JUMP COIL
 to identify where to go.
\end_layout

\begin_layout Standard
When placing a JUMP COIL add it in the right most position and change the
 label to the rung you want to JUMP to.
\end_layout

\begin_layout Subsubsection
CALL COIL
\end_layout

\begin_layout Standard
A CALL COIL is used to go to a subroutine section then return-like a gosub
 in BASIC programming language.
\end_layout

\begin_layout Standard
If you go to the sections manager window hit the add section button.
 You can name this section, select what language it will use (ladder or
 sequential), and select what type (main or subroutine).
\end_layout

\begin_layout Standard
Select a subroutine number (SR0 for example).
 An empty section will be displayed and you can build your subroutine.
\end_layout

\begin_layout Standard
When your done that, go back to the section manager and click on the your
 main section (default name prog1).
\end_layout

\begin_layout Standard
Now you can add a CALL COIL to your program.
 CALL COILs are to be placed at the right most position in the rung.
\end_layout

\begin_layout Standard
Remember to change the label to the subroutine number you choose before.
\end_layout

\begin_layout Section
Classic Ladder Variables
\end_layout

\begin_layout Standard
These Variables are used in COMPARE or OPERATE to get information about,
 or change specs of, ladder objects Such as changing a counter preset, or
 seeing if the a timer is done running.
 
\end_layout

\begin_layout Standard
List of variables :
\end_layout

\begin_layout Itemize
%Bxxx : Bit memory xxx (Boolean) 
\end_layout

\begin_layout Itemize
%Wxxx : Word memory xxx (32 bits signed integer) 
\end_layout

\begin_layout Itemize
%IWxxx : Word memory xxx (S32 in pin)
\end_layout

\begin_layout Itemize
%QWxxx : Word memory xxx (S32 out pin)
\end_layout

\begin_layout Itemize
%IFxx : Word memory xx (Float in pin) (converted to S32 in Classic Ladder)
\end_layout

\begin_layout Itemize
%QFxx : Word memory xx (Float out pin) (converted to S32 in Classic Ladder)
\end_layout

\begin_layout Itemize
%Txx.R : Timer xx running (Boolean, user read only) 
\end_layout

\begin_layout Itemize
%Txx.D : Timer xx done (Boolean, user read only) 
\end_layout

\begin_layout Itemize
%Txx.V : Timer xx current value (integer, user read only) 
\end_layout

\begin_layout Itemize
%Txx.P : Timer xx preset (integer) 
\end_layout

\begin_layout Itemize
%TMxxx.Q : Timer xxx done (Boolean, read write)
\end_layout

\begin_layout Itemize
%TMxxx.P : Timer xxx preset (integer, read write)
\end_layout

\begin_layout Itemize
%TMxxx.V : Timer xxx value (integer, read write)
\end_layout

\begin_layout Itemize
%Mxx.R : Monostable xx running (Boolean) 
\end_layout

\begin_layout Itemize
%Mxx.V : Monostable xx current value (integer, user read only) 
\end_layout

\begin_layout Itemize
%Mxx.P : Monostable xx preset (integer) 
\end_layout

\begin_layout Itemize
%Cxx.D : Counter xx done (Boolean, user read only) 
\end_layout

\begin_layout Itemize
%Cxx.E : Counter xx empty overflow (Boolean, user read only) 
\end_layout

\begin_layout Itemize
%Cxx.F : Counter xx full overflow (Boolean, user read only) 
\end_layout

\begin_layout Itemize
%Cxx.V : Counter xx current value (integer) 
\end_layout

\begin_layout Itemize
%Cxx.P : Counter xx preset (integer) 
\end_layout

\begin_layout Itemize
%Ixxx : Physical input xxx (Boolean) - HAL input bit - 
\end_layout

\begin_layout Itemize
%Qxxx : Physical output xxx (Boolean) - HAL output bit - 
\end_layout

\begin_layout Itemize
%Xxxx : Activity of step xxx (sequential language) 
\end_layout

\begin_layout Itemize
%Xxxx.V : Time of activity in seconds of step xxx (sequential language)
\end_layout

\begin_layout Itemize
%Exx : Errors (Boolean, read write(will be overwritten))
\end_layout

\begin_layout Itemize
Indexed or vectored variables These are variables indexed by another variable.
 Some might call this vectored variables.
 Example: %W0[%W4] => if %W4 equals 23 it corresponds to %W23 
\end_layout

\begin_layout Section
GRAFCET Programming
\end_layout

\begin_layout Standard
* WARNING -These is probably the least used/known about feature of Classic
 Ladder.
 Sequential programming is used to make sure a series of ladder events always
 happen in a prescribed order.
 Sequential programs do not work alone-there is always a ladder program
 as well that controls the variables.
 Here are the basic rules governing sequential programs:
\end_layout

\begin_layout Itemize
Rule 1 : Initial situation - The initial situation is characterized by the
 initial steps which are by definition in the active state at the beginning
 of the operation.There shall be at least one initial step.
 
\end_layout

\begin_layout Itemize
Rule 2 : R2, Clearing of a transition - A transition is either enabled or
 disabled.
 It is said to be enabled when all immediately preceding steps linked to
 its corresponding transition symbol are active, otherwise it is disabled.
 A transition cannot be cleared unless: it is enabled, and its associated
 transition condition is true.
 
\end_layout

\begin_layout Itemize
Rule 3 : R3, Evolution of active steps - The clearing of a transition simultaneo
usly leads to the active state of the immediately following step(s) and
 to the inactive state of the immediately preceding step(s).
 
\end_layout

\begin_layout Itemize
Rule 4 : R4, Simultaneous clearing of transitions - All simultaneous cleared
 transitions are simultaneously cleared.
 
\end_layout

\begin_layout Itemize
Rule 5 : R5, Simultaneous activation and deactivation of a step - If during
 operation, a step is simultaneously activated and deactivated, priority
 is given to the activation.
\end_layout

\begin_layout Standard
This is the SEQUENTIAL editor window Starting from the top left image: Selector
 arrow , Eraser Ordinary step , Initial (Starting) step Transition , Step
 and Transition Transition Link-Downside , Transition Link-Upside Pass-through
 Link-Downside , Pass-through Link-Upside Jump Link Comment Box [show sequential
 program]
\end_layout

\begin_layout Itemize
ORDINARY STEP-has a unique number for each one 
\end_layout

\begin_layout Itemize
STARTING STEP-a sequential program must have one.
 This is where the program will start.
\end_layout

\begin_layout Itemize
TRANSITION-This shows the variable that must be true for control to pass
 through to the next step.
\end_layout

\begin_layout Itemize
STEP AND TRANSITION -Combined for convenience
\end_layout

\begin_layout Itemize
TRANSITION LINK-DOWNSIDE-splits the logic flow to one of two possible lines
 based on which of the next steps is true first (Think OR logic) 
\end_layout

\begin_layout Itemize
TRANSITION LINK=UPSIDE-combines two (OR) logic lines back in to one 
\end_layout

\begin_layout Itemize
PASS-THROUGH LINK-DOWNSIDE-splits the logic flow to two lines that BOTH
 must be true to continue (Think AND logic) 
\end_layout

\begin_layout Itemize
PASS-THROUGH LINK-UPSIDE-combines two concurrent (AND logic) logic lines
 back together
\end_layout

\begin_layout Itemize
JUMP LINK-connects steps that are not underneath each other such as connecting
 the last step to the first 
\end_layout

\begin_layout Itemize
COMMENT BOX used to add comments
\end_layout

\begin_layout Standard
To use links you must have steps already placed , select the type of link
 , then select the two steps or transactions one at a time- It takes practice!
\end_layout

\begin_layout Standard
With sequential programming: The variable %Xxxx (eg.
 %X5) is used to see if a step is active.
 The variable %Xxxx.V (eg.
 %X5.V) is used to see how long the step has been active.
 The %X and %X.v variables are use in LADDER logic.
 The variables assigned to the transitions (eg.
 %B) control whether the logic will pass to the next step.
 After a step has become active the transition variable that caused it to
 become active has no control of it anymore.
 The last step has to JUMP LINK back (only to the beginning step?)
\end_layout

\begin_layout Section
Modbus
\end_layout

\begin_layout Standard
Things to consider: 
\end_layout

\begin_layout Itemize
Modbus is a userspace program so it might have latency issues on a heavily
 laden computer.
\end_layout

\begin_layout Itemize
Modbus is not really suited to Hard real time events such as position control
 of motors or to control E-stop.
 
\end_layout

\begin_layout Itemize
The Classic Ladder GUI must be running for Modbus to be running.
\end_layout

\begin_layout Itemize
Modbus is not fully finished so it does not do all modbus functions.
\end_layout

\begin_layout Standard
To get MODBUS to initialize you must specify that when loading the Classic
 Ladder userspace program eg.
 loadusr -w classicladder -\SpecialChar \-
-modmaster myprogram.clp (assuming myprogram.clp
 is present -w makes HAL wait till you close Classic Ladder before closing
 realtime session) my idea behind this is to get a working modbus solution
 out there then we can decide how it should be done in the best way.
 As it stands now Classic Ladder also loads a TCP modbus slave (if you add
 -\SpecialChar \-
-modserver on command line) - I have not tested this nor have I tested
 the TCP modbus master.
 I have done some testing with the serial port and had to add some functions
 to get it to talk to my VFD -but it does work.
 Modbus function 1,2,3,4,5,6,8,15,16 (read coils,read inputs, read holding
 registers, read input registers, write single coils, write single register,
 echo test, write multiple coils, write multiply registers) are currently
 available.
 If you do not specify a -\SpecialChar \-
-modmaster when loading the Classic Ladder user
 program this (next) page will not be displayed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Config I/O
\begin_inset LatexCommand label
name "cap:Config-I/O"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Config-io.png
	width 80page%
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Config Coms
\begin_inset LatexCommand label
name "cap:Config-Coms"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Config-com.png
	width 80page%
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description
SERIAL\InsetSpace ~
PORT - For IP blank.
 For serial the location/name of serial driver eg.
 /dev/ttyS0 ( or /dev/ttyUSB0 for a USB to serial converter )
\end_layout

\begin_layout Description
SERIAL\InsetSpace ~
SPEED - Should be set to speed the slave is set for - 300, 600, 1200,
 2400, 4800, 9600, 19200, 38400, 57600, 115200 are supported.
\end_layout

\begin_layout Description
PAUSE\InsetSpace ~
AFTER\InsetSpace ~
TRANSMIT - Pause (milliseconds) after transmit and before receiving
 answer -some devices need more time (eg usb-serial converters)
\end_layout

\begin_layout Description
PAUSE\InsetSpace ~
INTER-FRAME - Pause (milliseconds) after receiving answer from slave-
 this sets the duty cycle of requests (it's a pause for EACH request) 
\end_layout

\begin_layout Description
REQUEST\InsetSpace ~
TIMEOUT\InsetSpace ~
LENGTH - Length (milliseconds) of time before we decide that
 the slave didn't answer.
\end_layout

\begin_layout Description
MODBUS\InsetSpace ~
ELEMENT\InsetSpace ~
OFFSET - used to offset the element numbers by 1 (for manufacturers
 numbering differences)
\end_layout

\begin_layout Description
DEBUG\InsetSpace ~
LEVEL - Set this to 0-3 (0 to stop printing debug info besides no-response
 errors).
\end_layout

\begin_layout Description
READ\InsetSpace ~
COILS/INPUTS\InsetSpace ~
MAP\InsetSpace ~
TO - Select what variables that read coils/inputs will
 update.
 (B or Q)
\end_layout

\begin_layout Description
WRITE\InsetSpace ~
COILS\InsetSpace ~
MAP\InsetSpace ~
TO - Select what variables that write coils will updated.from
 (B,Q,or I)
\end_layout

\begin_layout Description
READ\InsetSpace ~
REGISTERS/HOLDING - Select what variables that read registers will update.
 (W or QW)
\end_layout

\begin_layout Description
WRITE\InsetSpace ~
REGISTERS\InsetSpace ~
MAP\InsetSpace ~
TO - Select what variables that read registers will updated
 from.
 (W, QW, or IW)
\end_layout

\begin_layout Description
SLAVE\InsetSpace ~
ADDRESS - For serial the slaves ID number usually settable on the slave
 device (usually 1-256) For IP the slave IP address plus optionally the
 port number.
\end_layout

\begin_layout Description
TYPE\InsetSpace ~
ACCESS - This selects the MODBUS function code to send to the slave
 (eg what type of request)
\end_layout

\begin_layout Description
Coils/inputs are read/written to I, B, or Q variables (user selects)
\end_layout

\begin_layout Description
registers and holding registers map to W, IW, or QW variables (usr selects)
\end_layout

\begin_layout Description
1st\InsetSpace ~
MODBUS\InsetSpace ~
ELEMENT - The address (or register number) of the first element
 in a group.
 (remember to set MODBUS ELEMENT OFFSET properly)
\end_layout

\begin_layout Description
NUMBER\InsetSpace ~
OF\InsetSpace ~
ELEMENTS - The number of elements in this group
\end_layout

\begin_layout Description
LOGIC - You can invert the logic here
\end_layout

\begin_layout Description
1st%I%Q\InsetSpace ~
IQ\InsetSpace ~
WQ\InsetSpace ~
MAPPED - This is the starting number of %B, %I, %Q, %W, %IW,
 or %QW variables that are mapped onto/from the modbus element group (starting
 at the first modbus element number).
\end_layout

\begin_layout Standard
In the example above: Port number- for my computer /dev/ttyS0 was my serial
 port
\end_layout

\begin_layout Standard
The serial speed is set to 9600 baud.
\end_layout

\begin_layout Standard
Slave address is set to 12 ( on my VFD I can set this from 1-31, meaning
 I can talk to 31 VFDs maximum on one system)
\end_layout

\begin_layout Standard
The first line is set up for 8 input bits starting at the first register
 number (register 1) so register numbers 1-8 and maps them on to Classic
 Ladder's %B variables starting at %B1 ending at %B8.
\end_layout

\begin_layout Standard
The second line is set for 2 output bits starting at the ninth register
 number (register 9) so register numbers 9-10 and maps them on to Classic
 Ladder's %Q variables starting at %Q9 ending at %Q10.
\end_layout

\begin_layout Standard
The third line is set to write 2 registers (16 bit each) starting at the
 0th register number (register 0) so register numbers 0-1 and maps them
 on to Classic Ladder's %W variables starting at %W0 ending at %W1
\end_layout

\begin_layout Standard
It's easy to make an off-by-one error as sometimes the modbus elements are
 referenced starting at one rather then 0 (actually by the standard that
 is the way it's supposed to be!) You can use the modbus element offset
 radio button to help with this.
\end_layout

\begin_layout Standard
The documents for your modbus slave device will tell you how the registers
 are set up- there is no standard way.
\end_layout

\begin_layout Standard
The SERIAL PORT, PORT SPEED, PAUSE, and DEBUG level are editable for changes
 (when you close the config window values are applied though Radio buttons
 apply immediately)
\end_layout

\begin_layout Standard
To use the echo function select the echo function and add the slave number
 you wish to test.
 You don't need to specify any variables.
\end_layout

\begin_layout Standard
The number 257 will be sent to the slave number you specified and the slave
 should send it back.
 you will need to have Classic Ladder running in a terminal to see the message.
\end_layout

\begin_layout Subsection
MODBUS Settings 
\end_layout

\begin_layout Standard
Serial:
\end_layout

\begin_layout Itemize
Classic Ladder uses RTU protocol (not ASCII)
\end_layout

\begin_layout Itemize
8 data bits, No parity is used, and 1 stop bit is also known as 8-N-1
\end_layout

\begin_layout Itemize
Baud rate must be the same for slave and master.
 Classic Ladder can only have one baud rate so all the slaves must be set
 to the same rate.
\end_layout

\begin_layout Itemize
Pause inter frame is the time to pause after receiving an answer.
\end_layout

\begin_layout Itemize
MODBUS_TIME_AFTER_TRANSMIT is the length of pause after sending a request
 and before receiving an answer (this apparently helps with USB converters
 which are slow)
\end_layout

\begin_layout Subsection
MODBUS Info
\end_layout

\begin_layout Itemize
Classic Ladder can use distributed inputs/outputs on modules using the modbus
 protocol ("master": polling slaves).
\end_layout

\begin_layout Itemize
The slaves and theirs I/O can be configured in the config window.
\end_layout

\begin_layout Itemize
2 exclusive modes are available : ethernet using Modbus/TCP and serial using
 Modbus/RTU.
\end_layout

\begin_layout Itemize
No parity is used.
\end_layout

\begin_layout Itemize
If no port name for serial is set, TCP/IP mode will be used...
\end_layout

\begin_layout Itemize
The slave address is the slave address (Modbus/RTU) or the IP address.
\end_layout

\begin_layout Itemize
The IP address can be followed per the port number to use (xx.xx.xx.xx:pppp)
 else the port 9502 will be used per default.
\end_layout

\begin_layout Itemize
2 products have been used for tests: a Modbus/TCP one (Adam-6051, http://www.adva
ntech.com) and a serial Modbus/RTU one (http://www.ipac.ws)
\end_layout

\begin_layout Itemize
See examples: adam-6051 and modbus_rtu_serial.
\end_layout

\begin_layout Itemize
Web links: http://www.modbus.org and this interesting one: http://www.iatips.com/mod
bus.html
\end_layout

\begin_layout Itemize
MODBUS TCP SERVER INCLUDED
\end_layout

\begin_layout Itemize
Classic Ladder has a Modbus/TCP server integrated.
 Default port is 9502.
 (the previous standard 502 requires that the application must be launched
 with root privileges).
\end_layout

\begin_layout Itemize
List of Modbus functions code supported are: 1, 2, 3, 4, 5, 6, 15 and 16.
\end_layout

\begin_layout Itemize
Modbus bits and words correspondence table is actually not parametric and
 correspond directly to the %B and %W variables.
\end_layout

\begin_layout Standard
Info on modbus protocol are available here:
\end_layout

\begin_layout Standard
\begin_inset LatexCommand url
target "http://www.modbus.org/"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand url
target "http://www.sourceforge.net/projects/jamod"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset LatexCommand url
target "http://www.modicon.com/techpubs/toc7.html"

\end_inset


\end_layout

\begin_layout Subsection
Communication Errors
\end_layout

\begin_layout Standard
If there is a communication error, a warning window will pop up (if the
 GUI is running) and %E0 will be true.
 Modbus will continue to try and communicate.
 The %E0 could be used to make a decision based on the error.
 A timer could be used to stop the machine if timed out etc.
\end_layout

\begin_layout Subsection
MODBUS Bugs
\end_layout

\begin_layout Itemize
In compare blocks the function %W=ABS(%W1-%W2) is accepted but does not
 compute properly.
 only %W0=ABS(%W1) is currently legal
\end_layout

\begin_layout Itemize
When loading a ladder program it will load Modbus info but will not tell
 Classic Ladder to initialize Modbus.
 You must initialize Modbus when you first load the GUI by adding 
\family typewriter
--
\family default
modmaster
\end_layout

\begin_layout Itemize
If the section manager is placed on top of the section display, across the
 scroll bar and exit is clicked the user program crashes.
\end_layout

\begin_layout Itemize
When using 
\family typewriter
--
\family default
modmaster you must load the ladder program at the same time or else only
 TCP will work.
\end_layout

\begin_layout Itemize
reading/writing multiply registers in Modbus has checksum errors
\end_layout

\begin_layout Section
Setting up Classic Ladder
\end_layout

\begin_layout Standard
In this section we will cover the steps needed to add Classic Ladder to
 a Stepconf Wizard generated config.
 On the advanced Configuration Options page of Stepconf Wizard check off
 "Include Classic Ladder PLC" 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Stepconf Classic Ladder
\begin_inset LatexCommand label
name "cap:Stepconf-Classicladder"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/stepconf_ladder.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Add the Modules
\end_layout

\begin_layout Standard
If you used the Stepconf Wizard to add Classic Ladder you can skip this
 step.
 
\end_layout

\begin_layout Standard
To manually add Classic Ladder you must first add the modules.
 This is done by adding a couple of lines to the custom.hal file.
 
\end_layout

\begin_layout Standard
This line loads the real time module:
\end_layout

\begin_layout Quote
loadrt classicladder_rt
\end_layout

\begin_layout Standard
This line adds the Classic Ladder function to the servo thread:
\end_layout

\begin_layout Quote
addf classicladder.0.refresh servo-thread
\end_layout

\begin_layout Subsection
Adding Ladder Logic
\end_layout

\begin_layout Standard
Now start up your config and select File/Ladder Editor...
 to open up the Classic Ladder GUI.
 You should see a blank Section Display and Sections Manager window as shown
 above.
 In the Section Display window open the Editor.
 In the Editor window select Modify.
 Now a Properties window pops up and the Section Display shows a grid.
 The grid is one rung of ladder.
 The rung can contain branches.
 A simple rung has one input, a connector line and one output.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Section Display with Grid
\begin_inset LatexCommand label
name "cap:Section-Display-with"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Section_Display_Grid.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now click on the N.O.
 Input in the Editor Window.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Editor Window
\begin_inset LatexCommand label
name "cap:Editor-Window"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Editor_N.O.Input.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now click in the upper left grid to place the N.O.
 Input into the ladder.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Section Display with Input
\begin_inset LatexCommand label
name "cap:Section-Display-with"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Section_Display_Build01.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Repeat the above steps to add a N.O.
 Output to the upper right grid and use the Horizontal Connection to connect
 the two.
 It should look like the following.
 If not use the Eraser to remove unwanted sections.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Section Display with Rung
\begin_inset LatexCommand label
name "cap:Section-Display-with"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Section_Display_Build02.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Now click on the OK button in the Editor window.
 Now your Section Display should look like this.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Section Display Finished
\begin_inset LatexCommand label
name "cap:Section-Display-Finished"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/Section_Display_Build03.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To save the new file select Save As and give it a name.
 The .clp extension will be added automatically.
 It should default to the running config directory as the place to save
 it.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Save As Dialog
\begin_inset LatexCommand label
name "cap:Save-As-Dialog"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/SaveAs.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Again if you used the Stepconf Wizard to add Classic Ladder you can skip
 this step.
\end_layout

\begin_layout Standard
To manually add a ladder you need to add add a line to your custom.hal file
 that will load your ladder file.
 Close your EMC2 session and add this line to your custom.hal file.
\end_layout

\begin_layout Quote
loadusr -w classicladder -\SpecialChar \-
-nogui MyLadder.clp
\end_layout

\begin_layout Standard
Now if you start up your EMC2 config your ladder program will be running
 as well.
 If you select File/Ladder Editor...
 the program you created will show up in the Section Display window.
\end_layout

\end_body
\end_document
