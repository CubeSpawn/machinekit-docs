.PHONY: docs docsclean checkref checkref_en checkref_fr
.PHONY: pdfdocs htmldocs install-doc install-doc-pdf install-doc-html

DOC_DIR=../docs
DOC_SRCDIR=../docs/src

MAN_SRCS := $(sort \
	$(patsubst %.in,%,$(wildcard $(DOC_DIR)/man/man1/*.1  $(DOC_DIR)/man/man1/*.1.in)) \
	$(filter-out $(DOC_DIR)/man/man3/skeleton%, $(wildcard $(DOC_DIR)/man/man3/*.3rtapi $(DOC_DIR)/man/man3/*.3hal)) \
	$(filter-out $(DOC_DIR)/man/man9/skeleton%, $(wildcard $(DOC_DIR)/man/man9/*.9)) \
	$(COMP_MANPAGES) $(COMP_DRIVER_MANPAGES))

ifneq ($(MANDB),)
default: $(DOC_DIR)/man/index.db
$(DOC_DIR)/man/index.db: $(MAN_SRCS)
	@echo "Updating 'whatis' database"
	@$(MANDB) $(DOC_DIR)/man
endif

ifeq ($(BUILD_DOCS),yes)
DOC_SRCS := \
	code/Code_Notes.txt \
	code/Style_Guide.txt \
	code/NML_Messages.txt \
	common/Document_Header.txt \
	common/Document_Header_fr.txt \
	common/Getting_EMC.txt \
	common/Getting_EMC_fr.txt \
	common/Glossary.txt \
	common/Glossary_fr.txt \
	common/GPLD_Copyright.txt \
	common/Integrator_Concepts.txt \
	common/Integrator_Concepts_fr.txt \
	common/Linux_FAQ.txt \
	common/Linux_FAQ_fr.txt \
	common/machining_center.txt \
	common/machining_center_fr.txt \
	common/outdated-notice_fr.txt \
	common/overleaf.txt \
	common/Stepper_Diagnostics.txt \
	common/Stepper_Diagnostics_fr.txt \
	common/System_Requirements.txt \
	common/System_Requirements_fr.txt \
	common/Updating_EMC.txt \
	common/Updating_EMC_fr.txt \
	common/User_Concepts.txt \
	common/User_Concepts_fr.txt \
	common/userforeword.txt \
	common/userforeword_fr.txt \
	common/user_intro.txt \
	common/user_intro_fr.txt \
	config/copy_and_run.txt \
	config/copy_and_run_fr.txt \
	config/emc2hal.txt \
	config/emc2hal_fr.txt \
	config/ini_config.txt \
	config/ini_config_fr.txt \
	config/ini_homing.txt \
	config/ini_homing_fr.txt \
	config/lathe_config.txt \
	config/lathe_config_fr.txt \
	config/pncconf.txt \
	config/pncconf_fr.txt \
	config/stepconf.txt \
	config/stepconf_fr.txt \
	config/stepper.txt \
	config/stepper_fr.txt \
	drivers/AX5214H.txt \
	drivers/AX5214H_fr.txt \
	drivers/GS2.txt \
	drivers/GS2_fr.txt \
	drivers/hostmot2.txt \
	drivers/hostmot2_fr.txt \
	drivers/m5i20.txt \
	drivers/m5i20_fr.txt \
	drivers/motenc.txt \
	drivers/motenc_fr.txt \
	drivers/opto22.txt \
	drivers/opto22_fr.txt \
	drivers/pico_ppmc.txt \
	drivers/pico_ppmc_fr.txt \
	drivers/pluto_p.txt \
	drivers/pluto_p_fr.txt \
	drivers/servo_to_go.txt \
	drivers/servo_to_go_fr.txt \
	examples/gcode.txt \
	examples/gcode_fr.txt \
	examples/gs2_example.txt \
	examples/gs2_example_fr.txt \
	examples/misc.txt \
	examples/misc_fr.txt \
	examples/mpg.txt \
	examples/mpg_fr.txt \
	examples/pci_parallel_port.txt \
	examples/pci_parallel_port_fr.txt \
	examples/spindle.txt \
	examples/spindle_fr.txt \
	gcode/coordinates.txt \
	gcode/coordinates_fr.txt \
	gcode/main.txt \
	gcode/main_fr.txt \
	gcode/mill_canned.txt \
	gcode/mill_canned_fr.txt \
	gcode/overview.txt \
	gcode/overview_fr.txt \
	gcode/rs274ngc.txt \
	gcode/rs274ngc_fr.txt \
	gcode/tool_compensation.txt \
	gcode/tool_compensation_fr.txt \
	gui/axis.txt \
	gui/axis_fr.txt \
	gui/gladevcp.txt \
	gui/gladevcp_fr.txt \
	gui/halui.txt \
	gui/halui_fr.txt \
	gui/image-to-gcode.txt \
	gui/image-to-gcode_fr.txt \
	gui/keystick.txt \
	gui/keystick_fr.txt \
	gui/mini.txt \
	gui/mini_fr.txt \
	gui/tkemc.txt \
	gui/tkemc_fr.txt \
	gui/touchy.txt \
	gui/touchy_fr.txt \
	hal/basic_hal.txt \
	hal/basic_hal_fr.txt \
	hal/comp.txt \
	hal/comp_fr.txt \
	hal/components.txt \
	hal/components_fr.txt \
	hal/drivers_fr.txt \
	hal/general_ref.txt \
	hal/general_ref_fr.txt \
	hal/hal-examples.txt \
	hal/hal-examples_fr.txt \
	hal/halmodule.txt \
	hal/halmodule_fr.txt \
	hal/halshow.txt \
	hal/halshow_fr.txt \
	hal/halui_examples.txt \
	hal/halui_examples_fr.txt \
	hal/intro.txt \
	hal/intro_fr.txt \
	hal/parallel_port.txt \
	hal/parallel_port_fr.txt \
	hal/pyvcp.txt \
	hal/pyvcp_fr.txt \
	hal/pyvcp_examples.txt \
	hal/pyvcp_examples_fr.txt \
	hal/rtcomps.txt \
	hal/rtcomps_fr.txt \
	hal/tools.txt \
	hal/tools_fr.txt \
	hal/tutorial.txt \
	hal/tutorial_fr.txt \
	install/Latency_Test.txt \
	install/Latency_Test_fr.txt \
	ladder/classic_ladder.txt \
	ladder/classic_ladder_fr.txt \
	ladder/ladder_examples.txt \
	ladder/ladder_examples_fr.txt \
	ladder/ladder_intro.txt \
	ladder/ladder_intro_fr.txt \
	lathe/lathe-user.txt \
	lathe/lathe-user_fr.txt \
	motion/kinematics.txt \
	motion/kinematics_fr.txt \
	motion/pid_theory.txt \
	motion/pid_theory_fr.txt \
	motion/tweaking_steppers.txt \
	motion/tweaking_steppers_fr.txt \
	quickstart/stepper_quickstart.txt \
	quickstart/stepper_quickstart_fr.txt \
	Getting_Started.txt \
	Getting_Started_fr.txt \
	Master_User.txt \
	Master_User_fr.txt \
	Master_HAL.txt \
	Master_HAL_fr.txt \
	Master_Integrator.txt \
	Master_Integrator_fr.txt \
	Master_Developer.txt \


# DOC_SRCS_TXT := $(patsubst %.lyx, %.txt, $(DOC_SRCS))
DOC_SRCS_TXT := $(patsubst %.txt, %.txt, $(DOC_SRCS))

DOC_SRCS_FR := $(filter %_fr.txt, $(DOC_SRCS_TXT))
DOC_SRCS_EN := $(filter-out $(DOC_SRCS_FR), $(DOC_SRCS_TXT))

DOC_SRCS_FR_SMALL := $(filter-out Master_%,$(DOC_SRCS_FR))
DOC_SRCS_EN_SMALL := $(filter-out Master_%,$(DOC_SRCS_EN))

# DOC_SRCS_HTML := $(patsubst %.lyx, %.html, $(filter-out Master_%, $(DOC_SRCS)))
DOC_SRCS_HTML := $(patsubst %.txt, %.html, $(filter-out Master_%, $(DOC_SRCS)))
DOC_TARGETS_HTML := $(addprefix $(DOC_DIR)/html/,$(DOC_SRCS_HTML)) #$(subst /,_,$(DOC_SRCS_HTML)))
DOC_TARGETS_XML := $(patsubst $(DOC_DIR)/html/%.html, objects/%.xml, $(DOC_TARGETS_HTML))

MAN_HTML_TARGETS := $(patsubst $(DOC_DIR)/man/%, $(DOC_DIR)/html/man/%.html, $(MAN_SRCS))
PDF_TARGETS := $(addprefix $(DOC_DIR)/, \
	EMC2_Getting_Started.pdf \
	EMC2_Getting_Started_fr.pdf \
	EMC2_User_Manual.pdf \
	EMC2_User_Manual_fr.pdf \
	EMC2_HAL_Manual.pdf \
	EMC2_HAL_Manual_fr.pdf \
	EMC2_Integrator_Manual.pdf \
	EMC2_Integrator_Manual_fr.pdf \
	EMC2_Developer_Manual.pdf \
	)
# The following was removed from the above for now
#	EMC2_Manual_Pages.pdf \
# 
# It's better to keep the above on separate lines for troubleshooting by swapping
# (Don't ask me how I know this.)

HTML_TARGETS := $(DOC_TARGETS_HTML) $(MAN_HTML_TARGETS) $(DOC_DIR)/html/index.html $(DOC_DIR)/html/index_fr.html #$(DOC_DIR)/html/xref.html #$(DOC_DIR)/html/xref_fr.html

L2HFLAGS := -init_file src/.latex2html-init -local_icons \
	-unsegment -link 4 -info 0 -split +0 -html_version 4.0,math,table

A2X = $(DOC_SRCDIR)/a2x --xsltproc-opts "--stringparam toc.section.depth 3 \
			   --stringparam toc.max.depth 2 \
			   --stringparam generate.section.toc.level 2 \
			   --stringparam generate.toc 'book toc,title chapter toc'" \
	  -a "scriptdir=$(DOC_SRCDIR)/" \
	  --asciidoc-opts "-f $(DOC_SRCDIR)/docbook.conf" \
	  --dblatex-opts "-P doc.publisher.show=0 -P latex.output.revhistory=0 -s $(DOC_SRCDIR)/emc2.sty"

ifeq ($(TRIVIAL_BUILD),no)
-include $(patsubst %.txt, depends/%.d, $(DOC_SRCS_TXT))
Makefile: $(patsubst %.txt, depends/%.d, $(DOC_SRCS_TXT))
endif

ifeq ($(BUILD_DOCS_PDF),yes)
docs: pdfdocs
install-doc: install-doc-pdf
endif
ifeq ($(BUILD_DOCS_HTML),yes)
docs: htmldocs
install-doc: install-doc-html
endif
pdfdocs: $(PDF_TARGETS)
htmldocs: $(HTML_TARGETS) $(MAN_HTML_TARGETS) checkref

checkref: checkref_en checkref_fr

checkref_en: $(DOC_DIR)/html/gcode.html $(DOC_DIR)/html/gcode/main.html
	python $(DOC_SRCDIR)/checklinks.py $^

checkref_fr: $(DOC_DIR)/html/gcode_fr.html $(DOC_DIR)/html/gcode/main_fr.html
	-python $(DOC_SRCDIR)/checklinks.py $^

MAN_SRCS_NOSO := $(patsubst $(DOC_DIR)/man/%,%, \
			$(shell grep -L '^\.so ' $(sort $(MAN_SRCS))))
PDF_MAN_ORDER := man1/emc.1 \
	$(filter-out %/emc.1, \
			$(filter man1/%, $(MAN_SRCS_NOSO))) \
	man3/intro.3hal \
	$(filter-out %/undocumented.3hal %/intro.3hal, \
			$(filter man3/%.3hal, $(MAN_SRCS_NOSO))) \
	man3/undocumented.3hal \
	man3/intro.3rtapi \
	$(filter-out %/undocumented.3rtapi %/intro.3rtapi, \
			$(filter man3/%.3rtapi, $(MAN_SRCS_NOSO))) \
	man3/undocumented.3rtapi \
	$(filter man9/%, $(MAN_SRCS_NOSO)) \

$(DOC_DIR)/EMC2_Manual_Pages.pdf: $(MAN_SRCS) objects/var-PDF_MAN_ORDER
	@echo Formatting manual pages as PDF
	(cd $(DOC_DIR)/man; groff -t -rC1 -rD1 -Tps -man $(PDF_MAN_ORDER)) \
		| ps2pdf - $@
		
$(DOC_DIR)/EMC2_Getting_Started.pdf: $(DOC_SRCDIR)/Getting_Started.pdf
	@ln -f $< $@
$(DOC_DIR)/EMC2_Getting_Started_fr.pdf: $(DOC_SRCDIR)/Getting_Started_fr.pdf
	@ln -f $< $@
$(DOC_DIR)/EMC2_User_Manual.pdf: $(DOC_SRCDIR)/Master_User.pdf
	@ln -f $< $@
$(DOC_DIR)/EMC2_User_Manual_fr.pdf: $(DOC_SRCDIR)/Master_User_fr.pdf
	@ln -f $< $@
$(DOC_DIR)/EMC2_HAL_Manual.pdf: $(DOC_SRCDIR)/Master_HAL.pdf
	@ln -f $< $@
$(DOC_DIR)/EMC2_HAL_Manual_fr.pdf: $(DOC_SRCDIR)/Master_HAL_fr.pdf
	@ln -f $< $@
$(DOC_DIR)/EMC2_Integrator_Manual.pdf: $(DOC_SRCDIR)/Master_Integrator.pdf
	@ln -f $< $@
$(DOC_DIR)/EMC2_Integrator_Manual_fr.pdf: $(DOC_SRCDIR)/Master_Integrator_fr.pdf
	@ln -f $< $@
$(DOC_DIR)/EMC2_Developer_Manual.pdf: $(DOC_SRCDIR)/Master_Developer.pdf
	@ln -f $< $@

$(DOC_DIR)/html/man/%.html: $(DOC_DIR)/man/%
	@echo Formatting $(notdir $<) as HTML
	@mkdir -p $(dir $@)
	@(cd $(DOC_DIR)/man; groff -Thtml -man $(patsubst $(DOC_DIR)/man/%,%,$<)) > $@

ST := style=\"-moz-column-width: 25ex; -moz-column-gap: 4ex; list-style-type: none\"

objects/index.incl: objects/var-MAN_HTML_TARGETS $(DOC_SRCDIR)/Submakefile
	echo "<A NAME=\"man1\"><LI>Commands and userspace components<UL $(ST)>" > $@.tmp
	for i in $(filter %.1.html, $(MAN_HTML_TARGETS)); do j=$$(basename $$i .html); echo "<LI><A HREF=\"$${i#$(DOC_DIR)/html/}\">$$j</A>"; done >> $@.tmp
	echo "<A NAME=\"man9\"></UL><LI>Realtime components and kernel modules<UL $(ST)>" >> $@.tmp
	for i in $(filter %.9.html, $(MAN_HTML_TARGETS)); do j=$$(basename $$i .html); echo "<LI><A HREF=\"$${i#$(DOC_DIR)/html/}\">$$j</A>"; done >> $@.tmp
	echo "<A NAME=\"man3hal\"></UL><LI>HAL API calls<UL $(ST)>" >> $@.tmp
	for i in $(filter %.3hal.html, $(MAN_HTML_TARGETS)); do j=$$(basename $$i .html); echo "<LI><A HREF=\"$${i#$(DOC_DIR)/html/}\">$$j</A>"; done >> $@.tmp
	echo "<A NAME=\"man3rtapi\"></UL><LI>RTAPI calls<UL $(ST)>" >> $@.tmp
	for i in $(filter %.3rtapi.html, $(MAN_HTML_TARGETS)); do j=$$(basename $$i .html); echo "<LI><A HREF=\"$${i#$(DOC_DIR)/html/}\">$$j</A>"; done >> $@.tmp
	echo "</UL>" >> $@.tmp
	mv -f $@.tmp $@

$(DOC_DIR)/html/index_%.html: $(DOC_SRCDIR)/index_%.tmpl ../VERSION $(DOC_SRCDIR)/index.foot
	cat $(filter-out ../VERSION, $^) | \
		sed "s/@VERSION@/`cat ../VERSION`/" > $@	
	
$(DOC_DIR)/html/index.html: $(DOC_SRCDIR)/index.tmpl objects/index.incl $(DOC_SRCDIR)/index.foot ../VERSION $(DOC_SRCDIR)/Submakefile
	(cat $(DOC_SRCDIR)/index.tmpl objects/index.incl $(DOC_SRCDIR)/index.foot) | sed "s/@VERSION@/`cat ../VERSION`/" > $@	

$(DOC_SRCDIR)/%.pdf: $(DOC_SRCDIR)/%.txt
	$(ECHO) Building $@
	@rm -f $@
	$(A2X) -L -d book -vf pdf $< || (X=$$?; rm $@; exit $$X)
	@test -f $@

depends/%.d: $(DOC_SRCDIR)/%.txt $(DOC_SRCDIR)/asciideps
	$(ECHO) Depending $<
	@mkdir -p $(dir $@)
	@$(DOC_SRCDIR)/asciideps $< > $@.tmp
	@mv $@.tmp $@

define lyx2xml
python $(DOC_SRCDIR)/lyxtree.py --imagedir=$(DOC_DIR)/html -o objects/$(1)_$(2).xml $(3)
endef

XMLDEP := $(DOC_SRCDIR)/lyxtree.py $(DOC_SRCDIR)/lyxparser.py

SUBXML := \
	$(filter objects/hal_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/code_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/common_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/config_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/gcode_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/drivers_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/gui_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/install_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/ladder_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/lathe_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/motion_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/examples_%.xml, $(DOC_TARGETS_XML)) \
	$(filter objects/quickstart_%.xml, $(DOC_TARGETS_XML))

$(filter-out $(SUBXML),$(DOC_TARGETS_XML)): objects/%.xml: $(DOC_SRCDIR)/%.lyx $(XMLDEP)
	python $(DOC_SRCDIR)/lyxtree.py --imagedir=$(DOC_DIR)/html -o objects/$*.xml $<

$(filter objects/code_%.xml,$(DOC_TARGETS_XML)): objects/code_%.xml: $(DOC_SRCDIR)/code/%.lyx $(XMLDEP)
	$(call lyx2xml,code,$*,$<)
$(filter objects/common_%.xml,$(DOC_TARGETS_XML)): objects/common_%.xml: $(DOC_SRCDIR)/common/%.lyx $(XMLDEP)
	$(call lyx2xml,common,$*,$<)
$(filter objects/config_%.xml,$(DOC_TARGETS_XML)): objects/config_%.xml: $(DOC_SRCDIR)/config/%.lyx $(XMLDEP)
	$(call lyx2xml,config,$*,$<)
$(filter objects/drivers_%.xml,$(DOC_TARGETS_XML)): objects/drivers_%.xml: $(DOC_SRCDIR)/drivers/%.lyx $(XMLDEP)
	$(call lyx2xml,drivers,$*,$<)
$(filter objects/examples_%.xml,$(DOC_TARGETS_XML)): objects/examples_%.xml: $(DOC_SRCDIR)/examples/%.lyx $(XMLDEP)
	$(call lyx2xml,examples,$*,$<)
$(filter objects/gcode_%.xml,$(DOC_TARGETS_XML)): objects/gcode_%.xml: $(DOC_SRCDIR)/gcode/%.lyx $(XMLDEP)
	$(call lyx2xml,gcode,$*,$<)
$(filter objects/gui_%.xml,$(DOC_TARGETS_XML)): objects/gui_%.xml: $(DOC_SRCDIR)/gui/%.lyx $(XMLDEP)
	$(call lyx2xml,gui,$*,$<)
$(filter objects/hal_%.xml,$(DOC_TARGETS_XML)): objects/hal_%.xml: $(DOC_SRCDIR)/hal/%.lyx $(XMLDEP)
	$(call lyx2xml,hal,$*,$<)
$(filter objects/install_%.xml,$(DOC_TARGETS_XML)): objects/install_%.xml: $(DOC_SRCDIR)/install/%.lyx $(XMLDEP)
	$(call lyx2xml,install,$*,$<)
$(filter objects/ladder_%.xml,$(DOC_TARGETS_XML)): objects/ladder_%.xml: $(DOC_SRCDIR)/ladder/%.lyx $(XMLDEP)
	$(call lyx2xml,ladder,$*,$<)
$(filter objects/lathe_%.xml,$(DOC_TARGETS_XML)): objects/lathe_%.xml: $(DOC_SRCDIR)/lathe/%.lyx $(XMLDEP)
	$(call lyx2xml,lathe,$*,$<)
$(filter objects/motion_%.xml,$(DOC_TARGETS_XML)): objects/motion_%.xml: $(DOC_SRCDIR)/motion/%.lyx $(XMLDEP)
	$(call lyx2xml,motion,$*,$<)
$(filter objects/quickstart_%.xml,$(DOC_TARGETS_XML)): objects/quickstart_%.xml: $(DOC_SRCDIR)/quickstart/%.lyx $(XMLDEP)
	$(call lyx2xml,quickstart,$*,$<)

DOC_TARGETS_XML_FR := $(filter %_fr.xml, $(DOC_TARGETS_XML))
DOC_TARGETS_XML_EN := $(filter-out $(DOC_TARGETS_XML_FR), $(DOC_TARGETS_XML))
DOC_TARGETS_HTML_FR := $(filter %_fr.html, $(DOC_TARGETS_HTML))
DOC_TARGETS_HTML_EN := $(filter-out $(DOC_TARGETS_HTML_FR), $(DOC_TARGETS_HTML))

objects/xref_fr.xml: $(DOC_TARGETS_XML_FR) $(DOC_SRCDIR)/xref.py
	(cd objects; ../../docs/src/xref.py $(filter %.xml, $(patsubst objects/%,%,$^))) > $@
objects/xref.xml: $(DOC_TARGETS_XML_EN) $(DOC_SRCDIR)/xref.py
	(cd objects; ../../docs/src/xref.py $(filter %.xml, $(patsubst objects/%,%,$^))) > $@

#$(DOC_TARGETS_HTML_EN): $(DOC_DIR)/html/%.html: objects/%.xml objects/xref.xml $(DOC_SRCDIR)/l2h.xsl $(DOC_SRCDIR)/docs.xml $(DOC_SRCDIR)/terms.xml
#	$(ECHO) Converting $< to HTML
#	xsltproc --stringparam xrefdoc objects/xref.xml --stringparam docname "$*" --path objects -o $@ $(DOC_SRCDIR)/l2h.xsl $<
#
#$(DOC_TARGETS_HTML_FR): $(DOC_DIR)/html/%.html: objects/%.xml objects/xref_fr.xml $(DOC_SRCDIR)/l2h.xsl $(DOC_SRCDIR)/docs.xml $(DOC_SRCDIR)/terms.xml
#	$(ECHO) Converting $< to HTML
#	xsltproc --stringparam xrefdoc objects/xref_fr.xml --stringparam docname "$*" --path objects -o $@ $(DOC_SRCDIR)/l2h.xsl $<
#
#$(DOC_DIR)/html/xref.html: objects/xref.xml $(DOC_SRCDIR)/xref.xsl $(DOC_SRCDIR)/docs.xml $(DOC_SRCDIR)/terms.xml
#	$(ECHO) Converting $< to HTML
#	@xsltproc --stringparam docname "xref" --stringparam language english --path objects -o $@ $(DOC_SRCDIR)/xref.xsl $<

objects/%.links-stamp: $(DOC_SRCDIR)/%.txt
	@mkdir -p `dirname $@`
	asciidoc -d book -o- -b docbook $< | xsltproc $(DOC_SRCDIR)/links.xslt - > $@.tmp || (X=$$?; rm $@; exit $$X)
	sh move-if-change $@.tmp $(patsubst %-stamp,%,$@)
	touch $@

objects/%.links: objects/%.links-stamp
	@:

# Secondary is not working here.
# See http://www.gnu.org/software/make/manual/make.html#Chained-Rules
.PRECIOUS: objects/%.links-stamp

objects/xref_en.links: $(patsubst %.txt,objects/%.links,$(DOC_SRCS_EN_SMALL))
	$(PYTHON) $(DOC_SRCDIR)/links_db_gen.py objects/ $^ > $@

objects/xref_fr.links: $(patsubst %.txt,objects/%.links,$(DOC_SRCS_FR_SMALL))
	$(PYTHON) $(DOC_SRCDIR)/links_db_gen.py objects/ $^ > $@

$(DOC_TARGETS_HTML): $(DOC_DIR)/html/%.html: $(DOC_SRCDIR)/%.html
	@d=`dirname $*`; \
	for f in $(shell xsltproc --novalid --nonet $(DOC_SRCDIR)/html-images.xslt $<); do\
		mkdir -p $(DOC_DIR)/html/$$d/`dirname $$f`; \
		cp $(DOC_SRCDIR)/$$d/$$f $(DOC_DIR)/html/$$d/$$f; \
	done
	mkdir -p $(shell dirname $@)
	@cp $< $@

$(patsubst %.txt,$(DOC_SRCDIR)/%.html,$(DOC_SRCS_EN_SMALL)): $(DOC_SRCDIR)/%.html: $(DOC_SRCDIR)/%.txt objects/xref_en.links
	asciidoc -f $(DOC_SRCDIR)/xhtml11.conf \
	         -a "scriptdir=$(DOC_SRCDIR)/" \
	         -a "relindir=$(shell dirname $*)" \
	         -a "linksfile=objects/xref_en.links" \
		 -a stylesheet=$(shell pwd)/$(DOC_SRCDIR)/linuxcnc.css \
		 -d book -a toc -a numbered -b xhtml11 $< || (X=$$?; rm $@; exit $$X)
	
$(patsubst %.txt,$(DOC_SRCDIR)/%.html,$(DOC_SRCS_FR_SMALL)): $(DOC_SRCDIR)/%.html: $(DOC_SRCDIR)/%.txt objects/xref_fr.links
	asciidoc -f $(DOC_SRCDIR)/xhtml11.conf \
	         -a "scriptdir=$(DOC_SRCDIR)/" \
	         -a "relindir=$(shell dirname $*)" \
	         -a "linksfile=objects/xref_fr.links" \
		 -a stylesheet=$(shell pwd)/$(DOC_SRCDIR)/linuxcnc.css \
		 -d book -a toc -a numbered -b xhtml11 $< || (X=$$?; rm $@; exit $$X)
	
default: docs
$(DOC_DIR)/html/xref_fr.html: objects/xref_fr.xml $(DOC_SRCDIR)/xref.xsl $(DOC_SRCDIR)/docs.xml $(DOC_SRCDIR)/terms.xml
	$(ECHO) Converting $< to HTML
	@xsltproc --stringparam docname "xref_fr" --stringparam language french --path objects -o $@ $(DOC_SRCDIR)/xref.xsl $<
	
default: docs

install-doc-pdf:
	$(DIR) $(DESTDIR)$(docsdir)
	$(FILE) $(PDF_TARGETS) $(DESTDIR)$(docsdir)

install-doc-html:
	$(DIR) $(DESTDIR)$(docsdir)
	cp -a $(DOC_DIR)/html $(DESTDIR)$(docsdir)
install-kernel-indep: install-doc
else
docs:
	$(error Cannot build documents, missing LyX or some other required program, or explicitly disabled in configure)

endif

docclean:
	-rm -f $(DOC_DIR)/EMC2_Getting_Started.pdf
	-rm -f $(DOC_DIR)/EMC2_Getting_Started_fr.pdf
	-rm -f $(DOC_DIR)/EMC2_User_Manual.pdf
	-rm -f $(DOC_DIR)/EMC2_User_Manual_fr.pdf
	-rm -f $(DOC_DIR)/EMC2_HAL_Manual.pdf
	-rm -f $(DOC_DIR)/EMC2_HAL_Manual_fr.pdf
	-rm -f $(DOC_DIR)/EMC2_Integrator_Manual.pdf
	-rm -f $(DOC_DIR)/EMC2_Integrator_Manual_fr.pdf
	-rm -f $(DOC_DIR)/EMC2_Developer_Manual.pdf
	-rm -f $(DOC_SRCDIR)/*.d
	-rm -f $(DOC_SRCDIR)/*.pdf
	-rm -f $(DOC_TARGETS_HTML) $(DOC_DIR)/html/xref*.html $(DOC_DIR)/html/index*.html $(DOC_DIR)/*.png $(DOC_DIR)/man/*.png

MAN_DEPS := $(patsubst $(DOC_DIR)/man/%, depends/%.d, $(MAN_SRCS))
$(MAN_DEPS): depends/%.d: $(DOC_DIR)/man/%
	@echo Depending $(notdir $<)
	@mkdir -p $(dir $@)
	@echo -n "$(DOC_DIR)/html/man/$*.html: $<" > $@.tmp
	@grep '^\.so ' $< | awk '{printf " \\\n\t$(DOC_DIR)/man/%s", $$2}' >> $@.tmp
	@echo >> $@.tmp
	@mv -f $@.tmp $@

ifeq ($(TRIVIAL_BUILD),no)
-include $(MAN_DEPS)
Makefile: $(MAN_DEPS)
endif

%.png:; $(error Required image file $@ does not exist)
%.jpg:; $(error Required image file $@ does not exist)
%.svg:; $(error Required image file $@ does not exist)
%.dxf:; $(error Required image file $@ does not exist)
%.ps:; $(error Required image file $@ does not exist)
%.eps:; $(error Required image file $@ does not exist)
