:ini: {basebackend@docbook:'':ini}
:hal: {basebackend@docbook:'':hal}
:ngc: {basebackend@docbook:'':ngc}
// begin a listing of ini/hal/ngc files like so:
//[source,{ini}]
//[source,{hal}]
//[source,{ngc}]

= Defining new Interpreter codes [[defining-new-interpreter-codes]]

== Getting started [[remap:getting-started]]

Defining a code involves the following steps:
- choosing an <<remap::available-codes,appropriate code>> - either use an
unallocated code, or redefine an existing code
- deciding how parmeters are handled
- decide how results are handled
- decide about the execution sequencing.

=== Parameter handling [[remap:parameter-handling]]

Let's assume the new code will be defined by an NGC procedure, and needs
some parameters, some of which might be required, others might be
optional. We have the following options to feed values to the
procedure:

. <<remap::extracting-words,extracting words from the current block>> and pass them to the
  procedure as parameters (like `X22.34` or `P47`)
. <<remap::referto-inifile-variables, referring to ini file variables>>
. referring to global variables (like '#2200 = 47.11' or
   '#<_global_param> = 315.2'

The first method is preferred for  parameters of dynamic nature, , like
positions. You need to define which words on the current block have
any meaning for your new code, and specify how that is passed to the
NGC procedure (--- FIXME -- argspec, prolog)

Using to ini file variables is most useful for referring to setup
information for your machine, for instance a fixed position like a
tool-length sensor position. The advantage of this method is that the
parameters are fixed for your configuration regardless which NGC file
you're currently executing.

Referring to global variables is always possible, but they are easily
overlooked.

Note there's a limited supply of words which may be used as
parameters, so one might need to fall back to the second and third
methods if many parameters are needed.

=== Handling results [[remap:handling-results]]

Your new code might succeed or fail, for instance if passed an invalid
parameter combination. Or you might choose to 'just execute' the
procedure and disregard results, in which case there isnt much work to do.

The suggested method to handle success or failure of an NGC procedure
is to <<remap::epilog-handler, inspect its return value in an 'epilog
handler'>>. This gives you the option to display a message, inspect
interpreter internals if needed, and optionally fail interpreter
execution so the program stops.

=== Execution sequencing [[remap:execution-sequencingg]]

If a  G-code block  contains several executable words on a line, these
words are executed in the <<remap::prescribed-order, prescribed execution
sequence>>.

When you define a new executable code, the interpreter does not yet
know where your code fits into this execution sequence. For this
reason, you need to choose an appropriate modal group for your code to
execute in.

FIXME default modal group?

=== Which codes are subject to remapping? [[remap:available-codes]]

Note that currently only a few existing codes may be redefined,
whereas there are many 'free' codes which might be made available by
remapping. When developing a redefined existing code, it might be a
good idea to start with an unallocated G- or M-code so both the
existing and new behaviour can be exercised. When done, redefine the
existing code to use your remapping setup.

The current set of unused M-codes open to user definition is:
<<remap::unallocated-m-codes,Currently unallocated M-codes>>.

See <<remap::unallocated-g-codes,Currently unallocated G-codes>> for the list
of unused G-codes which may be added as user-defined G-code by remapping.

The current set of *existing* codes open to redefinition is:

- Tx (Prepare)
- M6 (Change tool)
- M61 (Set tool number)
- Sx  (set spindle speed)
- Fx  (set feed)



=== Currently unallocated M-codes: [[remap:unallocated-m-codes]]

These codes are currently undefined in the current implementation of EMC2
and may be used to define new M-codes:

M10
M11 M12 M13 M14 M15 M16 M17 M18 M19 M20
M21 M22 M23 M24 M25 M26 M27 M28 M29 M31 M32 M33 M34 M35 M36 M37 M38 M39 M40
M41 M42 M43 M44 M45 M46 M47 M54 M55 M56 M57 M58 M59 M74 M75 M76 M77 M78 M79 M80
M81 M82 M83 M84 M85 M86 M87 M88 M89 M90
M91 M92 M93 M94 M95 M96 M97 M98 M99

All codes between M199 and M999.

== Extracting words from the current block and passing as parameters [[remap:extracting-words]]

foo

== Referring to inifile variables [[remap:referto-inifile-variables]]

foo

== A complete example [[remap:complete-example]]


For the purpose of this discussion, let's assume we are defining a new
code as follows:

- the name will be 'G88.1'
- it will take a mandatory word 'X' and optional words 'P' and 'Q'
