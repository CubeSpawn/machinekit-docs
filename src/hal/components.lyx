#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
HAL Components
\begin_inset LatexCommand label
name "cha:HAL-Components"

\end_inset


\end_layout

\begin_layout Section
Commands and Userspace Components
\begin_inset LatexCommand label
name "sec:Commands-and-Userspace-Components"

\end_inset


\end_layout

\begin_layout Standard
Some of these will have expanded descriptions from the man pages.
 Some will have limited descriptions.
 All of the components have man pages.
 From this list you know what components exist and can use man n name to
 get additional information.
 For example in a terminal window type
\end_layout

\begin_layout LyX-Code
man 1 axis 
\end_layout

\begin_layout Standard
to view the information in the man page.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
axis-remote.1 = AXIS Remote Interface
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
axis.1 = AXIS EMC (The Enhanced Machine Controller) Graphical User Interface
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
bfload.1 = A program for loading a Xilinx Bitfile program into the FPGA of
 an Anything I/O board from Mesa
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
comp.1 = Build, compile and install EMC HAL components
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
emc.1 = EMC (The Enhanced Machine Controller)
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
hal_input.1 = control HAL pins with any Linux input device, including USB
 HID devices
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
halcmd.1 = manipulate the Enhanced Machine Controller HAL from the command
 line
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
halmeter.1 = observe HAL pins, signals, and parameters
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
halrun.1 = manipulate the Enhanced Machine Controller HAL from the command
 line
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
halsampler.1 = sample data from HAL in realtime
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
halstreamer.1 = stream file data into HAL in real time
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
halui.1 = observe HAL pins and command EMC through NML
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
io.1 = accepts NML I/O commands, interacts with HAL in userspace
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
iocontrol.1 = accepts NML I/O commands, interacts with HAL in userspace
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
pyvcp.1 = Virtual Control Panel for EMC2
\end_layout

\begin_layout Section
Realtime Components
\begin_inset LatexCommand label
name "sec:Realtime-Components"

\end_inset


\end_layout

\begin_layout Standard
Some of these will have expanded descriptions from the man pages.
 Some will have limited descriptions.
 All of the components have man pages.
 From this list you know what components exist and can use man n name to
 get additional information in a terminal window.
\end_layout

\begin_layout Subsection
abs
\begin_inset LatexCommand index
name "abs"

\end_inset


\end_layout

\begin_layout Standard
Compute the absolute value and sign of the input signal
\end_layout

\begin_layout Subparagraph
Loading
\end_layout

\begin_layout LyX-Code
loadrt abs [count=N|names=name1[,name2...]]
\end_layout

\begin_layout Subparagraph
Functions
\end_layout

\begin_layout LyX-Code
addf abs.N|name thread-name
\end_layout

\begin_layout Subparagraph
Pins
\end_layout

\begin_layout LyX-Code
abs.N.in (float in) Input value
\end_layout

\begin_layout LyX-Code
abs.N.out (float out) Output Value, always positive
\end_layout

\begin_layout LyX-Code
abs.N.sign (bit out) Sign of Input, false = positive, true = negative
\end_layout

\begin_layout Standard
The first abs loaded will be abs.0 and each one after that the "N" number
 will increment.
\end_layout

\begin_layout Subsection
and2
\begin_inset LatexCommand index
name "and2"

\end_inset


\end_layout

\begin_layout Standard
Two-input AND gate.
 For out to be true both inputs must be true
\end_layout

\begin_layout Subparagraph
Loading
\end_layout

\begin_layout LyX-Code
loadrt and2 [count=N|names=name1[,name2...]]
\end_layout

\begin_layout Subparagraph
Functions
\end_layout

\begin_layout LyX-Code
addf and2.N|name thread-name
\end_layout

\begin_layout Subparagraph
Pins
\end_layout

\begin_layout LyX-Code
and2.N.in0 (bit in) Input 0
\end_layout

\begin_layout LyX-Code
and2.N.in1 (bit in) Input 1
\end_layout

\begin_layout LyX-Code
and2.N.out (bit out) Output
\end_layout

\begin_layout Subsection
at_pid
\begin_inset LatexCommand index
name "at\\_pid"

\end_inset


\end_layout

\begin_layout Standard
proportional/integral/derivative controller with auto tuning
\end_layout

\begin_layout Subsection
axis
\begin_inset LatexCommand index
name "axis"

\end_inset


\end_layout

\begin_layout Standard
accepts NML motion commands, interacts with HAL in realtime
\end_layout

\begin_layout Subsection
biquad
\begin_inset LatexCommand index
name "biquad"

\end_inset


\end_layout

\begin_layout Standard
Biquad IIR filter
\end_layout

\begin_layout Subsection
bldc_hall3
\begin_inset LatexCommand index
name "bldc\\_hall3"

\end_inset


\end_layout

\begin_layout Standard
3-wire Bipolar trapezoidal commutation BLDC motor driver using Hall sensors
\end_layout

\begin_layout Subsection
blend
\begin_inset LatexCommand index
name "blend"

\end_inset


\end_layout

\begin_layout Standard
Perform linear interpolation between two values
\end_layout

\begin_layout Subparagraph
Loading
\end_layout

\begin_layout LyX-Code
loadrt blend [count=N|names=name1[,name2...]]
\end_layout

\begin_layout Subparagraph
Functions
\end_layout

\begin_layout LyX-Code
addf blend.N|name thread-name
\end_layout

\begin_layout Subparagraph
Pins
\end_layout

\begin_layout LyX-Code
blend.N.in1 (float in) First input.
\end_layout

\begin_layout LyX-Code
blend.N.in2 (float in) Second input.
\end_layout

\begin_layout LyX-Code
blend.N.select (float in) Select input.
\end_layout

\begin_layout LyX-Code
blend.N.out (float out) Output value.
\end_layout

\begin_layout Subparagraph
Parameters
\end_layout

\begin_layout LyX-Code
blend.N.open (bit r/w)
\end_layout

\begin_layout Subparagraph
Description
\end_layout

\begin_layout Standard
If select is equal to 0.0 output is equal to in1.
 
\end_layout

\begin_layout Standard
If select is equal to 1.0, the output is equal to in2.
\end_layout

\begin_layout Standard
For select values between 0.0 and 1.0, the output changes linearly from in1
 to in2.
\end_layout

\begin_layout Standard
If blend.N.open is true, select values outside the range 0.0 to 1.0 give values
 outside the range in1 to in2.
 If false, outputs are clamped to the the range in1 to in2
\end_layout

\begin_layout Subsection
charge_pump
\begin_inset LatexCommand index
name "charge\\_pump"

\end_inset


\end_layout

\begin_layout Standard
Create a square-wave for the "charge pump" input of some controller boards
\end_layout

\begin_layout Subparagraph
Loading
\end_layout

\begin_layout LyX-Code
loadrt charge_pump
\end_layout

\begin_layout Subparagraph
Functions
\end_layout

\begin_layout LyX-Code
addf charge-pump
\end_layout

\begin_layout Subparagraph
Pins
\end_layout

\begin_layout LyX-Code
charge-pump.out (bit out)
\end_layout

\begin_layout LyX-Code
charge-pump.enable (bit in) default = TRUE
\end_layout

\begin_layout Subparagraph
Description
\end_layout

\begin_layout Standard
Outputs a square wave if enable is TRUE or unconnected, low if enable is
 FALSE
\end_layout

\begin_layout Subsection
clarke2
\begin_inset LatexCommand index
name "clarke2"

\end_inset


\end_layout

\begin_layout Standard
Two input version of Clarke transform
\end_layout

\begin_layout Subparagraph
Loading
\end_layout

\begin_layout LyX-Code
loadrt clarke2 [count=N|names=name1[,name2...]]
\end_layout

\begin_layout Subparagraph
Functions
\end_layout

\begin_layout LyX-Code
addf clarke2.N | name
\end_layout

\begin_layout Subparagraph
Pins
\end_layout

\begin_layout LyX-Code
clarke2.N.a (float in) phase a input
\end_layout

\begin_layout LyX-Code
clarke2.N.b (float in) phase b input
\end_layout

\begin_layout LyX-Code
clarke2.N.x (float out) cartesian components of output
\end_layout

\begin_layout LyX-Code
clarke2.N.y (float out) cartesian components of output
\end_layout

\begin_layout Subparagraph
Description
\end_layout

\begin_layout Standard
The Clarke transform can be used to translate a vector quantity from a three
 phase system (three components 120 degrees apart) to a two phase Cartesian
 system.
\end_layout

\begin_layout Standard
clarke2 implements a special case of the Clarke transform, which only needs
 two of the three input phases.
 In a three wire three phase system, the sum of the three phase currents
 or voltages must always be zero.
 As a result only two of the three are needed to completely define the current
 or voltage.
 clarke2 assumes that the sum is zero, so it only uses phases A and B of
 the input.
 Since the H (homopolar) output will always be zero in this case, it is
 not generated.
\end_layout

\begin_layout Subsection
clarke3
\begin_inset LatexCommand index
name "clarke3"

\end_inset


\end_layout

\begin_layout Standard
Clarke (3 phase to cartesian) transform
\end_layout

\begin_layout Subparagraph
Loading
\end_layout

\begin_layout LyX-Code
loadrt clarke3 [count=N|names=name1[,name2...]]
\end_layout

\begin_layout Subparagraph
Functions
\end_layout

\begin_layout LyX-Code
addf clarke3.N | name
\end_layout

\begin_layout Subparagraph
Pins
\end_layout

\begin_layout LyX-Code
clarke3.N.a (float in) three phase input vector
\end_layout

\begin_layout LyX-Code
clarke3.N.b (float in) three phase input vector
\end_layout

\begin_layout LyX-Code
clarke3.N.c (float in) three phase input vector
\end_layout

\begin_layout LyX-Code
clarke3.N.x (float out) cartesian components of output
\end_layout

\begin_layout LyX-Code
clarke3.N.y (float out) cartesian components of output
\end_layout

\begin_layout LyX-Code
clarke3.N.h (float out) homopolar component of output
\end_layout

\begin_layout Subparagraph
Description
\end_layout

\begin_layout Standard
The Clarke transform can be used to translate a vector quantity from a three
 phase system (three components 120 degrees apart) to a two phase Cartesian
 system (plus a homopolar component if the three phases don't sum to zero).
\end_layout

\begin_layout Standard
clarke3 implements the general case of the transform, using all three phases.
 If the three phases are known to sum to zero, see clarke2 for a simpler
 version.
\end_layout

\begin_layout Subsection
clarkeinv
\begin_inset LatexCommand index
name "clarkeinv"

\end_inset


\end_layout

\begin_layout Standard
Inverse Clarke transform
\end_layout

\begin_layout Subparagraph
Loading
\end_layout

\begin_layout LyX-Code
loadrt clarkeinv [count=N|names=name1[,name2...]]
\end_layout

\begin_layout Subparagraph
Functions
\end_layout

\begin_layout LyX-Code
addf clarkeinv.N | name
\end_layout

\begin_layout Subparagraph
Pins
\end_layout

\begin_layout LyX-Code
clarkeinv.N.x (float in) cartesian components of input
\end_layout

\begin_layout LyX-Code
clarkeinv.N.y (float in) cartesian components of input
\end_layout

\begin_layout LyX-Code
clarkeinv.N.h (float in) homopolar component of input (usually zero)
\end_layout

\begin_layout LyX-Code
clarkeinv.N.a (float out) three phase output vector
\end_layout

\begin_layout LyX-Code
clarkeinv.N.b (float out) three phase output vector
\end_layout

\begin_layout LyX-Code
clarkeinv.N.c (float out) three phase output vector
\end_layout

\begin_layout Subparagraph
Parameters
\end_layout

\begin_layout Subparagraph
Description
\end_layout

\begin_layout Standard
The inverse Clarke transform can be used to translate a vector quantity
 from Cartesian coordinate system to a three phase system (three components
 120 degrees apart).
\end_layout

\begin_layout Subsection
classicladder
\begin_inset LatexCommand index
name "classicladder"

\end_inset


\end_layout

\begin_layout Standard
Realtime software plc based on ladder logic
\end_layout

\begin_layout Subsection
comp
\begin_inset LatexCommand index
name "comp"

\end_inset


\end_layout

\begin_layout Standard
Two input comparator with hysteresis
\end_layout

\begin_layout Subsection
constant
\begin_inset LatexCommand index
name "constant"

\end_inset


\end_layout

\begin_layout Standard
Use a parameter to set the value of a pin
\end_layout

\begin_layout Subsection
conv_bit_s32
\begin_inset LatexCommand index
name "conv\\_bit\\_s32"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from bit to s32
\end_layout

\begin_layout Subsection
conv_bit_u32
\begin_inset LatexCommand index
name "conv\\_bit\\_u32"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from bit to u32
\end_layout

\begin_layout Subsection
conv_float_s32
\begin_inset LatexCommand index
name "conv\\_float\\_s32"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from float to s32
\end_layout

\begin_layout Subsection
conv_float_u32
\begin_inset LatexCommand index
name "conv\\_float\\_u32"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from float to u32
\end_layout

\begin_layout Subsection
conv_s32_bit
\begin_inset LatexCommand index
name "conv\\_s32\\_bit"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from s32 to bit
\end_layout

\begin_layout Subsection
conv_s32_float
\begin_inset LatexCommand index
name "conv\\_s32\\_float"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from u32 to bit
\end_layout

\begin_layout Subsection
conv_s32_u32
\begin_inset LatexCommand index
name "conv\\_s32\\_u32"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from s32 to u32
\end_layout

\begin_layout Subsection
conv_u32_bit
\begin_inset LatexCommand index
name "conv\\_u32\\_bit"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from u32 to bit
\end_layout

\begin_layout Subsection
conv_u32_float
\begin_inset LatexCommand index
name "conv\\_u32\\_float"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from u32 to float
\end_layout

\begin_layout Subsection
conv_u32_s32
\begin_inset LatexCommand index
name "conv\\_u32\\_s32"

\end_inset


\end_layout

\begin_layout Standard
Convert a value from u32 to s32
\end_layout

\begin_layout Subsection
counter
\begin_inset LatexCommand index
name "counter"

\end_inset


\end_layout

\begin_layout Standard
counts input pulses (deprecated)
\end_layout

\begin_layout Subsection
ddt
\begin_inset LatexCommand index
name "ddt"

\end_inset


\end_layout

\begin_layout Standard
Compute the derivative of the input function
\end_layout

\begin_layout Subsection
deadzone
\begin_inset LatexCommand index
name "deadzone"

\end_inset


\end_layout

\begin_layout Standard
Return the center if within the threshold
\end_layout

\begin_layout Subsection
debounce
\begin_inset LatexCommand index
name "debounce"

\end_inset


\end_layout

\begin_layout Standard
filter noisy digital inputs, for more information see 
\begin_inset LatexCommand ref
reference "sec:Debounce"

\end_inset


\end_layout

\begin_layout Subsection
edge
\begin_inset LatexCommand index
name "edge"

\end_inset


\end_layout

\begin_layout Standard
Edge detector
\end_layout

\begin_layout Subsection
encoder
\begin_inset LatexCommand index
name "encoder"

\end_inset


\end_layout

\begin_layout Standard
software counting of quadrature encoder signals, for more information see
 
\begin_inset LatexCommand ref
reference "sec:Encoder"

\end_inset


\end_layout

\begin_layout Subsection
encoder_ratio
\begin_inset LatexCommand index
name "encoder\\_ratio"

\end_inset


\end_layout

\begin_layout Standard
an electronic gear to synchronize two axes
\end_layout

\begin_layout Subsection
estop_latch
\begin_inset LatexCommand index
name "estop\\_latch"

\end_inset


\end_layout

\begin_layout Standard
ESTOP latch
\end_layout

\begin_layout Subsection
feedcomp
\begin_inset LatexCommand index
name "feedcomp"

\end_inset


\end_layout

\begin_layout Standard
Multiply the input by the ratio of current velocity to the feed rate
\end_layout

\begin_layout Subsection
flipflop
\begin_inset LatexCommand index
name "flipflop"

\end_inset


\end_layout

\begin_layout Standard
D type flip-flop
\end_layout

\begin_layout Subsection
freqgen
\begin_inset LatexCommand index
name "freqgen"

\end_inset


\end_layout

\begin_layout Standard
software step pulse generation
\end_layout

\begin_layout Subsection
gantrykins
\end_layout

\begin_layout Standard
A kinematics module that maps one axis to multiple joints
\end_layout

\begin_layout Subsection
gearchange
\begin_inset LatexCommand index
name "gearchange"

\end_inset


\end_layout

\begin_layout Standard
Select from one two speed ranges
\end_layout

\begin_layout Subsection
genhexkins
\begin_inset LatexCommand index
name "genhexkins"

\end_inset


\end_layout

\begin_layout Standard
Gives six degrees of freedom in position and orientation (XYZABC).
 The location of the motors is defined at compile time.
\end_layout

\begin_layout Subsection
genserkins
\end_layout

\begin_layout Standard
Kinematics that can model a general serial-link manipulator with up to 6
 angular joints.
\end_layout

\begin_layout Subsection
hm2_7i43
\begin_inset LatexCommand index
name "hm2\\_7i43"

\end_inset


\end_layout

\begin_layout Standard
HAL driver for the Mesa Electronics 7i43 EPP Anything IO board with HostMot2
\end_layout

\begin_layout Subsection
hm2_pci
\begin_inset LatexCommand index
name "hm2\\_pci"

\end_inset


\end_layout

\begin_layout Standard
HAL driver for the Mesa Electronics 5i20, 5i22, 5i23, 4i65, and 4i68 Anything
 IO boards, with HostMot2 firmware
\end_layout

\begin_layout Subsection
hostmot2
\begin_inset LatexCommand index
name "hostmot2"

\end_inset


\end_layout

\begin_layout Standard
HAL driver for the Mesa Electronics HostMot2 firmware
\end_layout

\begin_layout Subsection
hypot
\begin_inset LatexCommand index
name "hypot"

\end_inset


\end_layout

\begin_layout Standard
Three-input hypotenuse (Euclidean distance) calculator
\end_layout

\begin_layout Subsection
ilowpass
\begin_inset LatexCommand index
name "ilowpass"

\end_inset


\end_layout

\begin_layout Standard
Low-pass filter with integer inputs and outputs
\end_layout

\begin_layout Subsection
integ
\begin_inset LatexCommand index
name "integ"

\end_inset


\end_layout

\begin_layout Standard
Integrator
\end_layout

\begin_layout Subsection
invert
\begin_inset LatexCommand index
name "invert"

\end_inset


\end_layout

\begin_layout Standard
Compute the inverse of the input signal
\end_layout

\begin_layout Subsection
joyhandle
\begin_inset LatexCommand index
name "joyhandle"

\end_inset


\end_layout

\begin_layout Standard
sets nonlinear joypad movements, deadbands and scales
\end_layout

\begin_layout Subsection
kins
\begin_inset LatexCommand index
name "kins"

\end_inset


\end_layout

\begin_layout Standard
kinematics definitions for emc2
\end_layout

\begin_layout Subsection
knob2float
\begin_inset LatexCommand index
name "knob2float"

\end_inset


\end_layout

\begin_layout Standard
Convert counts (probably from an encoder) to a float value
\end_layout

\begin_layout Subsection
limit1
\begin_inset LatexCommand index
name "limit1"

\end_inset


\end_layout

\begin_layout Standard
Limit the output signal to fall between min and max
\end_layout

\begin_layout Subsection
limit2
\begin_inset LatexCommand index
name "limit2"

\end_inset


\end_layout

\begin_layout Standard
Limit the output signal to fall between min and max
\end_layout

\begin_layout Subsection
limit3
\begin_inset LatexCommand index
name "limit3"

\end_inset


\end_layout

\begin_layout Standard
Limit the output signal to fall between min and max
\end_layout

\begin_layout Subsection
logic
\begin_inset LatexCommand index
name "logic"

\end_inset


\end_layout

\begin_layout Standard
Experimental general logic function component
\end_layout

\begin_layout Subsection
lowpass
\begin_inset LatexCommand index
name "lowpass"

\end_inset


\end_layout

\begin_layout Standard
Low-pass filter
\end_layout

\begin_layout Subsection
lut5
\begin_inset LatexCommand index
name "lut5"

\end_inset


\end_layout

\begin_layout Standard
Arbitrary 5-input logic function based on a look-up table
\end_layout

\begin_layout Subsection
maj3
\begin_inset LatexCommand index
name "maj3"

\end_inset


\end_layout

\begin_layout Standard
Compute the majority of 3 inputs
\end_layout

\begin_layout Subsection
match8
\begin_inset LatexCommand index
name "match8"

\end_inset


\end_layout

\begin_layout Standard
8-bit binary match detector
\end_layout

\begin_layout Subsection
maxkins
\begin_inset LatexCommand index
name "maxkins"

\end_inset


\end_layout

\begin_layout Standard
Kinematics for a tabletop 5 axis mill named "max" with tilting head (B axis)
 and horizintal rotary mounted to the table (C axis).
 Provides UVW motion in the rotated coordinate system.
 The source file, maxkins.c, may be a useful starting point for other 5-axis
 systems.
\end_layout

\begin_layout Subsection
minmax
\begin_inset LatexCommand index
name "minmax"

\end_inset


\end_layout

\begin_layout Standard
Track the minimum and maximum values of the input to the outputs
\end_layout

\begin_layout Subsection
motion
\begin_inset LatexCommand index
name "motion"

\end_inset


\end_layout

\begin_layout Standard
accepts NML motion commands, interacts with HAL in realtime
\end_layout

\begin_layout Subsection
mult2
\begin_inset LatexCommand index
name "mult2"

\end_inset


\end_layout

\begin_layout Standard
Product of two inputs
\end_layout

\begin_layout Subsection
mux2
\begin_inset LatexCommand index
name "mux2"

\end_inset


\end_layout

\begin_layout Standard
Select from one of two input values
\end_layout

\begin_layout Subsection
mux4
\begin_inset LatexCommand index
name "mux4"

\end_inset


\end_layout

\begin_layout Standard
Select from one of four input values
\end_layout

\begin_layout Subsection
mux8
\begin_inset LatexCommand index
name "mux8"

\end_inset


\end_layout

\begin_layout Standard
Select from one of eight input values
\end_layout

\begin_layout Subsection
near
\begin_inset LatexCommand index
name "near"

\end_inset


\end_layout

\begin_layout Standard
Determine whether two values are roughly equal
\end_layout

\begin_layout Subsection
not
\begin_inset LatexCommand index
name "not"

\end_inset


\end_layout

\begin_layout Standard
Inverter
\end_layout

\begin_layout Subsection
offset
\begin_inset LatexCommand index
name "offset"

\end_inset


\end_layout

\begin_layout Standard
Adds an offset to an input, and subtracts it from the feedback value
\end_layout

\begin_layout Subsection
oneshot
\begin_inset LatexCommand index
name "oneshot"

\end_inset


\end_layout

\begin_layout Standard
one-shot pulse generator
\end_layout

\begin_layout Subsection
or2
\begin_inset LatexCommand index
name "or2"

\end_inset


\end_layout

\begin_layout Standard
Two-input OR gate
\end_layout

\begin_layout Subsection
pid
\begin_inset LatexCommand index
name "pid"

\end_inset


\end_layout

\begin_layout Standard
proportional/integral/derivative controller, for more information see 
\begin_inset LatexCommand ref
reference "sec:PID"

\end_inset


\end_layout

\begin_layout Subsection
pluto_servo
\begin_inset LatexCommand index
name "pluto\\_servo"

\end_inset


\end_layout

\begin_layout Standard
Hardware driver and firmware for the Pluto-P parallel-port FPGA, for use
 with servos
\end_layout

\begin_layout Subsection
pluto_step
\begin_inset LatexCommand index
name "pluto\\_step"

\end_inset


\end_layout

\begin_layout Standard
Hardware driver and firmware for the Pluto-P parallel-port FPGA, for use
 with steppers
\end_layout

\begin_layout Subsection
pwmgen
\begin_inset LatexCommand index
name "pwmgen"

\end_inset


\end_layout

\begin_layout Standard
software PWM/PDM generation, for more information see 
\begin_inset LatexCommand ref
reference "sec:PWMgen"

\end_inset


\end_layout

\begin_layout Subsection
rotatekins
\begin_inset LatexCommand index
name "rotatekins"

\end_inset


\end_layout

\begin_layout Standard
The X and Y axes are rotated 45 degrees compared to the joints 0 and 1.
\end_layout

\begin_layout Subsection
sample_hold
\begin_inset LatexCommand index
name "sample\\_hold"

\end_inset


\end_layout

\begin_layout Standard
Sample and Hold
\end_layout

\begin_layout Subsection
sampler
\begin_inset LatexCommand index
name "sampler"

\end_inset


\end_layout

\begin_layout Standard
sample data from HAL in real time
\end_layout

\begin_layout Subsection
scale
\begin_inset LatexCommand index
name "scale"

\end_inset


\end_layout

\begin_layout Standard
applies a scale and offset to its input
\end_layout

\begin_layout Subsection
scarakins
\begin_inset LatexCommand index
name "scarakins"

\end_inset


\end_layout

\begin_layout Standard
kinematics for SCARA-type robots
\end_layout

\begin_layout Subsection
select8
\begin_inset LatexCommand index
name "select8"

\end_inset


\end_layout

\begin_layout Standard
8-bit binary match detector
\end_layout

\begin_layout Subsection
serport
\begin_inset LatexCommand index
name "serport"

\end_inset


\end_layout

\begin_layout Standard
Hardware driver for the digital I/O bits of the 8250 and 16550 serial port
\end_layout

\begin_layout Subsection
siggen
\begin_inset LatexCommand index
name "siggen"

\end_inset


\end_layout

\begin_layout Standard
signal generator, for more information see 
\begin_inset LatexCommand ref
reference "sec:Siggen"

\end_inset


\end_layout

\begin_layout Subsection
sim_encoder
\begin_inset LatexCommand index
name "sim\\_encoder"

\end_inset


\end_layout

\begin_layout Standard
simulated quadrature encoder, for more information see 
\begin_inset LatexCommand ref
reference "sec:Simulated-Encoder"

\end_inset


\end_layout

\begin_layout Subsection
sphereprobe
\begin_inset LatexCommand index
name "sphereprobe"

\end_inset


\end_layout

\begin_layout Standard
Probe a pretend hemisphere
\end_layout

\begin_layout Subsection
stepgen
\begin_inset LatexCommand index
name "stepgen"

\end_inset


\end_layout

\begin_layout Standard
software step pulse generation, for more information see 
\begin_inset LatexCommand ref
reference "sec:Stepgen"

\end_inset


\end_layout

\begin_layout Subsection
steptest
\begin_inset LatexCommand index
name "steptest"

\end_inset


\end_layout

\begin_layout Standard
Used by Stepconf to allow testing of acceleration and velocity values for
 an axis
\end_layout

\begin_layout Subsection
streamer
\begin_inset LatexCommand index
name "streamer"

\end_inset


\end_layout

\begin_layout Standard
stream file data into HAL in real time
\end_layout

\begin_layout Subsection
sum2
\begin_inset LatexCommand index
name "sum2"

\end_inset


\end_layout

\begin_layout Standard
Sum of two inputs (each with a gain) and an offset
\end_layout

\begin_layout Subsection
supply
\begin_inset LatexCommand index
name "supply"

\end_inset


\end_layout

\begin_layout Standard
set output pins with values from parameters (deprecated)
\end_layout

\begin_layout Subsection
thc
\end_layout

\begin_layout Standard
Torch Height Control using a Mesa THC card.
\end_layout

\begin_layout Subsection
threads
\begin_inset LatexCommand index
name "threads"

\end_inset


\end_layout

\begin_layout Standard
creates hard realtime HAL threads
\end_layout

\begin_layout Subsection
threadtest
\begin_inset LatexCommand index
name "threadtest"

\end_inset


\end_layout

\begin_layout Standard
component for testing thread behavior
\end_layout

\begin_layout Subsection
timedelay
\begin_inset LatexCommand index
name "timedelay"

\end_inset


\end_layout

\begin_layout Standard
The equivalent of a time-delay relay
\end_layout

\begin_layout Subsection
timedelta
\begin_inset LatexCommand index
name "timedelta"

\end_inset


\end_layout

\begin_layout Standard
component that measures thread scheduling timing behavior
\end_layout

\begin_layout Subsection
toggle
\begin_inset LatexCommand index
name "toggle"

\end_inset


\end_layout

\begin_layout Standard
push-on, push-off from momentary pushbuttons
\end_layout

\begin_layout Subsection
toggle2nist
\begin_inset LatexCommand index
name "toggle2nist"

\end_inset


\end_layout

\begin_layout Standard
toggle button to nist logic
\end_layout

\begin_layout Subsection
tripodkins
\begin_inset LatexCommand index
name "tripodkins"

\end_inset


\end_layout

\begin_layout Standard
The joints represent the distance of the controlled point from three predefined
 locations (the motors), giving three degrees of freedom in position (XYZ)
\end_layout

\begin_layout Subsection
tristate_bit
\begin_inset LatexCommand index
name "tristate\\_bit"

\end_inset


\end_layout

\begin_layout Standard
Place a signal on an I/O pin only when enabled, similar to a tristate buffer
 in electronics
\end_layout

\begin_layout Subsection
tristate_float
\begin_inset LatexCommand index
name "tristate\\_float"

\end_inset


\end_layout

\begin_layout Standard
Place a signal on an I/O pin only when enabled, similar to a tristate buffer
 in electronics
\end_layout

\begin_layout Subsection
trivkins
\begin_inset LatexCommand index
name "trivkins"

\end_inset


\end_layout

\begin_layout Standard
There is a 1:1 correspondence between joints and axes.
 Most standard milling machines and lathes use the trivial kinematics module.
\end_layout

\begin_layout Subsection
updown
\begin_inset LatexCommand index
name "updown"

\end_inset


\end_layout

\begin_layout Standard
Counts up or down, with optional limits and wraparound behavior
\end_layout

\begin_layout Subsection
wcomp
\begin_inset LatexCommand index
name "wcomp"

\end_inset


\end_layout

\begin_layout Standard
Window comparator
\end_layout

\begin_layout Subsection
weighted_sum
\begin_inset LatexCommand index
name "weighted\\_sum"

\end_inset


\end_layout

\begin_layout Standard
convert a group of bits to an integer
\end_layout

\begin_layout Subsection
xor2
\begin_inset LatexCommand index
name "xor2"

\end_inset


\end_layout

\begin_layout Standard
Two-input XOR (exclusive OR) gate
\end_layout

\begin_layout Subparagraph
Loading
\end_layout

\begin_layout Subparagraph
Functions
\end_layout

\begin_layout Subparagraph
Pins
\end_layout

\begin_layout Subparagraph
Parameters
\end_layout

\begin_layout Subparagraph
Description
\end_layout

\end_body
\end_document
