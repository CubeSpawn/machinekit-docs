#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Getting Started
\end_layout

\begin_layout Section
Hal Commands
\begin_inset LatexCommand label
name "sec:Hal-Commands"

\end_inset


\end_layout

\begin_layout Standard
More detailed information can be found in the man page for halcmd "man halcmd"
 in a terminal window.
 To see the HAL configuration and check the status of pins and parameters
 use the HAL Configuration window on the Machine menu in AXIS.
 To watch a pin status open the Watch tab and click on each pin you wish
 to watch and it will be added to the watch window.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
HAL Configuration Window
\begin_inset LatexCommand label
name "cap:HAL-Configuration-Window"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/HAL_Configuration.png
	scale 60

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
loadrt
\end_layout

\begin_layout Standard
The command "loadrt" loads a real time HAL component.
 Real time component functions need to be added to a thread to be updated
 at the rate of the thread.
 You cannot load a user space component into the real time space.
\end_layout

\begin_layout Standard
The syntax and an example:
\end_layout

\begin_layout LyX-Code
loadrt <component> <options>
\end_layout

\begin_layout LyX-Code
loadrt mux4 count=1
\end_layout

\begin_layout Subsection
addf
\end_layout

\begin_layout Standard
The command "addf" adds a real time component function to a thread.
 You have to add a function from a HAL real time component to a thread to
 get the function to update at the rate of the thread.
 
\end_layout

\begin_layout Standard
If you used the Stepper Config Wizard to generate your config you will have
 two threads.
\end_layout

\begin_layout Itemize
base-thread (the high-speed thread): this thread handles items that need
 a fast response, like making step pulses, and reading and writing the parallel
 port.
\end_layout

\begin_layout Itemize
servo-thread (the slow-speed thread): this thread handles items that can
 tolerate a slower response, like the motion controller, ClassicLadder,
 and the motion command handler.
\end_layout

\begin_layout Standard
The syntax and an example:
\end_layout

\begin_layout LyX-Code
addf <component> <thread>
\end_layout

\begin_layout LyX-Code
addf mux4 servo-thread
\end_layout

\begin_layout Subsection
loadusr
\end_layout

\begin_layout Standard
The command "loadusr" loads a user space HAL component.
 User space programs are their own separate processes, which optionally
 talk to other HAL components via pins and parameters.
 You cannot load real time components into user space.
\end_layout

\begin_layout Standard
Flags may be one or more of the following:
\end_layout

\begin_layout Description
-W to wait for the component to become ready.
 The component is assumed to have the same name as the first argument of
 the command.
\end_layout

\begin_layout Description
-Wn\InsetSpace ~
<name> to wait for the component, which will have the given <name>.
\end_layout

\begin_layout Description
-w to wait for the program to exit
\end_layout

\begin_layout Description
-i to ignore the program return value (with -w) 
\end_layout

\begin_layout Standard
The syntax and examples:
\end_layout

\begin_layout LyX-Code
loadusr <component> <options>
\end_layout

\begin_layout LyX-Code
loadusr halui
\end_layout

\begin_layout LyX-Code
loadusr -Wn spindle gs2_vfd -n spindle
\end_layout

\begin_layout LyX-Code
in English it means "loadusr wait for name spindle component gs2_vfd name
 spindle."
\newline
the -n spindle is part of the gs2_vfd component not the loadusr
 command.
\end_layout

\begin_layout Subsection
net
\end_layout

\begin_layout Standard
The command "net" creates a "connection" between a signal and and one or
 more pins.
 If the signal does not exist net creates the new signal.
 This replaces the need to use the command newsig.
 The direction indicators "<= and =>" are only to make it easier for humans
 to follow the logic and are not used by the net command.
 
\end_layout

\begin_layout Standard
The syntax and an example:
\end_layout

\begin_layout LyX-Code
net <signal-name> <pin-name> <opt-direction> <opt-pin-name>
\end_layout

\begin_layout LyX-Code
net both-home-y <= parport.0.pin-11-in
\end_layout

\begin_layout Standard
Each signal can only have one source (a HAL "Dir out
\begin_inset Quotes erd
\end_inset

 pin) and as many readers (a HAL "Dir in" pin) as you like.
 In the Dir column of the HAL Configuration window you can see which pins
 are "in" and which are "out".
 The following figure shows the "direction" of the signal from the source,
 through the signal, and then out to the reader(s).
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Signal Direction
\begin_inset LatexCommand label
name "cap:Signal-Direction"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/signal-direction.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This example shows the signal xStep with the source being stepgen.0.out and
 with two readers, parport.0.pin-02-out and parport.0.pin-08-out.
 Basically the value of stepgen.0.out is send to the signal xStep and that
 value is then sent to parport.0.pin-02-out and parport.0.pin-08-out.
\end_layout

\begin_layout LyX-Code
   signal    source            destination          destination
\end_layout

\begin_layout LyX-Code
net xStep stepgen.0.out => parport.0.pin-02-out parport.0.pin-08-out
\end_layout

\begin_layout Standard
Since the signal xStep contains the value of stepgen.0.out (the source) you
 can use the same signal again to send the value to another reader.
 To do this just use the signal with the readers on another line.
\end_layout

\begin_layout LyX-Code
net xStep <= stepgen.0.out => parport.0.pin-02-out
\newline
net xStep => parport.0.pin-08-out
\end_layout

\begin_layout Standard
The so called I/O pins like index-enable do not follow this rule.
\end_layout

\begin_layout Subsection
setp
\begin_inset LatexCommand index
name "setp"

\end_inset


\begin_inset LatexCommand label
name "sub:setp"

\end_inset


\end_layout

\begin_layout Standard
The command "setp" sets the value of a pin or parameter.
 The valid values will depend on the type of the pin or parameter.
 It is an error if the data types do not match.
\end_layout

\begin_layout Standard
Some components have parameters that need to be set before use.
 Parameters can be set before use or while running as needed.
 You cannot use setp on a pin that is connected to a signal.
\end_layout

\begin_layout Standard
The syntax and an example:
\end_layout

\begin_layout LyX-Code
setp <pin/parameter-name> <value>
\end_layout

\begin_layout LyX-Code
setp parport.0.pin-08-out TRUE
\end_layout

\begin_layout Subsection
unlinkp
\end_layout

\begin_layout Standard
The command "unlinkp" unlinks a pin from the connected signal.
 If no signal was connected to the pin prior running the command, nothing
 happens.
\end_layout

\begin_layout Standard
The syntax and an example:
\end_layout

\begin_layout Quote
unlinkp <pin-name>
\end_layout

\begin_layout Quote
unlinkp parport.0.pin-02-out
\end_layout

\begin_layout Subsection
Obsolete Commands
\end_layout

\begin_layout Subsubsection
linksp
\end_layout

\begin_layout Standard
The command "linksp" creates a "connection" between a signal and one pin.
\end_layout

\begin_layout Standard
The syntax and an example:
\end_layout

\begin_layout Quote
linksp <signal-name> <pin-name>
\end_layout

\begin_layout Quote
linksp X-step parport.0.pin-02-out
\end_layout

\begin_layout Standard
The "linksp" command has been superseded by the "net" command.
\end_layout

\begin_layout Subsubsection
linkps
\end_layout

\begin_layout Standard
The command "linkps" creates a "connection" between one pin and one signal.
 It is the same as linksp but the arguments are reversed.
\end_layout

\begin_layout Standard
The syntax and an example:
\end_layout

\begin_layout Quote
linkps <pin-name> <signal-name>
\end_layout

\begin_layout Quote
linkps parport.0.pin-02-out X-Step
\end_layout

\begin_layout Standard
The "linkps" command has been superseded by the "net" command.
\end_layout

\begin_layout Subsubsection
newsig
\end_layout

\begin_layout Standard
the command "newsig" creates a new HAL signal by the name <signame> and
 the data type of <type>.
 Type must be "bit", "s32", "u32" or "float".
 Error if <signame> all ready exists.
\end_layout

\begin_layout Standard
The syntax and an example:
\end_layout

\begin_layout Quote
newsig <signame> <type>
\end_layout

\begin_layout Quote
newsig Xstep bit
\end_layout

\begin_layout Standard
More information can be found in the HAL manual or the man pages for halrun.
\end_layout

\begin_layout Section
Hal Data
\begin_inset LatexCommand label
name "sec:Hal-Data"

\end_inset


\end_layout

\begin_layout Subsection
Bit
\begin_inset LatexCommand index
name "Bit"

\end_inset


\end_layout

\begin_layout Standard
A bit value is an on or off.
\end_layout

\begin_layout Itemize
bit values = true or 1 and false or 0 (True, TRUE, true are all valid)
\end_layout

\begin_layout Subsection
Float
\begin_inset LatexCommand index
name "Float"

\end_inset


\end_layout

\begin_layout Standard
A "float" is a floating point number.
 In other words the decimal point can move as needed.
\end_layout

\begin_layout Itemize
float values = a 32 bit floating point value, with approximately 24 bits
 of resolution and over 200 bits of dynamic range.
\end_layout

\begin_layout Standard
For more information on floating point numbers see:
\end_layout

\begin_layout Standard
\begin_inset LatexCommand url
target "http://en.wikipedia.org/wiki/Floating_point"

\end_inset


\end_layout

\begin_layout Subsection
s32
\begin_inset LatexCommand index
name "s32"

\end_inset


\end_layout

\begin_layout Standard
An "s32" number is a whole number that can have a negative or positive value.
\end_layout

\begin_layout Itemize
s32 values = integer numbers -2147483648 to 2147483647
\end_layout

\begin_layout Subsection
u32
\begin_inset LatexCommand index
name "u32"

\end_inset


\end_layout

\begin_layout Standard
A "u32" number is a whole number that is positive only.
\end_layout

\begin_layout Itemize
u32 values = integer numbers 0 to 4294967295
\end_layout

\begin_layout Section
Hal Files
\end_layout

\begin_layout Standard
If you used the Stepper Config Wizard to generate your config you will have
 up to three HAL files in your config directory.
\end_layout

\begin_layout Itemize
my-mill.hal (if your config is named "my-mill") This file is loaded first
 and should not be changed if you used the Stepper Config Wizard.
\end_layout

\begin_layout Itemize
custom.hal This file is loaded next and before the GUI loads.
 This is where you put your custom HAL commands that you want loaded before
 the GUI is loaded.
 
\end_layout

\begin_layout Itemize
custom_postgui.hal This file is loaded after the GUI loads.
 This is where you put your custom HAL commands that you want loaded after
 the GUI is loaded.
 Any HAL commands that use pyVCP widgets need to be placed here.
 
\end_layout

\begin_layout Section
HAL Components
\end_layout

\begin_layout Standard
Two parameters are automatically added to each HAL component when it is
 created.
 These parameters allow you to scope the execution time of a component.
\end_layout

\begin_layout Quote
.time
\begin_inset LatexCommand index
name "time"

\end_inset


\newline
.tmax
\begin_inset LatexCommand index
name "tmax"

\end_inset


\end_layout

\begin_layout Standard
Time is the number of CPU cycles it took to execute the function.
\end_layout

\begin_layout Standard
Tmax is the maximum number of CPU cycles it took to execute the function.
 Tmax is a read/write parameter so the user can set it to 0 to get rid of
 the first time initialization on the function's execution time.
\end_layout

\begin_layout Section
Logic Components
\end_layout

\begin_layout Standard
Hal contains several real time logic components.
 Logic components follow a "Truth Table" that states what the output is
 for any given input.
 Typically these are bit manipulators and follow electrical logic gate truth
 tables.
\end_layout

\begin_layout Subsection
and2
\end_layout

\begin_layout Standard
The "and2" component is a two input "and" gate.
 The truth table below shows the output based on each combination of input.
\end_layout

\begin_layout Standard
Syntax
\end_layout

\begin_layout Quote
and2 [count=N] or [names=name1[,name2...]]
\end_layout

\begin_layout Standard
Functions
\end_layout

\begin_layout Quote
and2.n
\end_layout

\begin_layout Standard
Pins
\end_layout

\begin_layout Quote
and2.N.in0 (bit, in)
\newline
and2.N.in1 (bit, in)
\newline
and2.N.out (bit, out)
\end_layout

\begin_layout Standard
\align center
Truth Table
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<column alignment="center" valignment="top" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
in0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
in1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
out
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
not
\end_layout

\begin_layout Standard
The "not" component is a bit inverter.
 
\end_layout

\begin_layout Standard
Syntax
\end_layout

\begin_layout Quote
not [count=n] or [names=name1[,name2...]]
\end_layout

\begin_layout Standard
Functions
\end_layout

\begin_layout Quote
not.all
\newline
not.n
\end_layout

\begin_layout Standard
Pins
\end_layout

\begin_layout Quote
not.n.in (bit, in)
\newline
not.n.out (bit, out)
\end_layout

\begin_layout Standard
\align center
Truth Table
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="2">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
in
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
out
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
or2
\end_layout

\begin_layout Standard
The "or2" component is a two input OR gate.
\end_layout

\begin_layout Standard
Syntax
\end_layout

\begin_layout Quote
or2[count=n] or [names=name1[,name2...]]
\end_layout

\begin_layout Standard
Functions
\end_layout

\begin_layout Quote
or2.n
\end_layout

\begin_layout Standard
Pins
\end_layout

\begin_layout Quote
or2.n.in0 (bit, in)
\newline
or2.n.in1 (bit, in)
\newline
or2.n.out (bit, out)
\end_layout

\begin_layout Standard
\align center
Truth Table
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
in0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
in1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
out
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
xor2
\end_layout

\begin_layout Standard
The "xor2" component is a two input XOR (exclusive OR)gate.
\end_layout

\begin_layout Standard
Syntax
\end_layout

\begin_layout Quote
xor2[count=n] or [names=name1[,name2...]]
\end_layout

\begin_layout Standard
Functions
\end_layout

\begin_layout Quote
xor2.n
\end_layout

\begin_layout Standard
Pins
\end_layout

\begin_layout Quote
xor2.n.in0 (bit, in)
\newline
xor2.n.in1 (bit, in)
\newline
xor2.n.out (bit, out)
\end_layout

\begin_layout Standard
\align center
Truth Table
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
in0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
in1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
out
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
True
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
False
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Logic Examples
\end_layout

\begin_layout Standard
An "and2" example connecting two inputs to one output.
\end_layout

\begin_layout Quote
loadrt and2 count=1
\newline
addf and2.0 servo-thread
\newline
net my-sigin1 and2.0.in0 <= parport.0.pin-
11-in
\newline
net my-sigin2 and2.0.in1 <= parport.0.pin-12-in
\newline
net both-on parport.0.pin-14-out
 <= and2.0.out
\end_layout

\begin_layout Standard
In the above example one copy of and2 is loaded into real time space and
 added to the servo thread.
 Next pin 11 of the parallel port is connected to the in0 bit of the and
 gate.
 Next pin 12 is connected to the in1 bit of the and gate.
 Last we connect the and2 out bit to the parallel port pin 14.
 So following the truth table for and2 if pin 11 and pin 12 are on then
 the output pin 14 will be on.
\end_layout

\begin_layout Section
Conversion Components
\end_layout

\begin_layout Subsection
weighted_sum
\end_layout

\begin_layout Standard
The weighted_sum converts a group of bits to an integer.
 The conversion is the sum of the "weights" of the bits that are on plus
 any offset.
 This is similar to a binary coded decimal but with more options.
 The "hold" bit stops processing the input changes so the "sum" will not
 change.
\end_layout

\begin_layout Standard
The following syntax is used to load the weighted_sum component.
\end_layout

\begin_layout LyX-Code
loadrt weighted_sum wsum_sizes=size[,size,...]
\end_layout

\begin_layout Standard
Creates weighted sum groups each with the given number of input bits (size).
\end_layout

\begin_layout Standard
To update the weighted_sum you need to attach process_wsums to a thread.
\end_layout

\begin_layout LyX-Code
addf process_wsums servo-thread
\end_layout

\begin_layout Standard
This updates the weighted_sum component.
\end_layout

\begin_layout Standard
In the following example clipped from the HAL Configuration window in Axis
 the bits "0" and "2" are true and there is no offset.
 The "weight" of 0 is 1 and the "weight" of 2 is 4 so the sum is 5.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard

\end_layout

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
weighted_sum
\begin_inset LatexCommand label
name "fig:weighted_sum"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename images/wsum01.png

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\end_inset


\end_layout

\end_body
\end_document
