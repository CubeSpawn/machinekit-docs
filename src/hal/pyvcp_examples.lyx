#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
VCP Examples
\end_layout

\begin_layout Section
AXIS
\end_layout

\begin_layout Standard
To create a pyVCP panel to use with the AXIS interface that is attached
 to the right of AXIS you need to do the following basic things.
\end_layout

\begin_layout Itemize
Create an .xml file that contains your panel description and put it in your
 config directory.
\end_layout

\begin_layout Itemize
Add the PYVCP entry to the [DISPLAY] section of the ini file with your .xml
 file name.
\end_layout

\begin_layout Itemize
Add the POSTGUI_HALFILE entry to the [HAL] section of the ini file with
 the name of your postgui hal file name.
\end_layout

\begin_layout Itemize
Add the links to HAL pins for your panel in the postgui.hal file to "connect"
 your pyVCP panel to EMC.
\end_layout

\begin_layout Section
Floating
\end_layout

\begin_layout Standard
To create floating pyVCP panels that can be used with any interface you
 need to do the following basic things.
\end_layout

\begin_layout Itemize
Create an .xml file that contains your panel description and put it in your
 config directory.
\end_layout

\begin_layout Itemize
Add a loadusr line to your .hal file to load each panel.
\end_layout

\begin_layout Itemize
Add the links to HAL pins for your panel in the postgui.hal file to "connect"
 your pyVCP panel to EMC.
\end_layout

\begin_layout Standard
The following is an example of a loadusr command to load two pyVCP panels
 and name each one so the connection names in HAL will be known.
\end_layout

\begin_layout Quote
loadusr -Wn btnpanel pyvcp -c btnpanel panel1.xml
\newline
loadusr -Wn sppanel pyvcp
 -c sppanel panel2.xml
\end_layout

\begin_layout Standard
The -Wn makes hal "Wait for name" to be loaded before proceeding.
 The pyvcp -c makes pyVCP name the panel.
\end_layout

\begin_layout Standard
The HAL pins from panel1.xml will be named btnpanel.<pin name>
\end_layout

\begin_layout Standard
The HAL pins from panel2.xml will be named sppanel.<pin name>
\end_layout

\begin_layout Standard
Make sure the loadusr line is before any net's that make use of the pyVCP
 pins.
\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Section
Jog Buttons
\end_layout

\begin_layout Standard
In this example we will create a pyVCP panel with jog buttons for X, Y,
 and Z.
 This configuration will be built upon a Stepconf Wizard generated configuration.
 First we run the Stepconf Wizard and configure our machine, then on the
 Advanced Configuration Options page we make a couple of selections to add
 a blank pyVCP panel as shown in the following figure.
 For this example we named the configuration "pyvcp_xyz" on the Basic Machine
 Information page of the Stepconf Wizard.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
XYZ Wizard Configuration
\begin_inset LatexCommand label
name "cap:XYZ-Wizard-Configuration"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/xyz_ACO.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Stepconf Wizard will create several files and place them in the /emc/configs
/pyvcp_xyz directory.
 If you left the create link checked you will have a link to those files
 on your desktop.
 
\end_layout

\begin_layout Subsection*
Create the Widgets
\end_layout

\begin_layout Standard
Open up the custompanel.xml file by right clicking on it and selecting "open
 with text editor".
 Between the <pyvcp></pyvcp> tags we will add the widgets for our panel.
\end_layout

\begin_layout Standard
Look in the pyVCP Widgets Reference section of the manual for more detailed
 information on each widget.
\end_layout

\begin_layout Standard
In your custompanel.xml file we will add the description of the widgets.
 
\end_layout

\begin_layout Quote
<pyvcp>
\end_layout

\begin_layout Quote
<labelframe text="Jog Buttons">
\newline
<font>("Helvetica",16)</font>
\end_layout

\begin_layout Quote
<!-\SpecialChar \-
- the X jog buttons -\SpecialChar \-
->
\newline
<hbox>
\newline
<relief>RAISED</relief>
\newline
<bd>3</bd>
\newline
<button>
\newline
<font>(
"Helvetica",20)</font>
\newline
<width>3</width>
\newline
<halpin>"x-plus"</halpin>
\newline
<text>"X+"</text>
\newline

</button>
\newline
<button>
\newline
<font>("Helvetica",20)</font>
\newline
<width>3</width>
\newline
<halpin>"x-minus"<
/halpin>
\newline
<text>"X-"</text>
\newline
</button>
\newline
</hbox>
\end_layout

\begin_layout Quote
<!-\SpecialChar \-
- the Y jog buttons -\SpecialChar \-
->
\newline
<hbox>
\newline
<relief>RAISED</relief>
\newline
<bd>3</bd>
\newline
<button>
\newline
<font>(
"Helvetica",20)</font>
\newline
<width>3</width>
\newline
<halpin>"y-plus"</halpin>
\newline
<text>"Y+"</text>
\newline

</button>
\newline
<button>
\newline
<font>("Helvetica",20)</font>
\newline
<width>3</width>
\newline
<halpin>"y-minus"<
/halpin>
\newline
<text>"Y-"</text>
\newline
</button>
\newline
</hbox>
\end_layout

\begin_layout Quote
<!-\SpecialChar \-
- the Z jog buttons -\SpecialChar \-
->
\newline
<hbox>
\newline
<relief>RAISED</relief>
\newline
<bd>3</bd>
\newline
<button>
\newline
<font>(
"Helvetica",20)</font>
\newline
<width>3</width>
\newline
<halpin>"z-plus"</halpin>
\newline
<text>"Z+"</text>
\newline

</button>
\newline
<button>
\newline
<font>("Helvetica",20)</font>
\newline
<width>3</width>
\newline
<halpin>"z-minus"<
/halpin>
\newline
<text>"Z-"</text>
\newline
</button>
\newline
</hbox>
\end_layout

\begin_layout Quote
<!-\SpecialChar \-
- the jog speed slider -\SpecialChar \-
->
\newline
<vbox>
\newline
<relief>RAISED</relief>
\newline
<bd>3</bd>
\newline
<label>
\newline
<text
>"Jog Speed"</text>
\newline
<font>("Helvetica",16)</font>
\newline
</label>
\newline
<scale>
\newline
<font>("Helvetica
",14)</font>
\newline
<halpin>"jog-speed"</halpin>
\newline
<resolution>1</resolution>
\newline
<orient>HORIZO
NTAL</orient>
\newline
<min_>0</min_>
\newline
<max_>80</max_>
\newline
</scale>
\newline
</vbox>
\end_layout

\begin_layout Quote
</labelframe>
\end_layout

\begin_layout Quote
</pyvcp>
\end_layout

\begin_layout Quote
After adding the above you now will have a pyVCP panel that looks like the
 following attached to the right side of AXIS.
 It looks nice but it does not do anything until you "connect" the buttons
 to halui.
 If you get an error when you try and run scroll down to the bottom of the
 pop up window and usually the error is a spelling or syntax error and it
 will be there.
\end_layout

\begin_layout Quote
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Jog Buttons
\begin_inset LatexCommand label
name "cap:Jog-Buttons"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/xyz_buttons.png
	scale 80
	keepAspectRatio

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Make Connections
\end_layout

\begin_layout Standard
To make the connections needed open up your custom_postgui.hal file and add
 the following.
\end_layout

\begin_layout Quote
# connect the X pyVCP buttons
\newline
net my-jogxminus halui.jog.0.minus <= pyvcp.x-minus
\newline
net
 my-jogxplus halui.jog.0.plus <= pyvcp.x-plus
\end_layout

\begin_layout Quote
# connect the Y pyVCP buttons
\newline
net my-jogyminus halui.jog.1.minus <= pyvcp.y-minus
\newline
net
 my-jogyplus halui.jog.1.plus <= pyvcp.y-plus
\end_layout

\begin_layout Quote
# connect the Z pyVCP buttons
\newline
net my-jogzminus halui.jog.2.minus <= pyvcp.z-minus
\newline
net
 my-jogzplus halui.jog.2.plus <= pyvcp.z-plus
\end_layout

\begin_layout Quote
# connect the pyVCP jog speed slider 
\newline
net my-jogspeed halui.jog-speed <= pyvcp.jog-
speed-f
\end_layout

\begin_layout Standard
After resetting the E-Stop and putting it into jog mode and moving the jog
 speed slider in the pyVCP panel to a value greater than zero the pyVCP
 jog buttons should work.
 You can not jog when running a g code file or while paused or while the
 MDI tab is selected.
\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Section
Port Tester
\end_layout

\begin_layout Standard
This example shows you how to make a simple parallel port tester using pyVCP
 and HAL.
\end_layout

\begin_layout Standard
First create the ptest.xml file with the following code to create the panel
 description.
\end_layout

\begin_layout LyX-Code
<!-- Test panel for the parallel port cfg for out -->
\newline
<pyvcp>
\newline
    <hbox>
\newline
 
       <relief>RIDGE</relief>
\newline
        <bd>2</bd>
\newline
        <button>
\newline
        
    <halpin>"btn01"</halpin>
\newline
            <text>"Pin 01"</text>
\newline
        </button>
\newline

        <led>
\newline
            <halpin>"led-01"</halpin>
\newline
            <size>25</size>
\newline

            <on_color>"green"</on_color>
\newline
            <off_color>"red"</off_color>
\newline

       </led>
\newline
    </hbox>
\newline
    <hbox>
\newline
        <relief>RIDGE</relief>
\newline
       
 <bd>2</bd>
\newline
        <button>
\newline
            <halpin>"btn02"</halpin>
\newline
        
    <text>"Pin 02"</text>
\newline
        </button>
\newline
        <led>
\newline
            <halpin>"led-
02"</halpin>
\newline
            <size>25</size>
\newline
            <on_color>"green"</on_color>
\newline

            <off_color>"red"</off_color>
\newline
       </led>
\newline
    </hbox>
\newline
    <hbox>
\newline

        <relief>RIDGE</relief>
\newline
        <bd>2</bd>
\newline
        <label>
\newline
        
    <text>"Pin 10"</text>
\newline
            <font>("Helvetica",14)</font>
\newline
     
   </label>
\newline
        <led>
\newline
            <halpin>"led-10"</halpin>
\newline
          
  <size>25</size>
\newline
            <on_color>"green"</on_color>
\newline
            <off_color>
"red"</off_color>
\newline
        </led>
\newline
    </hbox>
\newline
    <hbox>
\newline
        <relief>RIDGE</relie
f>
\newline
        <bd>2</bd>
\newline
        <label>
\newline
            <text>"Pin 11"</text>
\newline
   
         <font>("Helvetica",14)</font>
\newline
        </label>
\newline
        <led>
\newline
    
        <halpin>"led-11"</halpin>
\newline
            <size>25</size>
\newline
           
 <on_color>"green"</on_color>
\newline
            <off_color>"red"</off_color>
\newline
  
      </led>       
\newline
    </hbox>
\newline
 </pyvcp>
\end_layout

\begin_layout Standard
This will create the following floating panel which contains a couple of
 in pins and a couple of out pins.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Port Tester Panel
\begin_inset LatexCommand label
name "cap:Port-Tester-Panel"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/ptest.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To run the HAL commands that we need to get everything up and running we
 put the following in our ptest.hal file.
\end_layout

\begin_layout LyX-Code
loadrt hal_parport cfg="0x378 out"
\newline
loadusr -Wn ptest pyvcp -c ptest ptest.xml
\newline
loadr
t threads name1=porttest period1=1000000
\newline
addf parport.0.read porttest
\newline
addf parport.0.w
rite porttest
\newline
net pin01 ptest.btn01 parport.0.pin-01-out ptest.led-01
\newline
net pin02
 ptest.btn02 parport.0.pin-02-out ptest.led-02
\newline
net pin10 parport.0.pin-10-in ptest.led-1
0
\newline
net pin11 parport.0.pin-11-in ptest.led-11
\newline
start
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
To run the HAL file we use the following command from a terminal window.
\end_layout

\begin_layout LyX-Code
~$ 
\series bold
halrun -I -f ptest.hal
\end_layout

\begin_layout Standard
The following figure shows what a complete panel might look like.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Port Tester Complete
\begin_inset LatexCommand label
name "cap:Port-Tester-Complete"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/ptest-final.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To add the rest of the parallel port pins just modify the .xml and .hal files.
\end_layout

\begin_layout Standard
To show the pins after running the HAL script use the following command
 at the halcmd prompt:
\end_layout

\begin_layout LyX-Code
halcmd: 
\series bold
show pin
\newline

\series default
Component Pins:
\newline
Owner   Type  Dir         Value  Name
\newline
     2  bit   IN   
       FALSE  parport.0.pin-01-out <== pin01
\newline
     2  bit   IN          FALSE
  parport.0.pin-02-out <== pin02
\newline
     2  bit   IN          FALSE  parport.0.pin-03-ou
t
\newline
     2  bit   IN          FALSE  parport.0.pin-04-out
\newline
     2  bit   IN   
       FALSE  parport.0.pin-05-out
\newline
     2  bit   IN          FALSE  parport.0.pin-06-
out
\newline
     2  bit   IN          FALSE  parport.0.pin-07-out
\newline
     2  bit   IN 
         FALSE  parport.0.pin-08-out
\newline
     2  bit   IN          FALSE  parport.0.pin-0
9-out
\newline
     2  bit   OUT          TRUE  parport.0.pin-10-in ==> pin10
\newline
     2
  bit   OUT         FALSE  parport.0.pin-10-in-not
\newline
     2  bit   OUT      
    TRUE  parport.0.pin-11-in ==> pin11
\newline
     2  bit   OUT         FALSE  parport.0.pi
n-11-in-not
\newline
     2  bit   OUT          TRUE  parport.0.pin-12-in
\newline
     2  bit
   OUT         FALSE  parport.0.pin-12-in-not
\newline
     2  bit   OUT          TRUE
  parport.0.pin-13-in
\newline
     2  bit   OUT         FALSE  parport.0.pin-13-in-not
\newline

     2  bit   IN          FALSE  parport.0.pin-14-out
\newline
     2  bit   OUT   
       TRUE  parport.0.pin-15-in
\newline
     2  bit   OUT         FALSE  parport.0.pin-15-in
-not
\newline
     2  bit   IN          FALSE  parport.0.pin-16-out
\newline
     2  bit   IN
          FALSE  parport.0.pin-17-out
\newline
     4  bit   OUT         FALSE  ptest.btn01
 ==> pin01
\newline
     4  bit   OUT         FALSE  ptest.btn02 ==> pin02
\newline
     4  bit
   IN          FALSE  ptest.led-01 <== pin01
\newline
     4  bit   IN          FALSE
  ptest.led-02 <== pin02
\newline
     4  bit   IN           TRUE  ptest.led-10 <==
 pin10
\newline
     4  bit   IN           TRUE  ptest.led-11 <== pin11
\end_layout

\begin_layout Standard
This will show you what pins are IN and what pins are OUT as well as any
 connections.
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Section
GS2 RPM Meter
\begin_inset LatexCommand label
name "sec:GS2-RPM-Meter"

\end_inset


\end_layout

\begin_layout Standard
The following example uses the Automation Direct GS2 VDF driver and displays
 the RPM and other info in a pyVCP panel.
 This example is based on the GS2 example in the Hardware Examples section
 this manual.
\end_layout

\begin_layout Subsection*
The Panel
\end_layout

\begin_layout Standard
To create the panel we add the following to the .xml file.
\end_layout

\begin_layout Quote
<pyvcp>
\end_layout

\begin_layout Quote
<!-- the RPM meter -->
\newline
<hbox>
\newline
<relief>RAISED</relief>
\newline
<bd>3</bd>
\newline
<meter>
\newline
<halpin>"spi
ndle_rpm"</halpin>
\newline
<text>"Spindle"</text>
\newline
<subtext>"RPM"</subtext>
\newline
<size>200</size>
\newline

<min_>0</min_>
\newline
<max_>3000</max_>
\newline
<majorscale>500</majorscale>
\newline
<minorscale>100</mino
rscale>
\newline
<region1>0,10,"yellow"</region1>
\newline
</meter>
\newline
</hbox>
\end_layout

\begin_layout Quote
<!-- the On Led -->
\newline
<hbox>
\newline
<relief>RAISED</relief>
\newline
<bd>3</bd>
\newline
<vbox>
\newline
<relief>RAISED</
relief>
\newline
<bd>2</bd>
\newline
<label>
\newline
<text>"On"</text>
\newline
<font>("Helvetica",18)</font>
\newline
</label>
\newline
<w
idth>5</width>
\newline
 <hbox>
\newline
<label width=
\begin_inset Quotes erd
\end_inset

2
\begin_inset Quotes erd
\end_inset

/> <!-- used to center the led -->
\newline
<rectled>
\newline
<halpin>"on-led"</halpin>
\newline
<height>"30"
</height>
\newline
<width>"30"</width>
\newline
<on_color>"green"</on_color>
\newline
<off_color>"red"</off_co
lor>
\newline
</rectled>
\newline
</hbox>
\newline
</vbox>
\end_layout

\begin_layout Quote
<!-- the FWD Led -->
\newline
<vbox>
\newline
<relief>RAISED</relief>
\newline
<bd>2</bd>
\newline
<label>
\newline
<text>"FWD"</t
ext>
\newline
<font>("Helvetica",18)</font>
\newline
<width>5</width>
\newline
</label>
\newline
<label width=
\begin_inset Quotes erd
\end_inset

2
\begin_inset Quotes erd
\end_inset

/>
\newline
<rectled>
\newline
<halpin>"fwd-led"</halpin>
\newline
<height>"30"</height>
\newline
<width>"30"</width>
\newline
<on
_color>"green"</on_color>
\newline
<off_color>"red"</off_color>
\newline
</rectled>
\newline
</vbox>
\end_layout

\begin_layout Quote
<!-- the REV Led -->
\newline
<vbox>
\newline
<relief>RAISED</relief>
\newline
<bd>2</bd>
\newline
<label>
\newline
<text>"REV"</t
ext>
\newline
<font>("Helvetica",18)</font>
\newline
<width>5</width>
\newline
</label>
\newline
<label width=
\begin_inset Quotes erd
\end_inset

2
\begin_inset Quotes erd
\end_inset

/>
\newline
<rectled>
\newline
<halpin>"rev-led"</halpin>
\newline
<height>"30"</height>
\newline
<width>"30"</width>
\newline
<on
_color>"red"</on_color>
\newline
<off_color>"green"</off_color>
\newline
</rectled>
\newline
</vbox>
\newline
</hbox>
\newline
</p
yvcp>
\end_layout

\begin_layout Standard
The above gives us a pyVCP panel that looks like the following.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
GS2 Panel
\begin_inset LatexCommand label
name "cap:GS2-Panel"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/gs2_panel.png

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
The Connections
\end_layout

\begin_layout Standard
To make it work we add the following code to the custom_postgui.hal file.
\end_layout

\begin_layout Quote
# display the rpm based on freq * rpm per hz
\newline
loadrt mult2
\newline
addf mult2.0 servo-thread
\newline

setp mult2.0.in1 28.75
\newline
net cypher_speed mult2.0.in0 <= spindle-vfd.frequency-out
\newline
net
 speed_out pyvcp.spindle_rpm <= mult2.0.out 
\end_layout

\begin_layout Quote
# run led
\newline
net gs2-run => pyvcp.on-led
\end_layout

\begin_layout Quote
# fwd led
\newline
net gs2-fwd => pyvcp.fwd-led
\end_layout

\begin_layout Quote
# rev led
\newline
net running-rev spindle-vfd.spindle-rev => pyvcp.rev-led
\end_layout

\begin_layout Standard
Some of the lines might need some explanations.
 The fwd led line uses the signal created in the custom.hal file where as
 the rev led needs to use the spindle-rev bit.
 You can't link the spindle-fwd bit twice so you use the signal that it
 was linked to.
\end_layout

\end_body
\end_document
