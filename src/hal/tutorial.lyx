#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage[plainpages=false,pdfpagelabels,colorlinks=true,linkcolor=blue]{hyperref}
\end_preamble
\language english
\inputencoding default
\font_roman bookman
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\float_placement !htbp
\paperfontsize default
\spacing single
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 5
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Chapter
\begin_inset LatexCommand label
name "cha:HAL-Tutorial"

\end_inset

HAL Tutorial
\end_layout

\begin_layout Section
Introduction
\begin_inset LatexCommand label
name "sec:Tutorial - Intro"

\end_inset


\end_layout

\begin_layout Standard
Configuration moves from theory to device -- HAL device that is.
 For those who have had just a bit of computer programming, this section
 is the "Hello World" of the HAL.
 Halrun can be used to create a working system.
 It is a command line or text file tool for configuration and tuning.
 The following examples illustrate its setup and operation.
 
\end_layout

\begin_layout Subsection*
Notation
\end_layout

\begin_layout Standard
Command line examples are presented in 
\family typewriter
\series bold
bold typewriter
\family default
\series default
 font.
 Responses from the computer will be in 
\family typewriter
typewriter
\family default
 font.
 Text inside square brackets 
\family typewriter
[like-this]
\family default
 is optional.
 Text inside angle brackets 
\family typewriter
<like-this>
\family default
 represents a field that can take on different values, and the adjacent
 paragraph will explain the appropriate values.
 Text items separated by a vertical bar "|"means that one or the other,
 but not both, should be present.
 All command line examples assume that you are in the 
\family typewriter
emc2/
\family default
 directory, and paths will be shown accordingly when needed.
 
\end_layout

\begin_layout Subsection*
Tab-completion
\end_layout

\begin_layout Standard
Your version of halcmd may include tab-completion.
 Instead of completing file names as a shell does, it completes commands
 with HAL identifiers.
 You will have to type enough letters for a unique match.
 Try pressing tab after starting a HAL command:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
loa<TAB>
\series default

\newline
halcmd: 
\series bold
load
\series default

\newline
halcmd: 
\series bold
loadrt
\series default

\newline
halcmd: 
\series bold
loadrt deb<TAB>
\series default

\newline
halcmd: 
\series bold
loadrt debounce
\end_layout

\begin_layout Subsection*
The RTAPI environment
\end_layout

\begin_layout Standard
RTAPI stands for Real Time Application Programming Interface.
 Many HAL components work in realtime, and all HAL components store data
 in shared memory so realtime components can access it.
 Normal Linux does not support realtime programming or the type of shared
 memory that HAL needs.
 Fortunately there are realtime operating systems (RTOS's) that provide
 the necessary extensions to Linux.
 Unfortunately, each RTOS does things a little differently.
\end_layout

\begin_layout Standard
To address these differences, the EMC team came up with RTAPI, which provides
 a consistent way for programs to talk to the RTOS.
 If you are a programmer who wants to work on the internals of EMC, you
 may want to study 
\family typewriter
emc2/src/rtapi/rtapi.h
\family default
 to understand the API.
 But if you are a normal person all you need to know about RTAPI is that
 it (and the RTOS) needs to be loaded into the memory of your computer before
 you do anything with HAL.
\end_layout

\begin_layout Section
A Simple Example
\begin_inset LatexCommand label
name "sec:Tutorial - Simple Example"

\end_inset


\end_layout

\begin_layout Subsection*
Loading a realtime component
\end_layout

\begin_layout Standard
For this tutorial, we are going to assume that you have successfully installed
 the Live CD or compiled the emc2/ source tree and, if necessary, invoked
 the 
\family typewriter
emc-environment
\family default
 script to prepare your shell.
 In that case, all you need to do is load the required RTOS and RTAPI modules
 into memory.
 Just run the following command from a terminal window:
\end_layout

\begin_layout Quote
~$ 
\series bold
cd emc2
\series default

\newline
~/emc2$ 
\series bold
halrun
\newline

\series default
halcmd:
\end_layout

\begin_layout Standard
With the realtime OS and RTAPI loaded, we can move into the first example.
 Notice that the prompt has changed from the shell's "$" to "halcmd:".
 This is because subsequent commands will be interpreted as HAL commands,
 not shell commands.
 
\end_layout

\begin_layout Standard
For the first example, we will use a HAL component called 
\family typewriter
siggen
\family default
, which is a simple signal generator.
 A complete description of the 
\family typewriter
siggen
\family default
 component can be found in Siggen section of the Integrators Manual.
 It is a realtime component, implemented as a Linux kernel module.
 To load 
\family typewriter
siggen
\family default
 use the 
\family typewriter
halcmd loadrt
\family default
 command:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
loadrt siggen
\end_layout

\begin_layout Subsection*
Examining the HAL
\end_layout

\begin_layout Standard
Now that the module is loaded, it is time to introduce 
\family typewriter
halcmd
\family default
, the command line tool used to configure the HAL.
 This tutorial will introduce some halcmd features, for a more complete
 description try 
\family typewriter
man halcmd
\family default
, or see the 
\family typewriter
halcmd
\family default
 reference in section 
\begin_inset LatexCommand ref
reference "sec:Halcmd"

\end_inset

 of this document.
 The first halcmd feature is the show command.
 This command displays information about the current state of the HAL.
 To show all installed components:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show comp
\series default

\newline
Loaded HAL Components:
\newline
ID     Type  Name                  PID       State
\newline
3
       RT     siggen                             ready 
\newline
2       User  halcmd10190
    10190 ready
\end_layout

\begin_layout Standard
Since 
\family typewriter
halcmd
\family default
 itself is a HAL component, it will always show up in the list.
 The number after halcmd in the component list is the process ID.
 It is possible to run more than one copy of halcmd at the same time (in
 different windows for example), so the PID is added to the end of the name
 to make it unique.
 The list also shows the 
\family typewriter
siggen
\family default
 component that we installed in the previous step.
 The "RT" under "Type" indicates that 
\family typewriter
siggen
\family default
 is a realtime component.
\end_layout

\begin_layout Standard
Next, let's see what pins 
\family typewriter
siggen
\family default
 makes available:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show pin
\series default

\newline
Component Pins:
\newline
Owner  Type    Dir    Value      Name 
\newline
         3  float 
   IN             1  siggen.0.amplitude 
\newline
         3  float    OUT         
 0  siggen.0.cosine 
\newline
         3  float    IN             1  siggen.0.frequency
 
\newline
         3  float    IN             0  siggen.0.offset 
\newline
         3  float
    OUT          0  siggen.0.sawtooth
\newline
         3  float    OUT          0 
 siggen.0.sine
\newline
         3  float    OUT          0  siggen.0.square
\newline
         3
  float    OUT          0  siggen.0.triangle
\end_layout

\begin_layout Standard
This command displays all of the pins in the HAL - a complex system could
 have dozens or hundreds of pins.
 But right now there are only eight pins.
 All eight of these pins are floating point, and carry data out of the 
\family typewriter
siggen
\family default
 component.
 Since we have not yet executed the code contained within the component,
 some the pins have a value of zero.
\end_layout

\begin_layout Standard
The next step is to look at parameters:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show param
\series default

\newline
Parameters:
\newline
Owner  Type  Dir    Value      Name
\newline
         3    s32    RO  
          0   siggen.0.update.time
\newline
         3    s32   RW            0   siggen.0.upda
te.tmax
\end_layout

\begin_layout Standard
The show param command shows all the parameters in the HAL.
 Right now each parameter has the default value it was given when the component
 was loaded.
 Note the column labeled 
\family typewriter
Dir
\family default
.
 The parameters labeled 
\family typewriter
-W
\family default
 are writable ones that are never changed by the component itself, instead
 they are meant to be changed by the user to control the component.
 We will see how to do this later.
 Parameters labeled 
\family typewriter
R-
\family default
 are read only parameters.
 They can be changed only by the component.
 Finally, parameter labeled 
\family typewriter
RW
\family default
 are read-write parameters.
 That means that they are changed by the component, but can also be changed
 by the user.
 Note: the parameters 
\family typewriter
siggen.0.update.time
\family default
 and 
\family typewriter
siggen.0.update.tmax
\family default
 are for debugging purposes, and won't be covered in this section.
 
\begin_inset Note Note
status open

\begin_layout Standard
The thread.time and thread.tmax parameters are associated with the thread
 that was created when the component was loaded.
 Once the rewrite is complete, the thread would not have been created at
 this point, so those parameters would not be present.
\end_layout

\begin_layout Standard
SWP: There are no threads created yet, but there are still siggen.0.update.{time,tm
ax} parameters.
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Standard
The thread parameters are owned by component 02, the siggen module.
 This is incorrect, they should be owned by the hal_lib module, because
 the thread itself is no longer owned by siggen, and in fact, if siggen
 is removed, the parameters should stay.
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Standard
Well actually 
\begin_inset Quotes eld
\end_inset

fixing
\begin_inset Quotes erd
\end_inset

 the thread parameters is gonna take longer than I thought.
 So I eliminated them, at least for now.
 When the HAL rewrite is done, I'll put them back.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Most realtime components export one or more functions to actually run the
 realtime code they contain.
 Let's see what function(s) 
\family typewriter
siggen
\family default
 exported:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show funct
\series default

\newline
Exported Functions:
\newline
Owner    CodeAddr   Arg            FP    Users   Name
\newline

 00003   b7f74ac5   b7d0c0b4  YES         0  siggen.0.update
\end_layout

\begin_layout Standard
The siggen component exported a single function.
 It requires floating point.
 It is not currently linked to any threads, so "users" is zero
\begin_inset Foot
status open

\begin_layout Standard
The codeaddr and arg fields were used in development, and should probably
 be removed from the halcmd listing.
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Subsection*
Making realtime code run
\end_layout

\begin_layout Standard
To actually run the code contained in the function 
\family typewriter
siggen.0.update
\family default
, we need a realtime thread.
 The component called 
\family typewriter
threads
\family default
 that is used to create a new thread.
 Lets create a thread called 
\family typewriter
test-thread
\family default
 with a period of 1mS (1000000nS):
\end_layout

\begin_layout Quote
halcmd: 
\series bold
loadrt threads name1=test-thread period1=1000000
\end_layout

\begin_layout Standard
Let's see if that worked:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show thread
\newline

\series default
Realtime Threads:
\newline
       Period      FP    Name                 (Time, Max-Time)
\newline

     999849     YES  test-thread        (       0,              0 )
\end_layout

\begin_layout Standard
It did.
 The period is not exactly 1000000nS because of hardware limitations, but
 we have a thread that runs at approximately the correct rate, and which
 can handle floating point functions.
 The next step is to connect the function to the thread:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
addf siggen.0.update test-thread
\end_layout

\begin_layout Standard
Up till now, we've been using 
\family typewriter
halcmd
\family default
 only to look at the HAL.
 However, this time we used the 
\family typewriter
addf
\family default
 (add function) command to actually change something in the HAL.
 We told 
\family typewriter
halcmd
\family default
 to add the function 
\family typewriter
siggen.0.update
\family default
 to the thread 
\family typewriter
test-thread
\family default
, and if we look at the thread list again, we see that it succeeded:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show thread
\newline

\series default
Realtime Threads:
\newline
       Period    FP    Name                           
 (Time, Max-Time)
\newline
     999849   YES               test-thread     (     
  0,              0 )
\newline
                               1 siggen.0.update
\end_layout

\begin_layout Standard
There is one more step needed before the 
\family typewriter
siggen
\family default
 component starts generating signals.
 When the HAL is first started, the thread(s) are not actually running.
 This is to allow you to completely configure the system before the realtime
 code starts.
 Once you are happy with the configuration, you can start the realtime code
 like this:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
start
\end_layout

\begin_layout Standard
Now the signal generator is running.
 Let's look at its output pins:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show pin
\series default

\newline
Component Pins:
\newline
Owner    Type     Dir                Value   Name
\newline
       
   3    float     IN                        1   siggen.0.amplitude
\newline
       
   3    float     OUT   -0.9406941   siggen.0.cosine
\newline
          3    float  
   IN                        1   siggen.0.frequency
\newline
          3    float  
   IN                        0   siggen.0.offset
\newline
          3    float     OUT
   -0.1164055   siggen.0.sawtooth
\newline
          3    float     OUT      0.379820
   siggen.0.sine
\newline
          3    float     OUT                   -1   siggen.0.square
\newline

          3    float     OUT   -0.7728110  siggen.0.triangle
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show pin
\series default

\newline
Component Pins:
\newline
Owner    Type     Dir                 Value   Name
\newline
      
    3    float     IN                         1   siggen.0.amplitude
\newline
     
     3    float     OUT     0.9958036   siggen.0.cosine
\newline
          3    float
     IN                         1   siggen.0.frequency
\newline
          3    float
     IN                         0   siggen.0.offset
\newline
          3    float  
   OUT     0.9708287   siggen.0.sawtooth
\newline
          3    float     OUT -0.09151597
   siggen.0.sine
\newline
          3    float     OUT                     1   siggen.0.square
\newline

          3    float     OUT     0.9416574  siggen.0.triangle
\end_layout

\begin_layout Standard
We did two 
\family typewriter
show pin
\family default
 commands in quick succession, and you can see that the outputs are no longer
 zero.
 The sine, cosine, sawtooth, and triangle outputs are changing constantly.
 The square output is also working, however it simply switches from +1.0
 to -1.0 every cycle.
\end_layout

\begin_layout Subsection*
Changing Parameters
\end_layout

\begin_layout Standard
The real power of HAL is that you can change things.
 For example, we can use the 
\family typewriter
"setp"
\family default
 command to set the value of a parameter.
 Let's change the amplitude of the signal generator from 1.0 to 5.0:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
setp siggen.0.amplitude 5
\end_layout

\begin_layout Standard
Check the parameters and pins again:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show param
\series default

\newline
Parameters:
\newline
Owner    Type  Dir           Value      Name
\newline
         3    s32
    RO               397   siggen.0.update.time
\newline
         3    s32    RW    
   109100   siggen.0.update.tmax
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show pin
\series default

\newline
Component Pins:
\newline
Owner    Type     Dir                 Value   Name
\newline
      
    3    float     IN                         5   siggen.0.amplitude
\newline
     
     3    float     OUT      -4.179375   siggen.0.cosine
\newline
          3    float
     IN                         1   siggen.0.frequency
\newline
          3    float
     IN                         0   siggen.0.offset
\newline
          3    float  
   OUT     0.9248036   siggen.0.sawtooth
\newline
          3    float     OUT      -2.744599
   siggen.0.sine
\newline
          3    float     OUT                      5   siggen.0.squar
e
\newline
          3    float     OUT      -3.150393  siggen.0.triangle
\end_layout

\begin_layout Standard
Note that the value of parameter 
\family typewriter
siggen.0.amplitude
\family default
 has changed to 5, and that the pins now have larger values.
\end_layout

\begin_layout Subsection*
Saving the HAL configuration
\end_layout

\begin_layout Standard
Most of what we have done with 
\family typewriter
halcmd
\family default
 so far has simply been viewing things with the 
\family typewriter
show
\family default
 command.
 However two of the commands actually changed things.
 As we design more complex systems with HAL, we will use many commands to
 configure things just the way we want them.
 HAL has the memory of an elephant, and will retain that configuration until
 we shut it down.
 But what about next time? We don't want to manually enter a bunch of commands
 every time we want to use the system.
 We can save the configuration of the entire HAL with a single command:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
save
\series default

\newline
# components
\newline
loadrt threads name1=test-thread period1=1000000
\newline
loadrt siggen
\newline
#
 pin aliases
\newline
# signals
\newline
# nets
\newline
# parameter values
\newline
setp siggen.0.update.tmax 14687
\newline
#
 realtime thread/function links
\newline
addf siggen.0.update test-thread
\end_layout

\begin_layout Standard
The output of the 
\family typewriter
save
\family default
 command is a sequence of HAL commands.
 If you start with an "empty" HAL and run all these commands, you will get
 the configuration that existed when the 
\family typewriter
save
\family default
 command was issued.
 To save these commands for later use, we simply redirect the output to
 a file:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
save all saved.hal
\end_layout

\begin_layout Subsection*
Exiting HalRun
\end_layout

\begin_layout Standard
When you're finished with your HAL session type "exit" at the halcmd: prompt.
 Do not simply close the terminal window without shutting down the HAL session.
\end_layout

\begin_layout Quote
halcmd: 
\series bold
exit
\newline

\series default
~/emc2$
\end_layout

\begin_layout Subsection*
Restoring the HAL configuration
\end_layout

\begin_layout Standard
To restore the HAL configuration stored in 
\family typewriter
saved.hal
\family default
, we need to execute all of those HAL commands.
 To do that, we use 
\family typewriter
-f <file name>
\family default
 which reads commands from a file, and 
\family typewriter
-I
\family default
 (upper case i) which shows the halcmd prompt after executing the commands:
\end_layout

\begin_layout Quote
~/emc2$ 
\series bold
halrun -I -f saved.hal
\end_layout

\begin_layout Standard
Notice that there is not a 'start' command in saved.hal.
 It's necessary to issue it again (or edit saved.hal to add it there):
\end_layout

\begin_layout Quote
halcmd: 
\series bold
start
\newline

\series default
halcmd: 
\series bold
exit
\newline

\series default
~/emc2$
\end_layout

\begin_layout Subsection*
Removing HAL from memory
\end_layout

\begin_layout Standard
If an unexpected shut down of a HAL session occurs you might have to unload
 HAL before another session can begin.
 To do this type the following command in a terminal window:
\end_layout

\begin_layout Quote
~/emc2$ 
\series bold
halrun -U
\end_layout

\begin_layout Section
Halmeter
\begin_inset LatexCommand label
name "sec:Tutorial - Halmeter"

\end_inset


\end_layout

\begin_layout Standard
You can build very complex HAL systems without ever using a graphical interface.
 However there is something satisfying about seeing the result of your work.
 The first and simplest GUI tool for the HAL is halmeter.
 It is a very simple program that is the HAL equivalent of the handy Fluke
 multimeter (or Simpson analog meter for the old timers).
\end_layout

\begin_layout Standard
We will use the siggen component again to check out halmeter.
 If you just finished the previous example, then you can load siggen using
 the saved file.
 If not, we can load it just like we did before:
\end_layout

\begin_layout Quote
~/emc2$ 
\series bold
halrun
\newline

\series default
halcmd: 
\series bold
loadrt siggen
\newline

\series default
halcmd: 
\series bold
loadrt threads name1=test-thread period1=1000000
\newline

\series default
halcmd: 
\series bold
addf siggen.0.update test-thread
\newline

\series default
halcmd: 
\series bold
start
\newline

\series default
halcmd: 
\series bold
setp siggen.0.amplitude 5
\end_layout

\begin_layout Subsection*
Starting halmeter
\end_layout

\begin_layout Standard
At this point we have the siggen component loaded and running.
 It's time to start halmeter.
 Since halmeter is a GUI app, X must be running.
\end_layout

\begin_layout Quote
halcmd: 
\series bold
loadusr halmeter
\end_layout

\begin_layout Standard
The first window you will see is the "Select Item to Probe" window.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
HAL Meter Select Window
\begin_inset LatexCommand label
name "cap:HAL-Meter-Select-Window"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halmeter-select.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This dialog has three tabs.
 The first tab displays all of the HAL pins in the system.
 The second one displays all the signals, and the third displays all the
 parameters.
 We would like to look at the pin 
\family typewriter
siggen.0.cosine
\family default
 first, so click on it then click the 'Close' button.
 The probe selection dialog will close, and the meter looks something like
 the following figure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Halmeter
\begin_inset LatexCommand label
name "cap:Halmeter"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halmeter-1.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To change what the meter displays press the "Select" button which brings
 back the "Select Item to Probe" window.
\end_layout

\begin_layout Standard
You should see the value changing as siggen generates its cosine wave.
 Halmeter refreshes its display about 5 times per second.
 
\end_layout

\begin_layout Standard
To shut down halmeter, just click the exit button.
\end_layout

\begin_layout Standard
If you want to look at more than one pin, signal, or parameter at a time,
 you can just start more halmeters.
 The halmeter window was intentionally made very small so you could have
 a lot of them on the screen at once.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clearpage
\end_layout

\end_inset


\end_layout

\begin_layout Section
Stepgen Example
\begin_inset LatexCommand label
name "sec:Tutorial - More Complex"

\end_inset


\end_layout

\begin_layout Standard
Up till now we have only loaded one HAL component.
 But the whole idea behind the HAL is to allow you to load and connect a
 number of simple components to make up a complex system.
 The next example will use two components.
\end_layout

\begin_layout Standard
Before we can begin building this new example, we want to start with a clean
 slate.
 If you just finished one of the previous examples, we need to remove the
 all components and reload the RTAPI and HAL libraries:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
exit
\newline

\series default
~/emc2$ 
\series bold
halrun
\end_layout

\begin_layout Subsection*
Installing the components
\end_layout

\begin_layout Standard
Now we are going to load the step pulse generator component.
 For a detailed description of this component refer to Stepgen section of
 the Integrators Manual.
 For now, we can skip the details, and just run the following commands:
\begin_inset Foot
status open

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset


\backslash

\begin_inset Quotes erd
\end_inset

 at the end of a long line indicates line wrapping (needed for formatting
 this document).
 When entering the commands at the command line, simply skip the 
\begin_inset Quotes eld
\end_inset


\backslash

\begin_inset Quotes erd
\end_inset

 (do not hit enter) and keep typing from the following line.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example we will use the "velocity" control type of stepgen.
 
\end_layout

\begin_layout Quote
halcmd: 
\series bold
loadrt stepgen step_type=0,0 ctrl_type=v,v
\newline

\series default
halcmd: 
\series bold
loadrt siggen
\newline

\series default
halcmd: 
\series bold
loadrt threads name1=fast fp1=0 period1=50000 name2=slow period2=1000000
\end_layout

\begin_layout Standard
The first command loads two step generators, both configured to generate
 stepping type 0.
 The second command loads our old friend siggen, and the third one creates
 two threads, a fast one with a period of 50 micro-seconds and a slow one
 with a period of 1mS.
 The fast thread doesn't support floating point functions.
\end_layout

\begin_layout Standard
As before, we can use 
\family typewriter
halcmd show
\family default
 to take a look at the HAL.
 This time we have a lot more pins and parameters than before:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show pin
\newline

\series default
Component Pins:
\newline
Owner   Type    Dir         Value           Name
\newline
     3  
     float    IN              1        siggen.0.amplitude
\newline
     3       float
    OUT           0        siggen.0.cosine
\newline
     3       float   IN        
      1        siggen.0.frequency
\newline
     3       float    IN              0 
       siggen.0.offset
\newline
     3       float    OUT          0         siggen.0.sawtooth
\newline

     3       float    OUT         0         siggen.0.sine
\newline
     3       float
    OUT          0         siggen.0.square
\newline
     3       float    OUT      
    0         siggen.0.triangle
\newline
     3       float    OUT          0      
   stepgen.0.counts
\newline
     2       bit       OUT       FALSE    stepgen.0.dir
\newline
 
    2       bit       IN          FALSE    stepgen.0.enable
\newline
     2       float
    IN             0         stepgen.0.position-fb
\newline
     2       float    OUT
          0         stepgen.0.step
\newline
     2       bit       OUT       FALSE 
   stepgen.0.velocity-cmd
\newline
     2       s32      OUT          0         stepgen.1.coun
ts
\newline
     2       bit       OUT       FALSE    stepgen.1.dir
\newline
     2       bit
       IN          FALSE    stepgen.1.enable
\newline
     2       float    IN     
        0         stepgen.1.position-fb
\newline
     2      float    OUT         0
         stepgen.1.step
\newline
     2       bit       OUT       FALSE   stepgen.1.velocity-c
md
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show param
\newline

\series default
Parameters:
\newline
Owner   Type  Dir               Value                  Name
\newline
 
    3       s32   RO                        0           siggen.0.update.time
\newline

     3       s32   RW                       0           siggen.0.update.tmax
\newline

     2       u32   RW       00000001           stepgen.0.dirhold
\newline
     2   
    u32   RW       00000001           stepgen.0.dirsetup
\newline
     2       float
  RO                       0           stepgen.0.frequency
\newline
     2       float
  RW                      0           stepgen.0.maxaccel
\newline
     2       float
  RW                      0           stepgen.0.maxvel
\newline
     2       float 
 RW                      1           stepgen.0.position-scale
\newline
     2      
 s32   RO                        0           stepgen.0.rawcounts
\newline
     2   
    u32   RW       00000001           stepgen.0.steplen
\newline
     2       u32  
 RW       00000001           stepgen.0.stepspace
\newline
     2       u32   RW    
   00000001           stepgen.1.dirhold
\newline
     2       u32   RW       00000001
           stepgen.1.dirsetup
\newline
     2       float  RO                      
 0           stepgen.1.frequency
\newline
     2       float  RW                   
   0           stepgen.1.maxaccel
\newline
     2       float  RW                  
    0           stepgen.1.maxvel
\newline
     2       float  RW                   
   1           stepgen.1.position-scale
\newline
     2       s32   RO             
           0           stepgen.1.rawcounts
\newline
     2       u32   RW       00000001
           stepgen.1.steplen
\newline
     2       u32   RW       00000001         
  stepgen.1.stepspace
\newline
     2       s32   RO                        0      
     stepgen.capture-position.time
\newline
     2       s32   RW                  
     0           stepgen.capture-position.tmax
\newline
     2       s32   RO      
                  0           stepgen.make-pulses.time
\newline
     2       s32   RW
                       0           stepgen.make-pulses.tmax
\newline
     2       s32
   RO                        0           stepgen.update-freq.time
\newline
     2  
     s32   RW                       0           stepgen.update-freq.tmax
\end_layout

\begin_layout Subsection*
Connecting pins with signals
\end_layout

\begin_layout Standard
What we have is two step pulse generators, and a signal generator.
 Now it is time to create some HAL signals to connect the two components.
 We are going to pretend that the two step pulse generators are driving
 the X and Y axis of a machine.
 We want to move the table in circles.
 To do this, we will send a cosine signal to the X axis, and a sine signal
 to the Y axis.
 The siggen module creates the sine and cosine, but we need "wires" to connect
 the modules together.
 In the HAL, "wires" are called signals.
 We need to create two of them.
 We can call them anything we want, for this example they will be 
\family typewriter
X-vel
\family default
 and 
\family typewriter
Y-vel
\family default
.
 The signal 
\family typewriter
X-vel
\family default
 is intended to run from the cosine output of the signal generator to the
 velocity input of the first step pulse generator.
 The first step is to connect the signal to the signal generator output.
 To connect a signal to a pin we use the net command.
\end_layout

\begin_layout Quote
halcmd: 
\series bold
net X-vel <= siggen.0.cosine
\end_layout

\begin_layout Standard
To see the effect of the 
\family typewriter
net
\family default
 command, we show the signals again:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show sig
\series default

\newline
Signals:
\newline
Type      Value     Name        (linked to)
\newline
float         0     
      X_vel
\newline
                                    <== siggen.0.cosine
\end_layout

\begin_layout Standard
When a signal is connected to one or more pins, the show command lists the
 pins immediately following the signal name.
 The "arrow" shows the direction of data flow - in this case, data flows
 from pin 
\family typewriter
siggen.0.cosine
\family default
 to signal 
\family typewriter
X-vel
\family default
.
 Now let's connect the 
\family typewriter
X-vel
\family default
 to the velocity input of a step pulse generator:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
net X-vel => stepgen.0.velocity-cmd
\end_layout

\begin_layout Standard
We can also connect up the Y axis signal 
\family typewriter
Y-vel
\family default
.
 It is intended to run from the sine output of the signal generator to the
 input of the second step pulse generator.
 The following command accomplishes in one line what two 
\family typewriter
net
\family default
 commands accomplished for 
\family typewriter
X-vel
\family default
:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
net Y-vel siggen.0.sine => stepgen.1.velocity-cmd
\end_layout

\begin_layout Standard
Now let's take a final look at the signals and the pins connected to them:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show sig
\series default

\newline
Signals:
\newline
Type      Value      Name            (linked to)
\newline
float          
    0     X-vel
\newline
                                                   <== siggen.0.cos
ine
\newline
                                                   ==> stepgen.0.velocity
\newline
float
              0     Y-vel
\newline
                                              
    <== siggen.0.sine
\newline
                                                  ==>
 stepgen.1.velocity
\end_layout

\begin_layout Standard
The 
\family typewriter
show sig
\family default
 command makes it clear exactly how data flows through the HAL.
 For example, the 
\family typewriter
X-vel
\family default
 signal comes from pin 
\family typewriter
siggen.0.cosine
\family default
, and goes to pin 
\family typewriter
stepgen.0.velocity
\family default
-cmd.
\end_layout

\begin_layout Subsection*
Setting up realtime execution - threads and functions
\end_layout

\begin_layout Standard
Thinking about data flowing through "wires" makes pins and signals fairly
 easy to understand.
 Threads and functions are a little more difficult.
 Functions contain the computer instructions that actually get things done.
 Thread are the method used to make those instructions run when they are
 needed.
 First let's look at the functions available to us:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show funct
\newline

\series default
Exported Functions:
\newline
Owner   CodeAddr  Arg               FP   Users  Name
\newline

 00004  d8a3a120  d8bd322c  YES      0     siggen.0.update
\newline
 00003  d8bf45b0
  d8bd30b4   YES      0     stepgen.capture-position
\newline
 00003  d8bf42c0  d8bd30b4
    NO       0     stepgen.make-pulses
\newline
 00003  d8bf46b0  d8bd30b4   YES  
    0     stepgen.update-freq
\end_layout

\begin_layout Standard
In general, you will have to refer to the documentation for each component
 to see what its functions do.
 In this case, the function 
\family typewriter
siggen.0.update
\family default
 is used to update the outputs of the signal generator.
 Every time it is executed, it calculates the values of the sine, cosine,
 triangle, and square outputs.
 To make smooth signals, it needs to run at specific intervals.
 
\end_layout

\begin_layout Standard
The other three functions are related to the step pulse generators:
\end_layout

\begin_layout Standard
The first one, 
\family typewriter
stepgen.capture_position
\family default
, is used for position feedback.
 It captures the value of an internal counter that counts the step pulses
 as they are generated.
 Assuming no missed steps, this counter indicates the position of the motor.
\end_layout

\begin_layout Standard
The main function for the step pulse generator is 
\family typewriter
stepgen.make_pulses
\family default
.
 Every time 
\family typewriter
make_pulses
\family default
 runs it decides if it is time to take a step, and if so sets the outputs
 accordingly.
 For smooth step pulses, it should run as frequently as possible.
 Because it needs to run so fast, 
\family typewriter
make_pulses
\family default
 is highly optimized and performs only a few calculations.
 Unlike the others, it does not need floating point math.
 
\end_layout

\begin_layout Standard
The last function, 
\family typewriter
stepgen.update-freq
\family default
, is responsible for doing scaling and some other calculations that need
 to be performed only when the frequency command changes.
\end_layout

\begin_layout Standard
What this means for our example is that we want to run 
\family typewriter
siggen.0.update
\family default
 at a moderate rate to calculate the sine and cosine values.
 Immediately after we run 
\family typewriter
siggen.0.update
\family default
, we want to run 
\family typewriter
stepgen.update_freq
\family default
 to load the new values into the step pulse generator.
 Finally we need to run 
\family typewriter
stepgen.make_pulses
\family default
 as fast as possible for smooth pulses.
 Because we don't use position feedback, we don't need to run 
\family typewriter
stepgen.capture_position
\family default
 at all.
\end_layout

\begin_layout Standard
We run functions by adding them to threads.
 Each thread runs at a specific rate.
 Let's see what threads we have available:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show thread
\series default

\newline
Realtime Threads:
\newline
         Period   FP   Name  ( Time, Max-Time )
\newline
     988960
  YES  slow    (     0,     0 )
\newline
        49448  NO   fast      (     0,  
   0 )
\end_layout

\begin_layout Standard
The two threads were created when we loaded 
\family typewriter
threads
\family default
.
 The first one, 
\family typewriter
slow
\family default
, runs every millisecond, and is capable of running floating point functions.
 We will use it for s
\family typewriter
iggen.0.update
\family default
 and 
\family typewriter
stepgen.update_freq
\family default
.
 The second thread is 
\family typewriter
fast
\family default
, which runs every 50 microseconds, and does not support floating point.
 We will use it for 
\family typewriter
stepgen.make_pulses
\family default
.
 To connect the functions to the proper thread, we use the 
\family typewriter
addf
\family default
 command.
 We specify the function first, followed by the thread:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
addf siggen.0.update slow
\series default

\newline
halcmd: 
\series bold
addf stepgen.update-freq slow
\series default

\newline
halcmd: 
\series bold
addf stepgen.make-pulses fast
\end_layout

\begin_layout Standard
After we give these commands, we can run the 
\family typewriter
show thread
\family default
 command again to see what happened:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
show thread
\newline

\series default
Realtime Threads:
\newline
   Period       FP       Name                         
   (Time, Max-Time)
\newline
    988960   YES                          slow      
   (       0,              0 )
\newline
                              1 siggen.0.update
\newline

                              2 stepgen.update-freq
\newline
      49448   NO     
                        fast         (       0,              0 )
\newline
       
                      1 stepgen.make-pulses
\end_layout

\begin_layout Standard
Now each thread is followed by the names of the functions, in the order
 in which the functions will run.
\end_layout

\begin_layout Subsection*
Setting parameters
\end_layout

\begin_layout Standard
We are almost ready to start our HAL system.
 However we still need to adjust a few parameters.
 By default, the siggen component generates signals that swing from +1 to
 -1.
 For our example that is fine, we want the table speed to vary from +1 to
 -1 inches per second.
 However the scaling of the step pulse generator isn't quite right.
 By default, it generates an output frequency of 1 step per second with
 an input of 1.000.
 It is unlikely that one step per second will give us one inch per second
 of table movement.
 Let's assume instead that we have a 5 turn per inch leadscrew, connected
 to a 200 step per rev stepper with 10x microstepping.
 So it takes 2000 steps for one revolution of the screw, and 5 revolutions
 to travel one inch.
 that means the overall scaling is 10000 steps per inch.
 We need to multiply the velocity input to the step pulse generator by 10000
 to get the proper output.
 That is exactly what the parameter 
\family typewriter
stepgen.n.velocity-scale
\family default
 is for.
 In this case, both the X and Y axis have the same scaling, so we set the
 scaling parameters for both to 10000:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
setp stepgen.0.position-scale 10000
\newline

\series default
halcmd: 
\series bold
setp stepgen.1.position-scale 10000
\newline

\series default
halcmd: 
\series bold
setp stepgen.0.enable 1
\series default

\newline
halcmd: 
\series bold
setp stepgen.1.enable 1
\end_layout

\begin_layout Standard
This velocity scaling means that when the pin 
\family typewriter
stepgen.0.velocity-cmd
\family default
 is 1.000, the step generator will generate 10000 pulses per second (10KHz).
 With the motor and leadscrew described above, that will result in the axis
 moving at exactly 1.000 inches per second.
 This illustrates a key HAL concept - things like scaling are done at the
 lowest possible level, in this case in the step pulse generator.
 The internal signal 
\family typewriter
X-vel
\family default
 is the velocity of the table in inches per second, and other components
 such as 
\family typewriter
siggen
\family default
 don't know (or care) about the scaling at all.
 If we changed the leadscrew, or motor, we would change only the scaling
 parameter of the step pulse generator.
\end_layout

\begin_layout Subsection*
Run it!
\end_layout

\begin_layout Standard
We now have everything configured and are ready to start it up.
 Just like in the first example, we use the 
\family typewriter
start
\family default
 command:
\end_layout

\begin_layout Quote
halcmd: 
\series bold
start
\end_layout

\begin_layout Standard
Although nothing appears to happen, inside the computer the step pulse generator
 is cranking out step pulses, varying from 10KHz forward to 10KHz reverse
 and back again every second.
 Later in this tutorial we'll see how to bring those internal signals out
 to run motors in the real world, but first we want to look at them and
 see what is happening.
\end_layout

\begin_layout Section
Halscope
\begin_inset LatexCommand label
name "sec:Tutorial - Halscope"

\end_inset


\end_layout

\begin_layout Standard
The previous example generates some very interesting signals.
 But much of what happens is far too fast to see with halmeter.
 To take a closer look at what is going on inside the HAL, we want an oscillosco
pe.
 Fortunately HAL has one, called halscope.
\end_layout

\begin_layout Subsection*
Starting Halscope
\end_layout

\begin_layout Standard
Halscope has two parts - a realtime part that is loaded as a kernel module,
 and a user part that supplies the GUI and display.
 However, you don't need to worry about this, because the userspace portion
 will automatically request that the realtime part be loaded.
\end_layout

\begin_layout Quote
halcmd: 
\series bold
loadusr halscope
\end_layout

\begin_layout Standard
The scope GUI window will open, immediately followed by a "Realtime function
 not linked" dialog that looks like the following figure .
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Realtime function not linked dialog
\begin_inset LatexCommand label
name "cap:Realtime-function-not-linked"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-01.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This dialog is where you set the sampling rate for the oscilloscope.
 For now we want to sample once per millisecond, so click on the 989uS thread
 "slow" and leave the multiplier at 1.
 We will also leave the record length at 4000 samples, so that we can use
 up to four channels at one time.
 When you select a thread and then click "OK", the dialog disappears, and
 the scope window looks something like the following figure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Initial scope window
\begin_inset LatexCommand label
name "cap:Initial-scope-window"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-02.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clearpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Hooking up the scope probes
\end_layout

\begin_layout Standard
At this point, Halscope is ready to use.
 We have already selected a sample rate and record length, so the next step
 is to decide what to look at.
 This is equivalent to hooking "virtual scope probes" to the HAL.
 Halscope has 16 channels, but the number you can use at any one time depends
 on the record length - more channels means shorter records, since the memory
 available for the record is fixed at approximately 16,000 samples.
\end_layout

\begin_layout Standard
The channel buttons run across the bottom of the halscope screen.
 Click button "1", and you will see the "Select Channel Source" dialog as
 shown in the following figure.
 This dialog is very similar to the one used by Halmeter.
 We would like to look at the signals we defined earlier, so we click on
 the "Signals" tab, and the dialog displays all of the signals in the HAL
 (only two for this example).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Select Channel Source
\begin_inset LatexCommand label
name "cap:Select-Channel-Source"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-03.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To choose a signal, just click on it.
 In this case, we want channel 1 to display the signal "X-vel".
 Click on the Signals tab then click on "X-vel" and the dialog closes and
 the channel is now selected.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Select Signal
\begin_inset LatexCommand label
name "cap:Select-Signal"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-04.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The channel 1 button is pressed in, and channel number 1 and the name "X-vel"
 appear below the row of buttons.
 That display always indicates the selected channel - you can have many
 channels on the screen, but the selected one is highlighted, and the various
 controls like vertical position and scale always work on the selected one.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Halscope
\begin_inset LatexCommand label
name "cap:HALScope"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-05.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To add a signal to channel 2, click the "2" button.
 When the dialog pops up, click the "Signals" tab, then click on "Y-vel".
 We also want to look at the square and triangle wave outputs.
 There are no signals connected to those pins, so we use the "Pins" tab
 instead.
 For channel 3, select "siggen.0.triangle" and for channel 4, select "siggen.0.squar
e".
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clearpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Capturing our first waveforms
\end_layout

\begin_layout Standard
Now that we have several probes hooked to the HAL, it's time to capture
 some waveforms.
 To start the scope, click the "Normal" button in the "Run Mode" section
 of the screen (upper right).
 Since we have a 4000 sample record length, and are acquiring 1000 samples
 per second, it will take halscope about 2 seconds to fill half of its buffer.
 During that time a progress bar just above the main screen will show the
 buffer filling.
 Once the buffer is half full, the scope waits for a trigger.
 Since we haven't configured one yet, it will wait forever.
 To manually trigger it, click the "Force" button in the "Trigger" section
 at the top right.
 You should see the remainder of the buffer fill, then the screen will display
 the captured waveforms.
 The result will look something like the following figure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Captured Waveforms
\begin_inset LatexCommand label
name "cap:Captured-Waveforms"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-06.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The "Selected Channel" box at the bottom tells you that the purple trace
 is the currently selected one, channel 4, which is displaying the value
 of the pin "siggen.0.square".
 Try clicking channel buttons 1 through 3 to highlight the other three traces.
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clearpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Vertical Adjustments
\end_layout

\begin_layout Standard
The traces are rather hard to distinguish since all four are on top of each
 other.
 To fix this, we use the "Vertical" controls in the box to the right of
 the screen.
 These controls act on the currently selected channel.
 When adjusting the gain, notice that it covers a huge range - unlike a
 real scope, this one can display signals ranging from very tiny (pico-units)
 to very large (Tera-units).
 The position control moves the displayed trace up and down over the height
 of the screen only.
 For larger adjustments the offset button should be used (see the halscope
 reference in section 
\begin_inset LatexCommand ref
reference "sec:Halscope"

\end_inset

 for details).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Vertical Adjustment
\begin_inset LatexCommand label
name "cap:Vertical-Adjustment"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-07.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Triggering
\end_layout

\begin_layout Standard
Using the "Force" button is a rather unsatisfying way to trigger the scope.
 To set up real triggering, click on the "Source" button at the bottom right.
 It will pop up the "Trigger Source" dialog, which is simply a list of all
 the probes that are currently connected.
 Select a probe to use for triggering by clicking on it.
 For this example we will use channel 3, the triangle wave as shown in the
 following figure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Trigger Source Dialog
\begin_inset LatexCommand label
name "cap:Trigger-Source-Dialog"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-08.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
After setting the trigger source, you can adjust the trigger level and trigger
 position using the sliders in the "Trigger" box along the right edge.
 The level can be adjusted from the top to the bottom of the screen, and
 is displayed below the sliders.
 The position is the location of the trigger point within the overall record.
 With the slider all the way down, the trigger point is at the end of the
 record, and halscope displays what happened before the trigger point.
 When the slider is all the way up, the trigger point is at the beginning
 of the record, displaying what happened after it was triggered.
 The trigger point is visible as a vertical line in the progress box above
 the screen.
 The trigger polarity can be changed by clicking the button just below the
 trigger level display.
 
\end_layout

\begin_layout Standard
Now that we have adjusted the vertical controls and triggering, the scope
 display looks something like the following figure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Waveforms with Triggering
\begin_inset LatexCommand label
name "cap:Waveforms-with-Triggering"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-09.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clearpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Horizontal Adjustments
\end_layout

\begin_layout Standard
To look closely at part of a waveform, you can use the zoom slider at the
 top of the screen to expand the waveforms horizontally, and the position
 slider to determine which part of the zoomed waveform is visible.
 However, sometimes simply expanding the waveforms isn't enough and you
 need to increase the sampling rate.
 For example, we would like to look at the actual step pulses that are being
 generated in our example.
 Since the step pulses may be only 50uS long, sampling at 1KHz isn't fast
 enough.
 To change the sample rate, click on the button that displays the number
 of samples and sample rate to bring up the "Select Sample Rate" dialog,
 figure .
 For this example, we will click on the 50uS thread, "fast", which gives
 us a sample rate of about 20KHz.
 Now instead of displaying about 4 seconds worth of data, one record is
 4000 samples at 20KHz, or about 0.20 seconds.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Sample Rate Dialog
\begin_inset LatexCommand label
name "cap:Sample-Rate-Dialog"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-10.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clearpage
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
More Channels
\end_layout

\begin_layout Standard
Now let's look at the step pulses.
 Halscope has 16 channels, but for this example we are using only 4 at a
 time.
 Before we select any more channels, we need to turn off a couple.
 Click on the channel 2 button, then click the "Chan Off" button at the
 bottom of the "Vertical" box.
 Then click on channel 3, turn if off, and do the same for channel 4.
 Even though the channels are turned off, they still remember what they
 are connected to, and in fact we will continue to use channel 3 as the
 trigger source.
 To add new channels, select channel 5, and choose pin "stepgen.0.dir", then
 channel 6, and select "stepgen.0.step".
 Then click run mode "Normal" to start the scope, and adjust the horizontal
 zoom to 5mS per division.
 You should see the step pulses slow down as the velocity command (channel
 1) approaches zero, then the direction pin changes state and the step pulses
 speed up again.
 You might want to increase the gain on channel 1 to about 20m per division
 to better see the change in the velocity command.
 The result should look like the following figure.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Step Pulses
\begin_inset LatexCommand label
name "cap:Step-Pulses"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/halscope-11.png
	scale 80

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
More samples
\end_layout

\begin_layout Standard
If you want to record more samples at once, restart realtime and load halscope
 with a numeric argument which indicates the number of samples you want
 to capture, such as
\end_layout

\begin_layout LyX-Code
halcmd: 
\series bold
loadusr halscope 80000
\end_layout

\begin_layout Standard
if the 
\family typewriter
scope_rt
\family default
 component was not already loaded, halscope will load it and request 80000
 total samples, so that when sampling 4 channels at a time there will be
 20000 samples per channel.
 (If 
\family typewriter
scope_rt
\family default
 was already loaded, the numeric argument to halscope will have no effect)
\end_layout

\end_body
\end_document
