#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
HAL Examples
\end_layout

\begin_layout Standard
All of these examples assume you are starting with a stepconf based configuratio
n and have two threads base-thread and servo-thread.
 The stepconf wizard will create an empty custom.hal and a custom_postgui.hal
 file.
 The custom.hal file will be loaded after the configuration hal file and
 the custom_postgui.hal file is loaded after the GUI has been loaded.
 
\end_layout

\begin_layout Section
Manual Toolchange
\end_layout

\begin_layout Standard
In this example it is assumed that your "rolling your own" configuration
 and wish to add the HAL Manual Toolchange window.
 The HAL Manual Toolchange is primarily useful if you have presettable tools
 and you store the offsets in the tool table.
 If you need to touch off for each tool change then it is best just to split
 up your g code.
 To use the HAL Manual Toolchange window you basically have to load the
 hal manualtoolchange component then send the iocontrol "tool change" to
 the hal manualtoolchange "change" and send the hal manualtoolchange "changed"
 back to the iocontrol "tool changed".
\end_layout

\begin_layout Standard
This is an example of 
\series bold
with
\series default
 the HAL Manual Toolchange from the stepconf wizard
\end_layout

\begin_layout LyX-Code
loadusr -W hal_manualtoolchange 
\end_layout

\begin_layout LyX-Code
net tool-change iocontrol.0.tool-change => hal_manualtoolchange.change 
\end_layout

\begin_layout LyX-Code
net tool-changed iocontrol.0.tool-changed <= hal_manualtoolchange.changed 
\end_layout

\begin_layout LyX-Code
net tool-number iocontrol.0.tool-prep-number => hal_manualtoolchange.number
 
\end_layout

\begin_layout LyX-Code
net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
\end_layout

\begin_layout Standard
This is an example of 
\series bold
without
\series default
 the HAL Manual Toolchange from the stepconf wizard
\end_layout

\begin_layout LyX-Code
net tool-number <= iocontrol.0.tool-prep-number
\end_layout

\begin_layout LyX-Code
net tool-change-loopback iocontrol.0.tool.-change => iocontrol.0.tool-changed
\end_layout

\begin_layout LyX-Code
net tool-prepare-loopback iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
\end_layout

\begin_layout Section
Compute Velocity
\end_layout

\begin_layout Standard
This example uses "ddt", "mult2" and "abs" to compute the velocity of a
 single axis.
 For more information on the real time components see the man pages or the
 Realtime Components section (
\begin_inset LatexCommand ref
reference "sec:Realtime-Components"

\end_inset

).
\end_layout

\begin_layout Standard
The first thing is to check your configuration to make sure you are not
 using any of the real time components all ready.
 You can do this by opening up the HAL Configuration window and look for
 the components in the pin section.
 If you are then find the .hal file that they are being loaded in and increase
 the counts and adjust the instance to the correct value.
 Add the following to your custom.hal file.
 
\end_layout

\begin_layout Standard
Load the realtime components.
 
\end_layout

\begin_layout Quote
loadrt ddt count=1
\newline
loadrt mult2 count =1
\newline
loadrt abs count=1
\end_layout

\begin_layout Standard
Add the functions to a thread so it will get updated.
\end_layout

\begin_layout Quote
addf ddt.0 servo-thread
\newline
addf mult2.0 servo-thread
\newline
addf abs.0 servo-thread
\end_layout

\begin_layout Standard
Make the connections.
\end_layout

\begin_layout Quote
setp mult2.in1 60
\newline
net xpos-cmd ddt.0.in
\newline
net X-IPS mult2.0.in0 <= ddt.0.out
\newline
net X-ABS
 abs.0.in <= mult2.0.out
\newline
net X-IPM abs.0.out
\end_layout

\begin_layout Standard
In this last section we are setting the mult2.0.in1 to 60 to convert the inch
 per second to inch per minute that we get from the ddt.0.out.
 
\end_layout

\begin_layout Standard
The xpos-cmd sends the comanded position to the ddt.0.in.
 The ddt computes the derivative of the change of the input.
 
\end_layout

\begin_layout Standard
The ddt2.0.out is multiplyed by 60 to give IPM.
 
\end_layout

\begin_layout Standard
The mult2.0.out is sent to the abs to get the absolute value.
 
\end_layout

\begin_layout Standard
The following figure shows the result when the X axis is moving at 15 IPM
 in the minus direction.
 Notice that we can get the absolute value from either the abs.0.out pin or
 the X-IPM signal.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Velocity Example
\begin_inset LatexCommand label
name "cap:Velocity-Example"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/velocity-01.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\newpage

\end_layout

\begin_layout Section
Soft Start
\end_layout

\begin_layout Standard
This example shows how the HAL components "lowpass", "limit2" or "limit3"
 can be used to limit how fast a signal changes.
 
\end_layout

\begin_layout Standard
In this example we have a servo motor driving a lathe spindle.
 If we just used the commanded spindle speeds on the servo it will try and
 go from present speed to commanded speed as fast as it can.
 This could cause a problem or damage the drive.
 To slow the rate of change we can send the motion.spindle-speed-out through
 a limiter before the PID, so that the PID command value varies slowly.
 
\end_layout

\begin_layout Standard
Three built-in components that limit a signal are:
\end_layout

\begin_layout Description
limit2 limits the range and first derivative of a signal.
 
\end_layout

\begin_layout Description
limit3 limits the range, first and second derivatives of a signal.
 
\end_layout

\begin_layout Description
lowpass uses an exponentially-weighted moving average to track an input
 signal.
 
\end_layout

\begin_layout Standard
To find more information on these HAL components check the man pages.
\end_layout

\begin_layout Standard
Place the following in a text file called softstart.hal.
 If you're not familiar with Linux place the file in your home directory.
\end_layout

\begin_layout Quote
##############################
\newline
loadrt threads period1=1000000 name1=thread
 
\newline
loadrt siggen 
\newline
loadrt lowpass 
\newline
loadrt limit2 
\newline
loadrt limit3 
\newline
net square siggen.0.squa
re => lowpass.0.in limit2.0.in limit3.0.in 
\newline
net lowpass <= lowpass.0.out 
\newline
net limit2
 <= limit2.0.out 
\newline
net limit3 <= limit3.0.out 
\newline
setp siggen.0.frequency .1 
\newline
setp lowpass.0.gai
n .01 
\newline
setp limit2.0.maxv 2 
\newline
setp limit3.0.maxv 2 
\newline
setp limit3.0.maxa 10 
\newline
addf siggen.0.updat
e thread 
\newline
addf lowpass.0 thread 
\newline
addf limit2.0 thread 
\newline
addf limit3.0 thread 
\newline
start
 
\newline
loadusr halscope
\newline
##############################
\end_layout

\begin_layout Standard
Open a terminal window and run the file with the following command.
\end_layout

\begin_layout Quote
halrun -I softstart.hal
\end_layout

\begin_layout Standard
When the HAL Oscilloscope first starts up click "OK" to accept the default
 thread.
 
\end_layout

\begin_layout Standard
Next you have to add the signals to the channels.
 Click on channel 1 then select "square" from the Signals tab.
 Repeat for channels 2-4 and add lowpass, limit2, and limit3.
\end_layout

\begin_layout Standard
Next to set up a trigger signal click on the Source None button and select
 square.
 The button will change to Source Chan 1.
\end_layout

\begin_layout Standard
Next click on Single in the Run Mode radio buttons box.
 This will start a run and when it finishes you will see your traces.
\end_layout

\begin_layout Standard
To separate the signals so you can see them better click on a channel then
 use the Pos slider in the Vertical box to set the positions.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Standard
\begin_inset Caption

\begin_layout Standard
Softstart
\begin_inset LatexCommand label
name "cap:Softstart"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/softstart-scope.png
	scale 70

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
To see the effect of changing the set point values of any of the components
 you can change them in the terminal window.
 To see what different gain settings do for lowpass just type the following
 in the terminal window and try different settings.
\end_layout

\begin_layout Quote
setp lowpass.0.gain .01
\end_layout

\begin_layout Standard
After changing a setting run the oscilloscope again to see the change.
\end_layout

\begin_layout Standard
When you're finished type "exit" in the terminal window to shut down halrun
 and close the halscope.
 Don't close the terminal window with halrun running as it might leave some
 things in memory that could prevent EMC from loading.
\end_layout

\begin_layout Standard
For more information on HalScope see the HAL manual.
\end_layout

\end_body
\end_document
