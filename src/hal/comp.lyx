#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage[plainpages=false,pdfpagelabels,colorlinks=true,linkcolor=blue]{hyperref}
\end_preamble
\language english
\inputencoding default
\font_roman bookman
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\float_placement !htbp
\paperfontsize default
\spacing single
\papersize letterpaper
\use_geometry true
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 3
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter

\emph on
comp
\emph default
: a tool for creating HAL modules
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Writing a HAL component can be a tedious process, most of it in setup calls
 to 
\family typewriter
rtapi_
\family default
 and 
\family typewriter
hal_
\family default
 functions and associated error checking.
 
\emph on
comp
\emph default
 will write all this code for you, automatically.
\end_layout

\begin_layout Standard
Compiling a HAL component is also much easier when using 
\emph on
comp
\emph default
, whether the component is part of the emc2 source tree, or outside it.
\end_layout

\begin_layout Standard
For instance, the "ddt" portion of 
\family typewriter
blocks
\family default
 is around 80 lines of code.
 The equivalent component is very short when written using the 
\emph on
comp
\emph default
 preprocessor:
\end_layout

\begin_layout LyX-Code
component ddt "Compute the derivative of the input function";
\newline
pin in float
 in;
\newline
pin out float out;
\newline
variable float old;
\newline
function _;
\newline
license "GPL";
\newline
;;
\newline
float
 tmp = in;
\newline
out = (tmp - old) / fperiod;
\newline
old = tmp;
\end_layout

\begin_layout Standard
and it can be compiled and installed very easily: by simply placing 
\family typewriter
ddt.comp
\family default
 in 
\family typewriter
src/hal/components
\family default
 and running
\family typewriter
 "make
\family default
", or by placing it anywhere on the system and running 
\family typewriter
comp --install ddt.comp
\end_layout

\begin_layout Section
Definitions
\end_layout

\begin_layout Description
component A component is a single real-time module, which is loaded with
 
\family typewriter
halcmd loadrt
\family default
.
 One 
\family typewriter
.comp
\family default
 file specifies one component.
\end_layout

\begin_layout Description
instance A component can have zero or more instances.
 Each instance of a component is created equal (they all have the same pins,
 parameters, functions, and data) but behave independently when their pins,
 parameters, and data have different values.
\end_layout

\begin_layout Description
singleton It is possible for a component to be a "singleton", in which case
 exactly one instance is created.
 It seldom makes sense to write a 
\family typewriter
singleton
\family default
 component, unless there can literally only be a single object of that kind
 in the system (for instance, a component whose purpose is to provide a
 pin with the current UNIX time, or a hardware driver for the internal PC
 speaker)
\end_layout

\begin_layout Section
Instance creation
\end_layout

\begin_layout Standard
For a singleton, the one instance is created when the component is loaded.
\end_layout

\begin_layout Standard
For a non-singleton, the 
\family typewriter
"count
\family default
" module parameter determines how many numbered instances are created.
\end_layout

\begin_layout Section
Parameters
\end_layout

\begin_layout Standard
Comp's are passed the 
\family typewriter
"period"
\family default
 parameter which is the time in nanoseconds of the last period to execute
 the comp.
 This can be useful in comps that need the timing information.
 
\end_layout

\begin_layout Section
Syntax
\end_layout

\begin_layout Standard
A 
\family typewriter
.comp
\family default
 file consists of a number of declarations, followed by 
\family typewriter
;;
\family default
 on a line of its own, followed by C code implementing the module's functions.
\end_layout

\begin_layout Standard
Declarations include:
\end_layout

\begin_layout Itemize

\family typewriter
component
\family default
 
\family typewriter
\emph on
HALNAME
\family default
\emph default
 
\family typewriter
\emph on
(DOC
\emph default
);
\end_layout

\begin_layout Itemize

\family typewriter
pin
\family default
 
\family typewriter
\emph on
PINDIRECTION
\family default
\emph default
 
\family typewriter
\emph on
TYPE
\family default
\emph default
 
\family typewriter
\emph on
HALNAME
\family default
\emph default
 
\family typewriter
([
\emph on
SIZE
\emph default
]|[
\emph on
MAXSIZE
\family default
\emph default
 
\family typewriter
:
\family default
 
\family typewriter
\emph on
CONDSIZE]
\emph default
) (if
\family default
 
\family typewriter
\emph on
CONDITION
\emph default
) (=
\family default
 
\family typewriter
\emph on
STARTVALUE
\emph default
) (
\emph on
DOC
\emph default
);
\end_layout

\begin_layout Itemize

\family typewriter
param
\family default
 
\family typewriter
\emph on
PARAMDIRECTION
\family default
\emph default
 
\family typewriter
\emph on
TYPE
\family default
\emph default
 
\family typewriter
\emph on
HALNAME
\family default
\emph default
 
\family typewriter
([
\emph on
SIZE
\emph default
]|[
\emph on
MAXSIZE
\family default
\emph default
 
\family typewriter
:
\family default
 
\family typewriter
\emph on
CONDSIZE]
\emph default
) (if
\family default
 
\family typewriter
\emph on
CONDITION)
\family default
\emph default
 
\family typewriter
(=
\family default
 
\family typewriter
\emph on
STARTVALUE
\emph default
) (
\emph on
DOC
\emph default
) ;
\end_layout

\begin_layout Itemize

\family typewriter
function
\family default
 
\family typewriter
\emph on
HALNAME
\family default
\emph default
 
\family typewriter
(fp | nofp) (
\emph on
DOC
\emph default
);
\end_layout

\begin_layout Itemize

\family typewriter
option
\family default
 
\family typewriter
\emph on
OPT
\family default
\emph default
 
\family typewriter
(
\emph on
VALUE
\emph default
);
\end_layout

\begin_layout Itemize

\family typewriter
variable
\family default
 
\family typewriter
\emph on
CTYPE NAME
\family default
\emph default
 
\family typewriter
([
\emph on
SIZE
\emph default
]);
\end_layout

\begin_layout Itemize

\family typewriter
description
\family default
 
\family typewriter
\emph on
DOC
\emph default
;
\end_layout

\begin_layout Itemize

\family typewriter
see_also
\family default
 
\family typewriter
\emph on
DOC
\emph default
;
\end_layout

\begin_layout Itemize

\family typewriter
license
\family default
 
\family typewriter
\emph on
LICENSE
\emph default
;
\end_layout

\begin_layout Itemize

\family typewriter
author
\family default
 
\family typewriter
\emph on
AUTHOR
\emph default
;
\end_layout

\begin_layout Standard
Parentheses indicate optional items.
 A vertical bar indicates alternatives.
 Words in 
\emph on
CAPITALS
\emph default
 indicate variable text, as follows:
\end_layout

\begin_layout Description
HALNAME An identifier.
\end_layout

\begin_deeper
\begin_layout Standard
When used to create a HAL identifier, any underscores are replaced with
 dashes, and any trailing dash or period is removed, so that "this_name_"
 will be turned into "this-name", and if the name is "
\family typewriter
_
\family default
", then a trailing period is removed as well, so that "
\family typewriter
function _
\family default
" gives a HAL function name like 
\family typewriter
component.<num>
\family default
 instead of 
\family typewriter
component.<num>.
\end_layout

\begin_layout Standard
If present, the prefix 
\family typewriter
hal_
\family default
 is removed from the beginning of the component name when creating pins,
 parameters and functions.
\end_layout

\begin_layout Standard
In the HAL identifier for a pin or parameter, # denotes an array item, and
 must be used in conjunction with a 
\family typewriter
[SIZE]
\family default
 declaration.
 The hash marks are replaced with a 0-padded number with the same length
 as the number of # characters.
\end_layout

\begin_layout Standard
When used to create a C identifier, the following changes are applied to
 the HALNAME:
\end_layout

\begin_layout Enumerate
Any # characters, and any ".", "_" or "-" characters immediately before them,
 are removed.
\end_layout

\begin_layout Enumerate
Any remaining "." and "-" characters are replaced with "_"
\end_layout

\begin_layout Enumerate
Repeated "_" characters are changed to a single "_" character.
\end_layout

\begin_layout Standard
A trailing _ is retained, so that HAL identifiers which would otherwise
 collide with reserved names or keywords (e.g., 'min') can be used.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features>
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" width="0">
<column alignment="center" valignment="top" leftline="true" rightline="true" width="0">
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
HALNAME
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
C Identifier
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
HAL Identifier
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x_y_z
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x_y_z
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x-y-z
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x-y.z
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x_y_z
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x-y.z
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x_y_z_
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x_y_z_
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x-y-z
\end_layout

\end_inset
</cell>
</row>
<row topline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x.##.y
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x_y(MM)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x.MM.z
\end_layout

\end_inset
</cell>
</row>
<row topline="true" bottomline="true">
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x.##
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x(MM)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Standard
x.MM
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_deeper
\begin_layout Description
if\InsetSpace ~
CONDITION An expression involving the variable 
\emph on
personality
\emph default
 which is nonzero when the pin or parameter should be created
\end_layout

\begin_layout Description
SIZE A number that gives the size of an array.
 The array items are numbered from 0 to 
\emph on
SIZE
\emph default
-1.
\end_layout

\begin_layout Description
MAXSIZE\InsetSpace ~
:\InsetSpace ~
CONDSIZE A number that gives the maximum size of the array followed
 by an expression involving the variable 
\emph on
personality
\emph default
 and which always evaluates to less than 
\emph on
MAXSIZE
\emph default
.
 When the array is created its size will be 
\emph on
CONDSIZE
\emph default
.
\end_layout

\begin_layout Description
DOC A string that documents the item.
 String can be a C-style "double quoted" string, like 
\family typewriter
"Selects the desired edge: TRUE means falling, FALSE means rising"
\family default
 or a Python-style "triple quoted" string, which may include embedded newlines
 and quote characters, such as:
\end_layout

\begin_deeper
\begin_layout Quote

\family typewriter
param rw bit zot=TRUE
\newline
"""The effect of this parameter, also known as "the
 orb of zot",
\newline
will require at least two paragraphs to explain.
\newline

\newline
Hopefully these
 paragraphs have allowed you to understand "zot" 
\newline
better.""";
\end_layout

\begin_layout Standard
The documentation string is in "groff -man" format.
 For more information on this markup format, see 
\family typewriter
groff_man(7)
\family default
.
 Remember that comp interprets backslash escapes in strings, so for instance
 to set the italic font for the word 
\emph on
example
\emph default
, write 
\family typewriter
"
\backslash

\backslash
fIexample
\backslash

\backslash
fB"
\family default
.
\end_layout

\end_deeper
\begin_layout Description
TYPE One of the HAL types: 
\family typewriter
bit
\family default
, 
\family typewriter
signed
\family default
, 
\family typewriter
unsigned
\family default
, or 
\family typewriter
float
\family default
.
 The old names 
\family typewriter
s32
\family default
 and 
\family typewriter
u32
\family default
 may also be used, but 
\family typewriter
signed
\family default
 and 
\family typewriter
unsigned
\family default
 are preferred.
\end_layout

\begin_layout Description
PINDIRECTION One of the following: 
\family typewriter
in
\family default
, 
\family typewriter
out
\family default
, or 
\family typewriter
io
\family default
.
 A component sets a value for an 
\family typewriter
out
\family default
 pin, it reads a value from an 
\family typewriter
in
\family default
 pin, and it may read or set the value of an 
\family typewriter
io
\family default
 pin.
\end_layout

\begin_layout Description
PARAMDIRECTION One of the following: 
\family typewriter
r
\family default
 or 
\family typewriter
rw
\family default
.
 A component sets a value for a 
\family typewriter
r
\family default
 parameter, and it may read or set the value of a 
\family typewriter
rw
\family default
 parameter.
\end_layout

\begin_layout Description
STARTVALUE Specifies the initial value of a pin or parameter.
 If it is not specified, then the default is 
\family typewriter
0
\family default
 or 
\family typewriter
FALSE
\family default
, depending on the type of the item.
\end_layout

\begin_layout Description
fp Indicates that the function performs floating-point calculations.
\end_layout

\begin_layout Description
nofp Indicates that it only performs integer calculations.
 If neither is specified, 
\family typewriter
fp
\family default
 is assumed.
 Neither comp nor gcc can detect the use of floating-point calculations
 in functions that are tagged 
\family typewriter
nofp
\family default
.
\end_layout

\begin_layout Description
OPT,\InsetSpace ~
VALUE Depending on the option name OPT, the valid VALUEs vary.
 The currently defined options are:
\end_layout

\begin_deeper
\begin_layout Description
option\InsetSpace ~
singleton\InsetSpace ~
yes (default: no)
\end_layout

\begin_deeper
\begin_layout Standard
Do not create a 
\family typewriter
count
\family default
 module parameter, and always create a single instance.
 With 
\family typewriter
singleton
\family default
, items are named 
\family typewriter
component-name.item-name
\family default
 and without 
\family typewriter
singleton
\family default
, items for numbered instances are named 
\family typewriter
component-name.<num>.item-name
\family default
.
\end_layout

\end_deeper
\begin_layout Description
option\InsetSpace ~
default_count\InsetSpace ~

\emph on
number
\emph default
 (default: 1)
\end_layout

\begin_deeper
\begin_layout Standard
Normally, the module parameter 
\family typewriter
count
\family default
 defaults to 0.
 If specified, the 
\family typewriter
count
\family default
 will default to this value instead.
\end_layout

\end_deeper
\begin_layout Description
option\InsetSpace ~
count_function\InsetSpace ~
yes (default: no)
\end_layout

\begin_deeper
\begin_layout Standard
Normally, the number of instances to create is specified in the module parameter
 
\family typewriter
count
\family default
; if 
\family typewriter
count_function
\family default
 is specified, the value returned by the function 
\family typewriter
int get_count(void)
\family default
 is used instead, and the 
\family typewriter
count
\family default
 module parameter is not defined.
\end_layout

\end_deeper
\begin_layout Description
option\InsetSpace ~
rtapi_app\InsetSpace ~
no (default: yes)
\end_layout

\begin_deeper
\begin_layout Standard
Normally, the functions 
\family typewriter
rtapi_app_main
\family default
 and 
\family typewriter
rtapi_app_exit
\family default
 are automatically defined.
 With 
\family typewriter
option rtapi_app no
\family default
, they are not, and must be provided in the C code.
\end_layout

\begin_layout Standard
When implementing your own 
\family typewriter
rtapi_app_main
\family default
, call the function 
\family typewriter
int export(char *prefix, long extra_arg)
\family default
 to register the pins, parameters, and functions for 
\family typewriter
prefix
\family default
.
\end_layout

\end_deeper
\begin_layout Description
option\InsetSpace ~
data\InsetSpace ~

\emph on
type
\emph default
 (default: none) 
\series bold
\noun on
deprecated
\end_layout

\begin_deeper
\begin_layout Standard
If specified, each instance of the component will have an associated data
 block of 
\emph on
type
\emph default
 (which can be a simple type like 
\family typewriter
float
\family default
 or the name of a type created with 
\family typewriter
typedef
\family default
).
\end_layout

\begin_layout Standard
In new components, 
\emph on
variable
\emph default
 should be used instead.
\end_layout

\end_deeper
\end_deeper
\begin_layout Description
option\InsetSpace ~
extra_setup\InsetSpace ~
yes (default: no)
\end_layout

\begin_deeper
\begin_layout Standard
If specified, call the function defined by 
\family typewriter
EXTRA_SETUP
\family default
 for each instance.
 If using the automatically defined 
\family typewriter
rtapi_app_main
\family default
, 
\family typewriter
extra_arg
\family default
 is the number of this instance.
 
\end_layout

\begin_layout Description
option\InsetSpace ~
extra_cleanup\InsetSpace ~
yes (default: no)
\end_layout

\begin_deeper
\begin_layout Standard
If specified, call the function defined by 
\family typewriter
EXTRA_CLEANUP
\family default
 from the automatically defined 
\family typewriter
rtapi_app_exit
\family default
, or if an error is detected in the automatically defined 
\family typewriter
rtapi_app_main
\family default
.
\end_layout

\end_deeper
\begin_layout Description
option\InsetSpace ~
userspace\InsetSpace ~
yes (default: no)
\end_layout

\begin_deeper
\begin_layout Standard
If specified, this file describes a userspace component, rather than a real
 one.
 A userspace component may not have functions defined by the 
\family typewriter
function
\family default
 directive.
 Instead, after all the instances are constructed, the C function 
\family typewriter
user_mainloop()
\family default
 is called.
 When this function returns, the component exits.
 Typically, 
\family typewriter
user_mainloop()
\family default
 will use 
\family typewriter
FOR_ALL_INSTS()
\family default
 to perform the update action for each instance, then sleep for a short
 time.
 Another common action in 
\family typewriter
user_mainloop()
\family default
 may be to call the event handler loop of a GUI toolkit.
\end_layout

\end_deeper
\begin_layout Description
option\InsetSpace ~
userinit\InsetSpace ~
yes (default: no)
\end_layout

\begin_deeper
\begin_layout Standard
If specified, the function 
\family typewriter
userinit(argc,argv)
\family default
 is called before 
\family typewriter
rtapi_app_main()
\family default
 (and thus before the call to 
\family typewriter
hal_init()
\family default
).
 This function may process the commandline arguments or take other actions.
 Its return type is 
\family typewriter
void
\family default
; it may call 
\family typewriter
exit()
\family default
 if it wishes to terminate rather than create a hal component (for instance,
 because the commandline arguments were invalid).
\end_layout

\end_deeper
\begin_layout Standard
If an option's VALUE is not specified, then it is equivalent to specifying
 
\family typewriter
option \SpecialChar \ldots{}
 yes
\family default
.
 The result of assigning an inappropriate value to an option is undefined.
 The result of using any other option is undefined.
\end_layout

\end_deeper
\begin_layout Description
LICENSE Specify the license of the module for the documentation and for
 the MODULE_LICENSE() module declaration.
 For example, to specify that the module's license is GPL,
\end_layout

\begin_deeper
\begin_layout LyX-Code
license "GPL";
\end_layout

\begin_layout Standard
For additional information on the meaning of MODULE_LICENSE() and additional
 license identifiers, see 
\family typewriter
<linux/module.h>
\family default
.
\end_layout

\begin_layout Standard
Starting in emc 2.3, this declaration is required.
\end_layout

\end_deeper
\begin_layout Description
AUTHOR Specify the author of the module for the documentation.
\end_layout

\begin_layout Section
Per-instance data storage
\end_layout

\begin_layout Description
variable\InsetSpace ~

\emph on
CTYPE\InsetSpace ~
NAME
\emph default
;
\end_layout

\begin_layout Description
variable\InsetSpace ~

\emph on
CTYPE\InsetSpace ~
NAME
\emph default
[
\emph on
SIZE
\emph default
];
\end_layout

\begin_layout Description
variable\InsetSpace ~

\emph on
CTYPE\InsetSpace ~
NAME
\emph default
\InsetSpace ~
=\InsetSpace ~

\emph on
DEFAULT
\emph default
;
\end_layout

\begin_layout Description
variable\InsetSpace ~

\emph on
CTYPE\InsetSpace ~
NAME
\emph default
[
\emph on
SIZE
\emph default
]\InsetSpace ~
=\InsetSpace ~

\emph on
DEFAULT
\emph default
;
\end_layout

\begin_deeper
\begin_layout Standard
Declare a per-instance variable 
\emph on
NAME
\emph default
 of type 
\emph on
CTYPE
\emph default
, optionally as an array of 
\emph on
SIZE
\emph default
 items, and optionally with a default value 
\emph on
DEFAULT
\emph default
.
 Items with no 
\emph on
DEFAULT
\emph default
 are initialized to all-bits-zero.
 
\emph on
CTYPE
\emph default
 is a simple one-word C type, such as 
\family typewriter
float
\family default
, 
\family typewriter
u32
\family default
, 
\family typewriter
s32
\family default
, int, etc.
\newline
Access to array variables uses square brackets.
\end_layout

\end_deeper
\begin_layout Standard
C++-style one-line comments (
\family typewriter
// \SpecialChar \ldots{}

\family default
) and C-style multi-line comments (
\family typewriter
/* \SpecialChar \ldots{}
 */
\family default
) are both supported in the declaration section.
\end_layout

\begin_layout Section
Other restrictions on comp files
\end_layout

\begin_layout Standard
Though HAL permits a pin, a parameter, and a function to have the same name,
 comp does not.
\end_layout

\begin_layout Section
Convenience Macros
\end_layout

\begin_layout Standard
Based on the items in the declaration section, 
\emph on
comp
\emph default
 creates a C structure called 
\family typewriter
struct state
\family default
.
 However, instead of referring to the members of this structure (e.g., 
\family typewriter
*(inst->name)
\family default
), they will generally be referred to using the macros below.
 The details of 
\family typewriter
struct state
\family default
 and these macros may change from one version of 
\emph on
comp
\emph default
 to the next.
\end_layout

\begin_layout Description
FUNCTION(name) Use this macro to begin the definition of a realtime function
 which was previously declared with 
\family typewriter
"function NAME
\family default
".
 The function includes a parameter 
\family typewriter
"period
\family default
" which is the integer number of nanoseconds between calls to the function.
\end_layout

\begin_layout Description
EXTRA_SETUP() Use this macro to begin the definition of the function called
 to perform extra setup of this instance.
 Return a negative Unix 
\family typewriter
errno
\family default
 value to indicate failure (e.g., 
\family typewriter
return -EBUSY
\family default
 on failure to reserve an I/O port), or 0 to indicate success.
\end_layout

\begin_layout Description
EXTRA_CLEANUP() Use this macro to begin the definition of the function called
 to perform extra cleanup of the component.
 Note that this function must clean up all instances of the component, not
 just one.
 The "pin_name", "parameter_name", and "data" macros may not be used here.
\end_layout

\begin_layout Description

\emph on
pin_name
\end_layout

\begin_layout Description

\emph on
parameter_name
\emph default
 For each pin 
\family typewriter
pin_name
\family default
 or param 
\family typewriter
parameter_name
\family default
 there is a macro which allows the name to be used on its own to refer to
 the pin or parameter.
\end_layout

\begin_deeper
\begin_layout Standard
When 
\family typewriter
pin_name
\family default
 or 
\family typewriter
parameter_name
\family default
 is an array, the macro is of the form 
\emph on
pin_name(idx)
\emph default
 or 
\emph on
param_name(idx)
\emph default
 where 
\emph on
idx
\emph default
 is the index into the pin array.
 When the array is a variable-sized array, it is only legal to refer to
 items up to its 
\emph on
condsize
\emph default
.
\end_layout

\begin_layout Standard
When the item is a conditional item, it is only legal to refer to it when
 its 
\emph on
condition
\emph default
 evaluated to a nonzero value.
\end_layout

\end_deeper
\begin_layout Description

\emph on
variable_name
\emph default
 For each variable 
\family typewriter
variable_name
\family default
 there is a macro which allows the name to be used on its own to refer to
 the variable.
 When 
\family typewriter
variable_name
\family default
 is an array, the normal C-style subscript is used: 
\emph on
variable_name[idx]
\end_layout

\begin_layout Description
data If "option data" is specified, this macro allows access to the instance
 data.
\end_layout

\begin_layout Description
fperiod The floating-point number of seconds between calls to this realtime
 function.
\end_layout

\begin_layout Description
FOR_ALL_INSTS()\InsetSpace ~
{
\family typewriter
\SpecialChar \ldots{}

\family default
} For userspace components.
 This macro uses the variable 
\family typewriter
struct state *inst
\family default
 to iterate over all the defined instances.
 Inside the body of the loop, the 
\series bold
\emph on
pin_name
\series default
\emph default
, 
\series bold
\emph on
parameter_name
\series default
\emph default
, and 
\series bold
data
\series default
 macros work as they do in realtime functions.
\end_layout

\begin_layout Section
Components with one function
\end_layout

\begin_layout Standard
If a component has only one function and the string "FUNCTION" does not
 appear anywhere after 
\family typewriter
;;
\family default
, then the portion after 
\family typewriter
;;
\family default
 is all taken to be the body of the component's single function.
\end_layout

\begin_layout Section
Component Personality
\end_layout

\begin_layout Standard
If a component has any pins or parameters with an "if 
\emph on
condition
\emph default
" or "[
\emph on
maxsize : condsize
\emph default
]", it is called a component with "
\emph on
personality
\emph default
".
 The "personality" of each instance is specified when the module is loaded.
 "Personality" can be used to create pins only when needed.
 For instance, personality is used in the 
\family typewriter
logic
\family default
 component, to allow for a variable number of input pins to each logic gate
 and to allow for a selection of any of the basic boolean logic functions
 
\series bold
and
\series default
, 
\series bold
or
\series default
, and 
\series bold
xor
\series default
.
\end_layout

\begin_layout Section
Compiling 
\family typewriter
.comp
\family default
 files in the source tree
\end_layout

\begin_layout Standard
Place the 
\family typewriter
.comp
\family default
 file in the source directory 
\family typewriter
emc2/src/hal/components
\family default
 and re-run 
\family typewriter
make
\family default
.
 
\family typewriter
Comp
\family default
 files are automatically detected by the build system.
\end_layout

\begin_layout Standard
If a 
\family typewriter
.comp
\family default
 file is a driver for hardware, it may be placed in 
\family typewriter
emc2/src/hal/components
\family default
 and will be built except if emc2 is configured as a userspace simulator.
\end_layout

\begin_layout Section
Compiling realtime components outside the source tree
\begin_inset LatexCommand label
name "sec:Compiling-realtime-components"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
comp
\family default
 can process, compile, and install a realtime component in a single step,
 placing 
\family typewriter
rtexample.ko
\family default
 in the emc2 realtime module directory:
\end_layout

\begin_layout LyX-Code
comp --install rtexample.comp
\end_layout

\begin_layout Standard
Or, it can process and compile in one step, leaving 
\family typewriter
example.ko
\family default
 (or 
\family typewriter
example.so
\family default
 for the simulator) in the current directory:
\end_layout

\begin_layout LyX-Code
comp --compile rtexample.comp
\end_layout

\begin_layout Standard
Or it can simply process, leaving 
\family typewriter
example.c
\family default
 in the current directory:
\end_layout

\begin_layout LyX-Code
comp rtexample.comp
\end_layout

\begin_layout Standard

\family typewriter
comp
\family default
 can also compile and install a component written in C, using the 
\family typewriter
--install
\family default
 and 
\family typewriter
--compile
\family default
 options shown above:
\end_layout

\begin_layout LyX-Code
comp --install rtexample2.c
\end_layout

\begin_layout Standard
man-format documentation can also be created from the information in the
 declaration section:
\end_layout

\begin_layout LyX-Code
comp --document rtexample.comp
\end_layout

\begin_layout Standard
The resulting manpage, 
\family typewriter
example.9
\family default
 can be viewed with
\end_layout

\begin_layout LyX-Code
man ./example.9
\end_layout

\begin_layout Standard
or copied to a standard location for manual pages.
\end_layout

\begin_layout Section
Compiling userspace components outside the source tree
\end_layout

\begin_layout Standard

\family typewriter
comp
\family default
 can process, compile, install, and document userspace components:
\end_layout

\begin_layout LyX-Code
comp usrexample.comp
\newline
comp --compile usrexample.comp
\newline
comp --install usrexample.comp
\newline
com
p --document usrexample.comp
\end_layout

\begin_layout Standard
This only works for 
\family typewriter
.comp
\family default
 files, not for 
\family typewriter
.c
\family default
 files.
\end_layout

\begin_layout Section
Examples
\end_layout

\begin_layout Subsection
constant
\end_layout

\begin_layout Standard
This component functions like the one in "blocks", including the default
 value of 1.0.
 The declaration "function _" creates functions named "constant.0", etc.
\end_layout

\begin_layout LyX-Code
component constant;
\newline
pin out float out;
\newline
param r float value = 1.0;
\newline
function _;
\newline
license
 "GPL";
\newline
;;
\newline
FUNCTION(_) { out = value; }
\end_layout

\begin_layout Subsection
sincos
\end_layout

\begin_layout Standard
This component computes the sine and cosine of an input angle in radians.
 It has different capabilities than the "sine" and "cosine" outputs of siggen,
 because the input is an angle, rather than running freely based on a "frequency
" parameter.
\end_layout

\begin_layout Standard
The pins are declared with the names 
\family typewriter
sin_
\family default
 and 
\family typewriter
cos_
\family default
 in the source code so that they do not interfere with the functions 
\family typewriter
sin()
\family default
 and 
\family typewriter
cos()
\family default
.
 The HAL pins are still called 
\family typewriter
sincos.<num>.sin
\family default
.
\end_layout

\begin_layout LyX-Code
component sincos;
\newline
pin out float sin_;
\newline
pin out float cos_;
\newline
pin in float theta;
\newline
functi
on _;
\newline
license "GPL";
\newline
;;
\newline
#include <rtapi_math.h>
\newline
FUNCTION(_) { sin_ = sin(theta);
 cos_ = cos(theta); }
\end_layout

\begin_layout Subsection
out8
\end_layout

\begin_layout Standard
This component is a driver for a 
\emph on
fictional
\emph default
 card called "out8", which has 8 pins of digital output which are treated
 as a single 8-bit value.
 There can be a varying number of such cards in the system, and they can
 be at various addresses.
 The pin is called 
\family typewriter
out_
\family default
 because 
\family typewriter
out
\family default
 is an identifier used in 
\family typewriter
<asm/io.h>
\family default
.
 It illustrates the use of 
\family typewriter
EXTRA_SETUP
\family default
 and 
\family typewriter
EXTRA_CLEANUP
\family default
 to request an I/O region and then free it in case of error or when the
 module is unloaded.
\end_layout

\begin_layout LyX-Code
component out8;
\end_layout

\begin_layout LyX-Code
pin out unsigned out_ "Output value; only low 8 bits are used";
\end_layout

\begin_layout LyX-Code
param r unsigned ioaddr;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
function _;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
option count_function;
\end_layout

\begin_layout LyX-Code
option extra_setup;
\end_layout

\begin_layout LyX-Code
option extra_cleanup;
\end_layout

\begin_layout LyX-Code
option constructable no;
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
license "GPL";
\end_layout

\begin_layout LyX-Code
;;
\end_layout

\begin_layout LyX-Code
#include <asm/io.h>
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
#define MAX 8 int io[MAX] = {0,};
\end_layout

\begin_layout LyX-Code
RTAPI_MP_ARRAY_INT(io, MAX, "I/O addresses of out8 boards");
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
int get_count(void) {
\end_layout

\begin_layout LyX-Code
    int i = 0;
\end_layout

\begin_layout LyX-Code
    for(i=0; i<MAX && io[i]; i++) { /* Nothing */ }
\end_layout

\begin_layout LyX-Code
    return i;
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
EXTRA_SETUP() {
\end_layout

\begin_layout LyX-Code
    if(!rtapi_request_region(io[extra_arg], 1, "out8")) {
\end_layout

\begin_layout LyX-Code
    // set this I/O port to 0 so that EXTRA_CLEANUP does not release the
 IO
\end_layout

\begin_layout LyX-Code
    // ports that were never requested.
\end_layout

\begin_layout LyX-Code
        io[extra_arg] = 0;
\end_layout

\begin_layout LyX-Code
        return -EBUSY;
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
    ioaddr = io[extra_arg];
\end_layout

\begin_layout LyX-Code
    return 0; }
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
EXTRA_CLEANUP() {
\end_layout

\begin_layout LyX-Code
    int i;
\end_layout

\begin_layout LyX-Code
    for(i=0; i < MAX && io[i]; i++) {
\end_layout

\begin_layout LyX-Code
        rtapi_release_region(io[i], 1);
\end_layout

\begin_layout LyX-Code
    }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
FUNCTION(_) { outb(out_, ioaddr); }
\end_layout

\begin_layout Subsection
hal_loop
\end_layout

\begin_layout LyX-Code
component hal_loop;
\newline
pin out float example;
\end_layout

\begin_layout Standard
This fragment of a component illustrates the use of the 
\family typewriter
hal_
\family default
 prefix in a component name.
 
\family typewriter
loop
\family default
 is the name of a standard Linux kernel module, so a 
\family typewriter
loop
\family default
 component might not successfully load if the Linux 
\family typewriter
loop
\family default
 module was also present on the system.
\end_layout

\begin_layout Standard
When loaded, 
\family typewriter
halcmd show comp
\family default
 will show a component called 
\family typewriter
hal_loop
\family default
.
 However, the pin shown by 
\family typewriter
halcmd show pin
\family default
 will be 
\family typewriter
loop.0.example
\family default
, not 
\family typewriter
hal-loop.0.example
\family default
.
\end_layout

\begin_layout Subsection
arraydemo
\end_layout

\begin_layout Standard
This realtime component illustrates use of fixed-size arrays:
\end_layout

\begin_layout LyX-Code
component arraydemo "4-bit Shift register";
\newline
pin in bit in;
\newline
pin out bit out-#
 [4];
\newline
function _ nofp;
\newline
license "GPL";
\newline
;;
\newline
int i; 
\newline
for(i=3; i>0; i--) out(i) =
 out(i-1); 
\newline
out(0) = in;
\end_layout

\begin_layout Subsection
rand
\end_layout

\begin_layout Standard
This userspace component changes the value on its output pin to a new random
 value in the range 
\begin_inset Formula $[0,1)$
\end_inset

 about once every 1ms.
\end_layout

\begin_layout LyX-Code
\begin_inset Include \verbatiminput{rand.comp}
preview false

\end_inset


\end_layout

\begin_layout Subsection
logic
\end_layout

\begin_layout Standard
This realtime component shows how to use "personality" to create variable-size
 arrays and optional pins.
\end_layout

\begin_layout LyX-Code
\begin_inset Include \verbatiminput{../../../src/hal/components/logic.comp}
preview false

\end_inset


\end_layout

\begin_layout Standard
A typical load line for this component might be
\end_layout

\begin_layout Quote
loadrt logic count=3 personality=0x102,0x305,0x503
\end_layout

\begin_layout Standard
which creates the following pins:
\end_layout

\begin_layout Itemize
A 2-input AND gate: logic.0.and, logic.0.in-00, logic.0.in-01
\end_layout

\begin_layout Itemize
5-input AND and OR gates: logic.1.and, logic.1.or, logic.1.in-00, logic.1.in-01,
 logic.1.in-02, logic.1.in-03, logic.1.in-04, 
\end_layout

\begin_layout Itemize
3-input AND and XOR gates: logic.2.and, logic.2.xor, logic.2.in-00, logic.2.in-01,
 logic.2.in-02
\end_layout

\end_body
\end_document
