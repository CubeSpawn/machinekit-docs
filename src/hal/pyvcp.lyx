#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding default
\font_roman bookman
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\float_placement !htbp
\paperfontsize default
\spacing single
\papersize letterpaper
\use_geometry true
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 3
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Virtual Control Panel
\begin_inset LatexCommand index
name "Virtual Control Panel"

\end_inset


\begin_inset LatexCommand label
name "cha:Virtual-Control-Panel"

\end_inset


\end_layout

\begin_layout Standard
Python Virtual Control Panel
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The pyVCP (python Virtual Control Panel) is designed to give the integrator
 the ability to customize the AXIS interface with buttons and indicators
 to do special tasks.
 
\end_layout

\begin_layout Standard
Hardware machine control panels can use up a lot of I/O pins and can be
 expensive.
 That is where Virtual Control Panels have the advantage as well as it cost
 nothing to build a pyVCP.
 
\end_layout

\begin_layout Standard
Virtual control panels can be used for testing or monitoring things to temporari
ly replace real I/O devices while debugging ladder logic, or to simulate
 a physical panel before you build it and wire it to an I/O board.
\end_layout

\begin_layout Standard
The following graphic displays many of the pyVCP widgets.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/pyvcp_group.png
	scale 70

\end_inset


\end_layout

\begin_layout Section
Panel Construction
\end_layout

\begin_layout Standard
The layout of a pyVCP panel is specified with an XML file that contains
 widget tags between <pyvcp> and </pyvcp>.
 For example:
\end_layout

\begin_layout LyX-Code
<pyvcp>
\newline
    <label text="This is a LED indicator"/>
\newline
    <led/>
\newline
</pyvcp>
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/pyvcp_mypanel.png

\end_inset


\end_layout

\begin_layout Standard
If you place this text in a file called tiny.xml, and run 
\end_layout

\begin_layout LyX-Code
halrun -I loadusr pyvcp -c mypanel tiny.xml
\end_layout

\begin_layout Standard
pyVCP will create the panel for you, which includes two widgets, a Label
 with the text "This is a LED indicator", and a LED, used for displaying
 the state of a HAL BIT signal.
 It will also create a HAL component named "mypanel" (all widgets in this
 panel are connected to pins that start with "mypanel.").
 Since no <halpin> tag was present inside the <led> tag, pyVCP will automaticall
y name the HAL pin for the LED widget mypanel.led.0
\end_layout

\begin_layout Standard
For a list of widgets and their tags and options, see the widget reference
 below.
\end_layout

\begin_layout Standard
Once you have created your panel, connecting HAL signals to and from the
 pyVCP pins is done with the halcmd:
\end_layout

\begin_layout LyX-Code
net <signal-name> <pin-name> <opt-direction> <opt-pin-name>signal-name 
 
\end_layout

\begin_layout Standard
If you are new to HAL, the HAL basics chapter in the Integrators Manual
 is a good place to start.
\end_layout

\begin_layout Section
Security
\end_layout

\begin_layout Standard
Parts of pyVCP files are evaluated as Python code, and can take any action
 available to Python programs.
 Only use pyVCP .xml files from a source that you trust.
\end_layout

\begin_layout Section
AXIS
\begin_inset LatexCommand label
name "sec:pyvcp-with-axis"

\end_inset


\end_layout

\begin_layout Standard
Since AXIS uses the same GUI toolkit (Tkinter) as pyVCP, it is possible
 to include a pyVCP panel on the right side of the normal AXIS user interface.
 A typical example is explained below.
\end_layout

\begin_layout Standard
Place your pyVCP XML file describing the panel in the same directory where
 your .ini file is.
 Say we we want to display the current spindle speed using a Bar widget.
 Place the following in a file called spindle.xml:
\end_layout

\begin_layout LyX-Code
<pyvcp>
\newline
    <label>
\newline
        <text>"Spindle speed:"</text>
\newline
    </label>
\newline
    <bar>
\newline

        <halpin>"spindle-speed"</halpin>
\newline
        <max_>5000</max_>
\newline
    </bar>
\newline
</pyv
cp>
\end_layout

\begin_layout Standard
Here we've made a panel with a Label and a Bar widget, specified that the
 HAL pin connected to the Bar should be named "spindle-speed", and set the
 maximum value of the bar to 5000 (see widget reference below for all options).
 To make AXIS aware of this file, and call it at start up, we need to specify
 the following in the [DISPLAY] section of the .ini file:
\end_layout

\begin_layout LyX-Code
PYVCP = spindle.xml
\end_layout

\begin_layout Standard
To make our widget actually display the spindle-speed it needs to be hooked
 up to the appropriate HAL signal.
 A .hal file that will be run once AXIS and pyVCP have started can be specified
 in the [HAL] section of the .ini file:
\end_layout

\begin_layout LyX-Code
POSTGUI_HALFILE = spindle_to_pyvcp.hal
\end_layout

\begin_layout Standard
This change will run the HAL commands specified in "spindle_to_pyvcp.hal".
 In our example the contents could look like this:
\end_layout

\begin_layout LyX-Code
net spindle-rpm-filtered  => pyvcp.spindle-speed
\end_layout

\begin_layout Standard
assuming that a signal called "spindle-rpm-filtered" already exists.
 Note that when running together with AXIS, all pyVCP widget HAL pins have
 names that start with "pyvcp.".
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename images/pyvcp_axis_lathe.png
	lyxscale 80
	scale 50

\end_inset


\end_layout

\begin_layout Standard
This is what the newly created pyVCP panel should look like in AXIS.
 The 
\family typewriter
sim/lathe
\family default
 configuration is already configured this way.
\end_layout

\begin_layout Section
Stand Alone
\end_layout

\begin_layout Standard
This section describes how pyVCP panels can be displayed on their own with
 or without EMC's machine controller.
\end_layout

\begin_layout Standard
To load a stand alone pyVCP panel with EMC use these commands:
\end_layout

\begin_layout LyX-Code
loadusr -Wn mypanel pyvcp -g WxH+X+Y -c mypanel <path/>panel_file.xml 
\end_layout

\begin_layout Standard
You would use this if you wanted a floating panel or a panel with a GUI
 other than AXIS.
 
\end_layout

\begin_layout Description
-Wn\InsetSpace ~
panelname makes HAL wait for the component "panelname" to finish loading
 ("become ready" in HAL speak) before processing more HAL commands.
 This is important because pyVCP panels export HAL pins and other HAL components
 will need them present to connect to them.
 Note the capital W and lowercase n.
 If you use the -Wn option you must use the -c option to name the panel.
\end_layout

\begin_layout Description
pyvcp\InsetSpace ~
<-g>\InsetSpace ~
<-c>\InsetSpace ~
panel.xml builds the panel with the optional geometry and/or
 panelname from the xml panel file.
 The panel.xml can be any name that ends in .xml.
 The .xml file is the file that describes how to build the panel.
 You must add the path name if the panel is not in the directory that the
 HAL script is in.
 
\end_layout

\begin_layout Description
-g\InsetSpace ~
<WxH><+X+Y> specifies the geometry to be used when constructing the panel.
 The syntax is "Width"x"Height"+"X Anchor"+"Y Anchor".
 You can set the size or position or both.
 The anchor point is the upper left corner of the panel.
 An example is -g 250x500+800+0 This sets the panel at 250 pixels wide,
 500 pixels tall, and anchors it at X800 Y0.
\end_layout

\begin_layout Description
-c\InsetSpace ~
panelname tells pyVCP what to call the component and also the title of
 the window.
 The panelname can be any name without spaces.
 
\end_layout

\begin_layout Standard
To load a "stand alone" pyVCP panel without EMC use this command: 
\end_layout

\begin_layout LyX-Code
loadusr -Wn mypanel pyvcp -g 250x500+800+0 -c mypanel mypanel.xml 
\end_layout

\begin_layout Standard
The minimum command to load a pyvcp panel is:
\end_layout

\begin_layout LyX-Code
loadusr pyvcp mypanel.xml
\end_layout

\begin_layout Standard
You would use this if you want a panel without EMC's machine controller
 such as for testing or a standalone DRO.
 
\end_layout

\begin_layout Standard
The loadusr command is used when you also load a component that will stop
 HAL from closing until it's done.
 If you loaded a panel and then loaded ClassicLadder using -w ClassicLadder
 CL would hold HAL open (and the panel)  until you closed CL -Wn means wait
 for the component "panelname" to become ready.
 "panelname" can be any name.
 note the capital W and lowercase n.
 The -c tells pyVCP to build a panel with the name "panelname" using the
 info in "panel_file_name.xml" "panel_file_name.xml" can be any name but must
 end in .xml - it is the file that describes how to build the panel.
 You must add the path name if the panel is not in the directory that the
 HAL script is in.
 
\end_layout

\begin_layout Standard
An optional command to use if you want the panel to stop HAL from continuing
 commands / shutting down.
 After loading any other components you want the last HAL command to be:
 
\end_layout

\begin_layout LyX-Code
  waituser panelname
\end_layout

\begin_layout Standard
This tells HAL to wait for component "panelname" to close before continuing
 HAL commands This is usually set as the last command so that HAL shuts
 down when the panel is closed.
\end_layout

\begin_layout Section
Widgets
\end_layout

\begin_layout Standard
HAL signals come in two variants, bits and numbers.
 Bits are off/on signals.
 Numbers can be "float", "s32" or "u32".
 For more information on HAL data types see the 
\begin_inset LatexCommand ref
reference "sec:Hal-Data"

\end_inset

 section.
 The pyVCP widget can either display the value of the signal with an indicator
 widget, or modify the signal value with a control widget.
 Thus there are four classes of pyVCP widgets that you can connect to a
 HAL signal.
 A fifth class of helper widgets allow you to organize and label your panel.
\end_layout

\begin_layout Enumerate
Widgets for indicating "bit" signals: led, rectled
\end_layout

\begin_layout Enumerate
Widgets for controlling "bit" signals: button, checkbutton, radiobutton
\end_layout

\begin_layout Enumerate
Widgets for indicating "number" signals: number, s32, u32, bar, meter
\end_layout

\begin_layout Enumerate
Widgets for controlling "number" signals: spinbox, scale, jogwheel
\end_layout

\begin_layout Enumerate
Helper widgets: hbox, vbox, table, label, labelframe
\end_layout

\begin_layout Subsubsection*
Syntax
\end_layout

\begin_layout Standard
Each widget is described briefly, followed by the markup used, and a screen
 shot.
 All tags inside the main widget tag are optional.
\end_layout

\begin_layout Subsubsection*
General Notes
\end_layout

\begin_layout Standard
At the present time, both a tag-based and an attribute-based syntax are
 supported.
 For instance, the following XML fragments are treated identically:
\end_layout

\begin_layout LyX-Code
<led halpin="my-led"/>
\end_layout

\begin_layout Standard
and
\end_layout

\begin_layout LyX-Code
<led><halpin>"my-led"</halpin></led>
\end_layout

\begin_layout Standard
When the attribute-based syntax is used, the following rules are used to
 turn the attributes value into a Python value:
\end_layout

\begin_layout Enumerate
If the first character of the attribute is one of the following, it is evaluated
 as a Python expression: 
\family typewriter
{(["'
\end_layout

\begin_layout Enumerate
If the string is accepted by int(), the value is treated as an integer
\end_layout

\begin_layout Enumerate
If the string is accepted by float(), the value is treated as floating-point
\end_layout

\begin_layout Enumerate
Otherwise, the string is accepted as a string.
\end_layout

\begin_layout Standard
When the tag-based syntax is used, the text within the tag is always evaluated
 as a Python expression.
\end_layout

\begin_layout Standard
The examples below show a mix of formats.
\end_layout

\begin_layout Subsubsection*
Comments
\end_layout

\begin_layout Standard
To add a comment use the xml syntax for a comment.
 
\end_layout

\begin_layout LyX-Code
<!-- My Comment -->
\end_layout

\begin_layout Subsubsection*
Editing the XML file
\end_layout

\begin_layout Standard
Edit the XML file with a text editor.
 In most cases you can right click on the file and select "open with text
 editor" or similar.
\end_layout

\begin_layout Subsubsection*
Colors
\end_layout

\begin_layout Standard
Colors can be specified using the X11 rgb colors by name "gray75" or hex
 "#0000ff
\begin_inset Quotes erd
\end_inset

.
 A complete list is located here 
\begin_inset LatexCommand url
target "http://sedition.com/perl/rgb.html"

\end_inset

.
\end_layout

\begin_layout Standard
Common Colors (colors with numbers indicate shades of that color)
\end_layout

\begin_layout Itemize
white
\end_layout

\begin_layout Itemize
black
\end_layout

\begin_layout Itemize
blue and blue1 - 4
\end_layout

\begin_layout Itemize
cyan and cyan1 - 4
\end_layout

\begin_layout Itemize
green and green1 - 4
\end_layout

\begin_layout Itemize
yellow and yellow1 - 4
\end_layout

\begin_layout Itemize
red and red1 - 4
\end_layout

\begin_layout Itemize
purple and purple1 - 4
\end_layout

\begin_layout Itemize
gray and gray0 - 100
\end_layout

\begin_layout Subsubsection*
HAL Pins
\end_layout

\begin_layout Standard
HAL pins provide a means to "connect" the widget to something.
 Once you create a HAL pin for your widget you can "connect" it to another
 HAL pin with a "net" command in a .hal file.
 For more information on the "net" command see the HAL Commands section
 (
\begin_inset LatexCommand ref
reference "sec:Hal-Commands"

\end_inset

).
\end_layout

\begin_layout Subsection
Label
\end_layout

\begin_layout Standard
A label is a piece of text on your panel.
\end_layout

\begin_layout Standard
The label has an optional disable pin that is created when you add <disable_pin>
True</disable_pin>.
\end_layout

\begin_layout LyX-Code
<label>
\newline
    <text>"This is a Label:"</text>
\newline
    <font>("Helvetica",20)</font>
\newline
</lab
el> 
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_label.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsection
LEDs
\end_layout

\begin_layout Standard
A LED is used to indicate the status of a "bit" halpin.
 The LED color will be on_color when the halpin is true, and off_color otherwise.
\end_layout

\begin_layout Description
<halpin> sets the name of the pin, default is "led.n", where n is an integer
\end_layout

\begin_layout Description
<size> sets the size of the led, default is 20
\end_layout

\begin_layout Description
<on_color> sets the color of the LED when the pin is true.
 default is "green"
\end_layout

\begin_layout Description
<off_color> sets the color of the LED when the pin is false.
 default is "red"
\end_layout

\begin_layout Description
<disable_pin> when true adds a disable pin to the led.
\end_layout

\begin_layout Description
<disabled_color> sets the color of the LED when the pin is disabled.
\end_layout

\begin_layout Subsubsection
Round LED
\end_layout

\begin_layout LyX-Code
<led>
\newline
     <halpin>"my-led"</halpin> 
\newline
     <size>50</size> 
\newline
     <on_color>"green"<
/on_color>
\newline
     <off_color>"red"</off_color>
\newline
</led>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_led.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Rectangle LED
\end_layout

\begin_layout Standard
This is a variant of the "led" widget.
 
\end_layout

\begin_layout LyX-Code
<vbox>
\newline
    <relief>RIDGE</relief>
\newline
    <bd>6</bd>
\newline
    <rectled>
\newline
        <halpin>"my-l
ed"</halpin>
\newline
        <height>"50"</height>
\newline
        <width>"100"</width>
\newline
  
      <on_color>"green"</on_color>
\newline
        <off_color>"red"</off_color>
\newline
 
   </rectled>
\newline
</vbox>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline
Also showing a vertical box with relief.
\newline

\begin_inset Graphics
	filename images/pyvcp_rectled.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsection
Buttons
\end_layout

\begin_layout Standard
A button is used to control a BIT pin.
 The pin will be set True when the button is pressed and held down, and
 will be set False when the button is released.
 Buttons can use the following formatting options
\end_layout

\begin_layout Description
<padx>n</padx> where "n" is the amount of extra horizontal extra space
\end_layout

\begin_layout Description
<pady>n</pady> where "n" is the amount of extra vertical extra space
\end_layout

\begin_layout Description
<activebackground>"color"</activebackground> the cursor over color
\end_layout

\begin_layout Description
<bg>"color"</bg> the color of the button
\end_layout

\begin_layout Subsubsection
Text Button
\end_layout

\begin_layout Standard
A text button controls a "bit" halpin.
 The halpin is false until the button is pressed then it is true.
 The button is a momentary button.
 
\end_layout

\begin_layout Standard
The text button has an optional disable pin that is created when you add
 <disable_pin>True</disable_pin>.
\end_layout

\begin_layout LyX-Code
<button>
\newline
    <halpin>"ok-button"</halpin>
\newline
    <text>"OK"</text> 
\newline
</button>
\newline
<button>
\newline

    <halpin>"abort-button"</halpin>
\newline
    <text>"Abort"</text> 
\newline
</button>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_button.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Checkbutton
\end_layout

\begin_layout Standard
A checkbutton controls a "bit" halpin.
 The halpin will be set True when the button is checked, and false when
 the button is unchecked.
 The checkbutton is a toggle type button.
\end_layout

\begin_layout LyX-Code
<checkbutton>
\newline
    <halpin>"coolant-chkbtn"</halpin>
\newline
    <text>"Coolant"</text>
\newline
</ch
eckbutton>
\newline
<checkbutton>
\newline
    <halpin>"chip-chkbtn"</halpin>
\newline
    <text>"Chips
   "</text>
\newline
</checkbutton>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline
The coolant checkbutton is checked.
\newline
Notice
 the extra spaces in the Chips text
\newline
to keep the checkbuttons aligned.
\newline

\begin_inset Graphics
	filename images/pyvcp_checkbutton.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Radiobutton
\end_layout

\begin_layout Standard
A radiobutton will set one of the halpins true.
 The other pins are set false.
\end_layout

\begin_layout LyX-Code
<radiobutton>
\newline
    <choices>["one","two","three"]</choices> 
\newline
    <halpin>"my-radio"
</halpin> 
\newline
</radiobutton>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_radiobutton.png
	scale 80

\end_inset


\end_layout

\begin_layout Standard
Note that the HAL pins in the example above will me named my-radio.one, my-radio.t
wo, and my-radio.three.
 In the image above, "one" is the selected value.
\end_layout

\begin_layout Subsection
Number Displays
\end_layout

\begin_layout Standard
Number displays can use the following formatting options
\end_layout

\begin_layout Itemize
<font>("Font Name",n)</font> where "n" is the font size
\end_layout

\begin_layout Itemize
<width>n</width> where "n" is the overall width of the space used
\end_layout

\begin_layout Itemize
<justify>pos</justify> where "pos" is LEFT, CENTER, or RIGHT (doesn't work)
\end_layout

\begin_layout Itemize
<padx>n</padx> where "n" is the amount of extra horizontal extra space
\end_layout

\begin_layout Itemize
<pady>n</pady> where "n" is the amount of extra vertical extra space
\end_layout

\begin_layout Subsubsection
Number
\end_layout

\begin_layout Standard
The number widget displays the value of a float signal.
\end_layout

\begin_layout LyX-Code
<number> 
\newline
    <halpin>"my-number"</halpin>
\newline
    <font>("Helvetica",24)</font>
\newline

    <format>"+4.4f"</format>
\newline
</number>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_number.png
	scale 80

\end_inset


\end_layout

\begin_layout Standard
<font> is a Tkinter font type and size specification.
 One font that will show up to at least size 200 is "courier 10 pitch",
 so for a really big Number widget you could specify:
\end_layout

\begin_layout LyX-Code
<font>("courier 10 pitch",100)</font>
\end_layout

\begin_layout Description
<format> is a "C-style" format specified that determines how the number
 is displayed.
\end_layout

\begin_layout Subsubsection
s32 Number
\end_layout

\begin_layout Standard
The s32 number widget displays the value of a s32 number.
 The syntax is the same as "number" except the name which is <s32>.
 Make sure the width is wide enough to cover the largest number you expect
 to use.
\end_layout

\begin_layout LyX-Code
<s32>
\newline
    <halpin>"my-number"</halpin>
\newline
    <font>("Helvetica",24)</font>
\newline
 
   <format>"6d"</format>
\newline
    <width>6</width>
\newline
</s32>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_s32.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
u32 Number
\end_layout

\begin_layout Standard
The u32 number widget displays the value of a u32 number.
 The syntax is the same as "number" except the name which is <u32>.
\end_layout

\begin_layout Subsubsection
Bar
\end_layout

\begin_layout Standard
A bar widget displays the value of a FLOAT signal both graphically using
 a bar display and numerically.
\end_layout

\begin_layout LyX-Code
<bar>
\newline
    <halpin>"my-bar"</halpin>
\newline
    <min_>0</min_>
\newline
    <max_>123</max_>
\newline

    <bgcolor>"grey"</bgcolor>
\newline
    <fillcolor>"red"</fillcolor>
\newline
</bar>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_bar.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Meter
\end_layout

\begin_layout Standard
Meter displays the value of a FLOAT signal using a traditional dial indicator.
\end_layout

\begin_layout LyX-Code
<meter>
\newline
    <halpin>"mymeter"</halpin>
\newline
    <text>"Battery"</text>
\newline
    <subtext>"Vol
ts"</subtext>
\newline
    <size>250</size>
\newline
    <min_>0</min_>
\newline
    <max_>15.5</max_>
\newline

    <majorscale>1</majorscale>
\newline
    <minorscale>0.2</minorscale>
\newline
    <region1>(14.5,1
5.5,"yellow")</region1>
\newline
    <region2>(12,14.5,"green")</region2>
\newline
    <region3>(0,12,
"red")</region3>
\newline
</meter>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_meter.png
	scale 70

\end_inset


\end_layout

\begin_layout Subsection
Number Inputs
\end_layout

\begin_layout Subsubsection
Spinbox
\end_layout

\begin_layout Standard
Spinbox controls a FLOAT pin.
 You increase or decrease the value of the pin by either pressing on the
 arrows, or pointing at the spinbox and rolling your mouse-wheel.
\end_layout

\begin_layout LyX-Code
<spinbox>
\newline
    <halpin>"my-spinbox"</halpin>
\newline
    <min_>-12</min_>
\newline
    <max_>33</max_
>
\newline
    <resolution>0.1</resolution>
\newline
    <format>"2.3f"</format>
\newline
    <font>("Arial",30)
</font>
\newline
</spinbox>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_spinbox.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Scale
\end_layout

\begin_layout Standard
Scale controls a float or a s32 pin.
 You increase or decrease the value of the pin be either dragging the slider,
 or pointing at the scale and rolling your mouse-wheel.
 The "halpin" will have both "-f" and "-i" added to it to form the float
 and s32 pins.
 Width is the width of the slider in vertical and the height of the slider
 in horizontal orientation.
\end_layout

\begin_layout LyX-Code
<scale>
\newline
    <font>("Helvetica",16)</font>
\newline
    <width>"25"</width>
\newline
    <halpin>"my-h
scale"</halpin>
\newline
    <resolution>0.1</resolution>
\newline
    <orient>HORIZONTAL</orient>
\newline

    <initval>-15</initval>
\newline
    <min_>-33</min_>
\newline
    <max_>26</max_>
\newline
</scale>
\end_layout

\begin_layout LyX-Code
<scale>
\newline
    <font>("Helvetica",16)</font>
\newline
    <width>"50"</width>
\newline
    <halpin>"my-v
scale"</halpin>
\newline
    <resolution>1</resolution>
\newline
    <orient>VERTICAL</orient>
\newline

    <min_>100</min_>
\newline
    <max_>0</max_>
\newline
</scale>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_scale.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Dial
\end_layout

\begin_layout Standard
The Dial outputs a HAL float and reacts to both mouse wheel and dragging.
 Double left click to increase the resolution and double right click to
 reduce the resolution by one digit.
 The output is capped by the min and max values.
 The <cpr> is how many tick marks are on the outside of the ring (beware
 of high numbers).
\end_layout

\begin_layout LyX-Code
<dial>
\newline
    <size>200</size>
\newline
    <cpr>100</cpr>
\newline
    <min_>-15</min_>
\newline
    <max_>15</ma
x_>
\newline
    <text>"Dial"</text>
\newline
    <initval>0</initval>
\newline
    <resolution>0.001</resoluti
on>
\newline
    <halpin>"anaout"</halpin>
\newline
    <dialcolor>"yellow"</dialcolor>
\newline
    <edgecolo
r>"green"</edgecolor>
\newline
    <dotcolor>"black"</dotcolor>
\newline
</dial>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_dial.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Jogwheel
\end_layout

\begin_layout Standard
Jogwheel mimics a real jogwheel by outputting a FLOAT pin which counts up
 or down as the wheel is turned, either by dragging in a circular motion,
 or by rolling the mouse-wheel.
\end_layout

\begin_layout LyX-Code
<jogwheel>
\newline
    <halpin>"my-wheel"</halpin>
\newline
    <cpr>45</cpr>
\newline
    <size>250</size>
\newline
</
jogwheel>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_jogwheel.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsection
Images
\end_layout

\begin_layout Standard
Image displays use only .gif image format.
 All of the images must be the same size.
 The images must be in the same directory as your ini file (or in the current
 directory if running from the command line with halrun/halcmd).
\end_layout

\begin_layout Subsubsection
Image Bit
\end_layout

\begin_layout Standard
The "image_bit" toggles between two images by setting the halpin to true
 or false.
\end_layout

\begin_layout LyX-Code
<image name='fwd' file='fwd.gif'/>
\newline
<image name='rev' file='rev.gif'/>
\newline
<vbox>
\newline

    <image_bit halpin='selectimage' images='fwd rev'/>
\newline
</vbox>
\end_layout

\begin_layout Standard
\align center
This example was produced from the above code.
\newline
Using the two image files fwd.gif
 and rev.gif.
\newline
FWD is displayed when "selectimage" is false
\newline
and REV is displayed
 when "selectimage" is true.
\newline

\begin_inset Graphics
	filename images/pyvcp_image01.png
	scale 80

\end_inset


\begin_inset Graphics
	filename images/pyvcp_image02.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Image u32
\end_layout

\begin_layout Standard
The "image_u32" is the same as "image_bit" except you have essentially an
 unlimited number of images and you "select" the image by setting the halpin
 to a integer value with 0 for the first image in the images list and 1
 for the second image etc.
\end_layout

\begin_layout LyX-Code
<image name='stb' file='stb.gif'/>
\newline
<image name='fwd' file='fwd.gif'/>
\newline
<image
 name='rev' file='rev.gif'/>
\newline
<vbox>
\newline
    <image_u32 halpin='selectimage' images='stb
 fwd rev'/>
\newline
</vbox>
\newline

\end_layout

\begin_layout Standard
\align center
The above code produced the following example
\newline
by adding the stb.gif image.
\newline

\begin_inset Graphics
	filename images/pyvcp_image_u32_01.png
	scale 80

\end_inset


\begin_inset Graphics
	filename images/pyvcp_image01.png
	scale 80

\end_inset


\begin_inset Graphics
	filename images/pyvcp_image02.png
	scale 80

\end_inset


\end_layout

\begin_layout Standard
Notice that the default is the min even though it is set higher than max
 unless there is a negative min.
\end_layout

\begin_layout Subsection
Containers
\end_layout

\begin_layout Standard
Containers are widgets that contain other widgets.
 Containers are used to group other widgets.
\end_layout

\begin_layout Subsubsection
Borders
\end_layout

\begin_layout Standard
Container borders are specified with two tags used together.
 The <relief> tag specifies the type of border and the <bd> specifies the
 width of the border.
 
\end_layout

\begin_layout Description
<relief>type</relief> Where "type" is FLAT, SUNKEN, RAISED, GROOVE, or RIDGE
\end_layout

\begin_layout Description
<bd>n</bd> Where "n" is the width of the border.
\end_layout

\begin_layout LyX-Code
<hbox>
\newline
    <button>
\newline
        <relief>FLAT</relief>
\newline
        <text>"FLAT"</text>
\newline

        <bd>3</bd>
\newline
    </button>
\end_layout

\begin_layout LyX-Code
    <button>
\newline
        <relief>SUNKEN</relief>
\newline
        <text>"SUNKEN"</text>
\newline

        <bd>3</bd>
\newline
    </button>
\end_layout

\begin_layout LyX-Code
    <button>
\newline
        <relief>RAISED</relief>
\newline
        <text>"RAISED"</text>
\newline

        <bd>3</bd>
\newline
    </button>
\end_layout

\begin_layout LyX-Code
    <button>
\newline
       <relief>GROOVE</relief>
\newline
       <text>"GROOVE"</text>
\newline
 
      <bd>3</bd>
\newline
    </button>
\end_layout

\begin_layout LyX-Code
    <button>
\newline
        <relief>RIDGE</relief>
\newline
       <text>"RIDGE"</text>
\newline
  
     <bd>3</bd>
\newline
    </button>
\newline
</hbox>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_borders.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Hbox
\end_layout

\begin_layout Standard
Use a Hbox when you want to stack widgets horizontally next to each other.
\end_layout

\begin_layout LyX-Code
<hbox>
\newline
    <relief>RIDGE</relief>
\newline
    <bd>6</bd>
\newline
    <label><text>"a hbox:"</text><
/label>
\newline
    <led></led>
\newline
    <number></number>
\newline
    <bar></bar>
\newline
</hbox>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_hbox.png
	scale 80

\end_inset


\end_layout

\begin_layout Standard
Inside a Hbox, you can use the 
\family typewriter
<boxfill fill=""/>
\family default
, 
\family typewriter
<boxanchor anchor=""/>
\family default
, and 
\family typewriter
<boxexpand expand=""/>
\family default
 tags to choose how items in the box behave when the window is re-sized.
 For details of how fill, anchor, and expand behave, refer to the Tk 
\family typewriter
pack
\family default
 manual page, 
\family typewriter
pack(3tk)
\family default
.
 By default, 
\family typewriter
fill="y"
\family default
, 
\family typewriter
anchor="center"
\family default
, 
\family typewriter
expand="yes"
\family default
.
\end_layout

\begin_layout Subsubsection
Vbox
\end_layout

\begin_layout Standard
Use a Vbox when you want to stack widgets vertically on top of each other.
\end_layout

\begin_layout LyX-Code
<vbox>
\newline
    <relief>RIDGE</relief>
\newline
    <bd>6</bd>
\newline
    <label><text>"a vbox:"</text><
/label>
\newline
    <led></led>
\newline
    <number></number>
\newline
    <bar></bar>
\newline
</vbox>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_vbox.png
	scale 80

\end_inset


\end_layout

\begin_layout Standard
Inside a Hbox, you can use the 
\family typewriter
<boxfill fill=""/>
\family default
, 
\family typewriter
<boxanchor anchor=""/>
\family default
, and 
\family typewriter
<boxexpand expand=""/>
\family default
 tags to choose how items in the box behave when the window is re-sized.
 For details of how fill, anchor, and expand behave, refer to the Tk 
\family typewriter
pack
\family default
 manual page, 
\family typewriter
pack(3tk)
\family default
.
 By default, 
\family typewriter
fill="x"
\family default
, 
\family typewriter
anchor="center"
\family default
, 
\family typewriter
expand="yes"
\family default
.
\end_layout

\begin_layout Subsubsection
Labelframe
\end_layout

\begin_layout Standard
A labelframe is a frame with a groove and a label at the upper-left corner.
\end_layout

\begin_layout LyX-Code
<labelframe text="Group Title">
\newline
    <font>("Helvetica",16)</font>
\newline
    <hbox>
\newline

        <led/> 
\newline
        <led/>
\newline
    </hbox>
\newline
</labelframe>
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_labelframe.png
	scale 80

\end_inset


\end_layout

\begin_layout Subsubsection
Table
\end_layout

\begin_layout Standard
A table is a container that allows layout in a grid of rows and columns.
 Each row is started by a 
\family typewriter
<tablerow/>
\family default
 tag.
 A contained widget may span rows or columns through the use of the 
\family typewriter
<tablespan rows= cols=/>
\family default
 tag.
 The sides of the cells to which the contained widgets 
\begin_inset Quotes eld
\end_inset

stick
\begin_inset Quotes erd
\end_inset

 may be set through the use of the 
\family typewriter
<tablesticky sticky=/>
\family default
 tag.
 A table expands on its flexible rows and columns.
\end_layout

\begin_layout Standard
Example:
\end_layout

\begin_layout LyX-Code
<table flexible_rows="[2]" flexible_columns="[1,4]">
\newline
<tablesticky sticky="new"/>
\newline
<
tablerow/>
\newline
    <label>
\newline
        <text>" A (cell 1,1) "</text>
\newline
        <relief>RIDGE<
/relief>
\newline
        <bd>3</bd>
\newline
    </label>
\newline
    <label text="B (cell 1,2)"/>
\newline
 
       <tablespan columns="2"/>
\newline
    <label text="C, D (cells 1,3 and 1,4)"/>
 
\newline
<tablerow/>
\newline
    <label text="E (cell 2,1)"/>
\newline
    <tablesticky sticky="nsew"/>
\newline

    <tablespan rows="2"/>
\newline
    <label text="'spans
\backslash
n2 rows'"/>
\newline
    <tablesticky sticky="new"/>
\newline
    <label text="G (cell 2,3)"/>
\newline

    <label text="H (cell 2,4)"/>
\newline
<tablerow/> 
\newline
    <label text="J (cell 3,1)"/>
\newline

    <label text="K (cell 3,2)"/>
\newline
    <u32 halpin="test"/>
\newline
</table> 
\end_layout

\begin_layout Standard
\align center
The above code produced this example.
\newline

\begin_inset Graphics
	filename images/pyvcp_table.png
	scale 70

\end_inset


\end_layout

\begin_layout Subsubsection
Tabs
\end_layout

\begin_layout Standard
A tabbed interface can save quite a bit of space.
\end_layout

\begin_layout LyX-Code
<tabs>
\newline
    <names> ["spindle","green eggs"]</names>
\newline
</tabs>
\newline
<tabs>
\newline
    <names>["Spin
dle", "Green Eggs", "Ham"]</names>
\newline
    <vbox>
\newline
        <label>
\newline
            <text>"Sp
indle speed:"</text>
\newline
        </label>
\newline
        <bar>
\newline
            <halpin>"spindle-sp
eed"</halpin>
\newline
            <max_>5000</max_>
\newline
        </bar>
\newline
    </vbox>
\newline
    <vbox>
\newline

        <label>
\newline
            <text>"(this is the green eggs tab)"</text>
\newline
 
       </label>
\newline
    </vbox>
\newline
    <vbox>
\newline
        <label>
\newline
            <text>"(this
 tab has nothing on it)"</text>
\newline
        </label>
\newline
    </vbox>
\newline
</tabs>
\end_layout

\begin_layout Standard
\align center
The above code produced this example showing each tab selected.
\newline

\begin_inset Graphics
	filename images/pyvcp_tabs1.png
	scale 70

\end_inset


\begin_inset Graphics
	filename images/pyvcp_tabs2.png
	scale 70

\end_inset


\begin_inset Graphics
	filename images/pyvcp_tabs3.png
	scale 70

\end_inset


\end_layout

\end_body
\end_document
