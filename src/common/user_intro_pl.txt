= EMC2

[float]
The Enhanced Machine Control
============================

== This Manual

The focus of this manual is on using EMC2. It is intended to be used
once EMC2 is installed and configured. For standard installations see
the Getting Started Guide for step by step instructions to get you up
and going. For detailed information on installation and configuration
of EMC2 see the Integrator Manual.

== How EMC2 Works[[sec:How-EMC2-Works]]

The Enhanced Machine Controller (EMC2) is a lot more than just another
CNC(((CNC))) mill program. It can control machine tools, robots, or
other automated devices. It can control servo motors, stepper motors,
relays, and other devices related to machine tools.

There are four main components to the EMC2 software: 
* a motion controller (EMCMOT), 
* a discrete I/O controller (EMCIO), 
* a task executor which coordinates them (EMCTASK), 
* and one of several graphical user interfaces. 

In addition there is a layer called HAL (Hardware Abstraction Layer) 
which allows configuration of EMC2 without the need of recompiling.

.Simple EMC2 Controlled Machine[[fig:Typical_machine]]

image::whatstep1.png[]

Figure  <<fig:Typical_machine>> shows a simple block diagram showing
what a typical 3-axis EMC2 system might look like. This diagram shows a
stepper motor system. The PC, running Linux(((Linux))) as its operating
system, is actually controlling the stepper motor drives by sending
signals through the printer port. These signals (pulses) make the
stepper drives move the stepper motors. The EMC2 system can also run servo
motors via servo interface cards or by using an extended parallel port
to connect with external control boards. As we examine each of the
components that make up an EMC2 system we will remind the reader of
this typical machine. 

` `
` `
` `
` `
` `
` `
` `
` `
` `
` `

== Graphical User Interfaces[[sub:Graphical-User-Interfaces]]

A user interface is the part of the EMC2 that the machine tool
operator interacts with. The EMC2 comes with several types of user
interfaces:


 - *AXIS*, an OpenGL-based GUI (Graphical User Interface), with an
   interactive G-Code previewer. This interface is one of the few that are
   still under active development and improvement. 

.The AXIS GUI[[fig:The-Axis-GUI]]

image::images/axis-2.5.png[]


 - *Mini*, a Tcl/Tk-based GUI 

.The Mini GUI[[fig:The-Mini-GUI]]

image::images/mini.png[]


 - *TkEMC*, a Tcl/Tk-based GUI

.The TkEmc GUI[[fig:The-TkEmc-GUI]]

image::images/tkemc.png[]


 - *Keystick*, a character-based screen graphics program suitable for
   minimal installations (without the X server running).

.The Keystick GUI[[fig:The-Keystick-GUI]]

image::images/keystick.png[]


 - *Xemc*, an X-Windows program

 - a HAL based user interface called *halui*, which allows to control EMC2
   using knobs and switches

 - a telnet based user interface called *emcrsh*, which allows commands to
   be sent to EMC2 from remote computers

== Languages

EMC2 uses translation files to translate EMC User Interfaces into many
languages. You just need to log in with the language you intend to use
and when you start up EMC it comes up in that language. If your
language has not been translated contact a developer on the IRC or the
mailing list if you can assist in the translation.

== Thinking Like a Machine Operator[[sec:Thinking-Operator]]

This book will not even pretend that it can teach you to run a mill or
a lathe. Becoming a machinist takes time and hard work. An author once
said, "We learn from experience, if at all." Broken tools, gouged
vices, and scars are the evidence of lessons taught. Good part finish,
close tolerances, and careful work are the evidence of lessons learned.
No machine, no computer program, can take the place of human
experience.

As you begin to work with the EMC2 program, you will need to place
yourself in the position of operator. You need to think of yourself in
the role of the one in charge of a machine. It is a machine that is
either waiting for your command or executing the command that you have
just given it. Throughout these pages we will give information that
will help you become a good operator of the EMC2 system. You will need
some information right up front here so that the following pages will
make sense to you.

== Modes of Operation[[sub:Modes-of-Operation]]

When EMC2 is running, there are three different major modes used
for inputting commands. These are *Manual*(((Manual))), *Auto*(((Auto))),
and *MDI*(((MDI))). Changing from one mode to another makes a big
difference in the way that the EMC2 control behaves. There are specific things
that can be done in one mode that cannot be done in another. An
operator can home an axis in manual mode but not in auto or MDI modes.
An operator can cause the machine to execute a whole file full of
G-codes in the auto mode but not in manual or MDI.

In manual mode, each command is entered separately. In human terms a
manual command might be "turn on coolant" or "jog X at 25 inches per
minute". These are roughly equivalent to flipping a switch or turning
the hand wheel for an axis. These commands are normally handled on one
of the graphical interfaces by pressing a button with the mouse or
holding down a key on the keyboard. In auto mode, a similar button or
key press might be used to load or start the running of a whole program
of G-code that is stored in a file. In the MDI mode the operator might
type in a block of code and tell the machine to execute it by pressing
the <return> or <enter> key on the keyboard.

Some motion control commands are available and will cause the same
changes in motion in all modes. These include *abort*(((ABORT))),
*estop*(((ESTOP))), and *feed rate override*(((feed override))).
Commands like these should be self explanatory.

The AXIS user interface hides some of the distinctions between Auto
and the other modes by making Auto-commands available at most times. It
also blurs the distinction between Manual and MDI because some Manual
commands like Touch Off are actually implemented by sending MDI
commands. It does this by automatically changing to the mode that is
needed for the action the user has requested.


