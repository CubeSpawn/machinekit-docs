#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\language english
\inputencoding default
\font_roman bookman
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\float_placement !htbp
\paperfontsize default
\spacing single
\papersize letterpaper
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1in
\topmargin 1in
\rightmargin 0.8in
\bottommargin 0.8in
\secnumdepth 1
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Basic Configuration
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Introduction"

\end_inset

Introduction
\end_layout

\begin_layout Standard
The preferred way to set up a standard stepper machine is with the Step
 Configuration Wizard.
 See the Getting Started Guide.
\end_layout

\begin_layout Standard
This chapter describes some of the more common settings for manually setting
 up a stepper based system.
 Because of the various possibilities of configuring EMC2, it is very hard
 to document them all, and keep this document relatively short.
 
\end_layout

\begin_layout Standard
The most common EMC2 usage is for stepper based systems.
 These systems are using stepper motors with drives that accept step & direction
 signals.
 
\end_layout

\begin_layout Standard
It is one of the simpler setups, because the motors run open-loop (no feedback
 comes back from the motors), yet the system needs to be configured properly
 so the motors don't stall or lose steps.
\end_layout

\begin_layout Standard
Most of this chapter is based on the sample config released along with EMC2.
 The config is called stepper
\begin_inset LatexCommand index
name "stepper"

\end_inset

, and usually it is found in 
\family typewriter
/etc/emc2/sample-configs/stepper
\family default
.
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Maximum-step-rate"

\end_inset

Maximum step rate
\begin_inset LatexCommand index
name "step rate"

\end_inset


\end_layout

\begin_layout Standard
With software step generation, the maximum step rate is one step per two
 BASE_PERIODs for step-and-direction output.
 The maximum requested step rate is the product of an axis' MAX_VELOCITY
 and its INPUT_SCALE.
 If the requested step rate is not attainable, following errors will occur,
 particularly during fast jogs and G0 moves.
\end_layout

\begin_layout Standard
If your stepper driver can accept quadrature input, use this mode.
 With a quadrature signal, one step is possible for each BASE_PERIOD, doubling
 the maximum step rate.
\end_layout

\begin_layout Standard
The other remedies are to decrease one or more of: the BASE_PERIOD (setting
 this too low will cause the machine to become unresponsive or even lock
 up), the INPUT_SCALE (if you can select different step sizes on your stepper
 driver, change pulley ratios, or leadscrew pitch), or the MAX_VELOCITY
 and STEPGEN_MAXVEL.
\end_layout

\begin_layout Standard
If no valid combination of BASE_PERIOD, INPUT_SCALE, and MAX_VELOCITY is
 acceptable, then consider using hardware step generation (such as with
 the emc2-supported Universal Stepper Controller, Mesa cards, and others.)
\end_layout

\begin_layout Section
\begin_inset LatexCommand label
name "sec:Pinout"

\end_inset

Pinout
\begin_inset LatexCommand index
name "pinout"

\end_inset


\end_layout

\begin_layout Standard
One of the major flaws in EMC was that you couldn't specify the pinout without
 recompiling the source code.
 EMC2 is far more flexible, and now (thanks to the Hardware Abstraction
 Layer) you can easily specify which signal goes where.
 See the HAL manual for more detailed information on HAL.
\end_layout

\begin_layout Standard
As it is described in the HAL Introduction and tutorial, we have signals,
 pins and parameters inside the HAL.
 
\end_layout

\begin_layout Standard
The ones relevant for our pinout are
\begin_inset Foot
status collapsed

\begin_layout Standard
Note: we are only presenting one axis to keep it short, all others are similar.
\end_layout

\end_inset

:
\end_layout

\begin_layout LyX-Code
signals: Xstep, Xdir & Xen
\newline
pins: parport.0.pin-XX-out & parport.0.pin-XX-in 
\begin_inset Foot
status collapsed

\begin_layout Standard
Refer to section 
\begin_inset LatexCommand ref
reference "sec:Parport"

\end_inset

 for additional information
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Depending on what you have chosen in your .ini file you are using either
 standard_pinout.hal or xylotex_pinout.hal.
 These are two files that instruct the HAL how to link the various signals
 & pins.
 Further on we'll investigate the standard_pinout.hal.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:standard_pinout.hal"

\end_inset

standard_pinout.hal
\begin_inset LatexCommand index
name "standard pinout"

\end_inset

 
\end_layout

\begin_layout Standard
This file contains several HAL commands, and usually looks like this:
\end_layout

\begin_layout LyX-Code
\begin_inset Include \verbatiminput{../../../configs/stepper/standard_pinout.hal}
preview false

\end_inset


\end_layout

\begin_layout Standard
The files starting with '#' are comments, and their only purpose is to guide
 the reader through the file.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:Overview-standard_pinout.hal"

\end_inset

Overview of the standard_pinout.hal
\end_layout

\begin_layout Standard
There are a couple of operations that get executed when the standard_pinout.hal
 gets executed / interpreted:
\end_layout

\begin_layout Enumerate
The Parport driver gets loaded (see 
\begin_inset LatexCommand ref
reference "sec:Parport"

\end_inset

 for details)
\end_layout

\begin_layout Enumerate
The read & write functions of the parport driver get assigned to the base
 thread 
\begin_inset Foot
status collapsed

\begin_layout Standard
the fastest thread in the EMC2 setup, usually the code gets executed every
 few microseconds
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
The step & direction signals for axes X,Y,Z get linked to pins on the parport
\end_layout

\begin_layout Enumerate
Further IO signals get connected (estop loopback, toolchanger loopback)
\end_layout

\begin_layout Enumerate
A spindle-on signal gets defined and linked to a parport pin
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:Changing-standard_pinout.hal"

\end_inset

Changing the standard_pinout.hal
\end_layout

\begin_layout Standard
If you want to change the standard_pinout.hal file, all you need is a text
 editor.
 Open the file and locate the parts you want to change.
 
\end_layout

\begin_layout Standard
If you want for example to change the pin for the X-axis Step & Directions
 signals, all you need to do is to change the number in the 'parport.0.pin-XX-out'
 name:
\end_layout

\begin_layout LyX-Code
net Xstep parport.0.pin-03-out 
\newline
net Xdir  parport.0.pin-02-out
\end_layout

\begin_layout Standard
can be changed to:
\end_layout

\begin_layout LyX-Code
net Xstep parport.0.pin-02-out 
\newline
net Xdir  parport.0.pin-03-out
\end_layout

\begin_layout Standard
or basically any other numbers you like.
 
\end_layout

\begin_layout Standard
Hint: make sure you don't have more than one signal connected to the same
 pin.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:Changing-the-polarity"

\end_inset

Changing the polarity of a signal
\begin_inset LatexCommand index
name "signal polarity"

\end_inset


\end_layout

\begin_layout Standard
If external hardware expects an 
\begin_inset Quotes eld
\end_inset

active low
\begin_inset Quotes erd
\end_inset

 signal, set the corresponding 
\family typewriter
-invert
\family default
 parameter.
 For instance, to invert the spindle control signal:
\end_layout

\begin_layout LyX-Code
setp parport.0.pin-09-invert TRUE
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:PWM-Spindle-Speed"

\end_inset

Adding PWM Spindle Speed Control
\begin_inset LatexCommand index
name "spindle speed control"

\end_inset


\end_layout

\begin_layout Standard
If your spindle can be controlled by a PWM signal, use the 
\family typewriter
pwmgen
\family default
 component to create the signal:
\end_layout

\begin_layout LyX-Code
loadrt pwmgen output_type=0
\newline
addf pwmgen.update servo-thread
\newline
addf pwmgen.make-pulses
 base-thread
\newline
net spindle-speed-cmd motion.spindle-speed-out => pwmgen.0.value
\newline
net
 spindle-on motion.spindle-on => pwmgen.0.enable
\newline
net spindle-pwm pwmgen.0.pwm
 => parport.0.pin-09-out
\newline
setp pwmgen.0.scale 1800 # Change to your spindle's
 top speed in RPM
\end_layout

\begin_layout Standard
This assumes that the spindle controller's response to PWM is simple: 0%
 PWM gives 0 RPM, 10% PWM gives 180 RPM, etc.
 If there is a minimum PWM required to get the spindle to turn, follow the
 example in the 
\emph on
nist-lathe
\emph default
 sample configuration to use a 
\family typewriter
scale
\family default
 component.
\end_layout

\begin_layout Subsection
\begin_inset LatexCommand label
name "sub:Adding-enable-signal"

\end_inset

Adding an enable signal
\begin_inset LatexCommand index
name "enable signal"

\end_inset


\end_layout

\begin_layout Standard
Some amplifiers (drives) require an enable signal before they accept and
 command movement of the motors.
 For this reason there are already defined signals called 'Xen', 'Yen',
 'Zen'.
\end_layout

\begin_layout Standard
To connect them use the following example:
\end_layout

\begin_layout LyX-Code
net Xen parport.0.pin-08-out
\end_layout

\begin_layout Standard
You can either have one single pin that enables all drives; or several,
 depending on the setup you have.
 Note, however, that usually when one axis faults, all the other drives
 will be disabled as well, so having only one enable signal / pin for all
 drives is a common practice.
\end_layout

\begin_layout Subsection
Adding an external ESTOP
\begin_inset LatexCommand index
name "ESTOP"

\end_inset

 button
\end_layout

\begin_layout Standard
As you can see in 
\begin_inset LatexCommand ref
reference "sub:standard_pinout.hal"

\end_inset

 by default the stepper configuration assumes no external ESTOP button.
 
\begin_inset Foot
status collapsed

\begin_layout Standard
An extensive explanation of hooking up ESTOP circuitry is explained in the
 wiki.linuxcnc.org and in the Integrator Manual
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To add a simple external button you need to replace the line:
\end_layout

\begin_layout LyX-Code
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in
\end_layout

\begin_layout Standard
with
\end_layout

\begin_layout LyX-Code
net estop-loop parport.0.pin-01-in iocontrol.0.emc-enable-in
\end_layout

\begin_layout Standard
This assumes an ESTOP switch connected to pin 01 on the parport.
 As long as the switch will stay pushed
\begin_inset Foot
status collapsed

\begin_layout Standard
make sure you use a maintained switch for ESTOP.
\end_layout

\end_inset

, EMC2 will be in the ESTOP state.
 When the external button gets released EMC2 will imediately switch to the
 ESTOP-RESET state, and all you need to do is switch to Machine On
\begin_inset LatexCommand index
name "machine on"

\end_inset

 and you'll be able to continue your work with EMC2.
\end_layout

\end_body
\end_document
